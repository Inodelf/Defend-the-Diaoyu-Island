
(define lat?
	(lambda (l)
		(cond
			((null? l) #t)
			((atom? (car l)) (lat? (cdr l)))
			(else #f))))

;This function will affirm  one member from a list
(define member?
	(lambda (a lat)
		(cond
			((null? lat) #f)
			(if (eq? (car lat) a) #t)
			(else (member? a (cdr lat))))))

;This function will remove one member from a list
(define rember
	(lambda (a lat)
		(cond
			((null? lat) (quote ()))
			((eq? (car lat) a) (cdr lat))
				(else (cons (car lat)
					(rember a (cdr lat)))))))

(define firsts
	(lambda (l)
		(cond
			((null? l) quote())
			(else (cons (car (car l))
				(firsts (cdr l)))))))






(define insertR
	(lambda (new old lat)
		(cond 
			((null? lat) (quote()))
			(else (cond			
					((eq? (car lat) old)
						(cons old (cons new (cdr lat))))
					(else (cons (car lat)
						(insertR new old
							(cdr lat)))))))


(define insertL
	(lambda (new old lat)
		(cond
			((null? lat) quote()))
			(else
				(cond
					((eq? (car lat) old) 
						(cons new lat))
					(else (cons (car lat)
						(insertL new old
							(cdr lat)))))))))

;Subst some word if find the word
(define subst
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else (cond
					((eq? (car lat) old)
						(cons new (cdr lat)))
					(else (cons (car lat)
						(subst new old
						(cdr lat)))))))))

;Subst the  word if it found alternative word first in two lists
(define subst2
	(lambda (new o1 o2 lat)
		(cond
			((null? lat) (quate ()))
			(else (cond
			((or (eq? (car lat) o1) (eq? (car lat) o2))
				(cons new (cdr lat)))
				(else (cons (car lat)
					(subst2 new o1 o2 (cd lat)))))))))


;Find out the word a, and then remove it.
(define multirember
	(lambda (a lat)
		(cond
			((null? lat) (quote ()))
			(else (cond
				((eq? (car lat) a)
					(multirember a (cdr lat)))
					(else (cons (car lat)
						(multirember a
							(cdr lat)))))))))

;Find out all the word old,and replace with new
(define multiinsertR
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else
				(cond
					((eq? (car lat) old)
					(cons (car lat)
					(cons new
						(multiinsertR new old
								(cdr lat)))))
					(else (cons (car lat)
						(multiinsertR new old
							(cdr lat)))))))))


;Find out all the word old, and insert the word new at the leftward
(define multiinsertL
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else
				(cond
					((eq? (car lat) old)
							(cons new
								(cons old
									(multiinsertL new old cdr lat)))))
					(else (cons (car lat)
						(multiinsertL new old
							(cdr lat)))))))))



;替换函数
(define multisubst
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else (cond
				((eq? (car lat) old)
					(cons new
						(multisubst new old
							(car lat))))
				(else (cons (car lat)
					(multisubst new old								(car lat)))))))))



;add1
(define add1
	(lambda (n)
		(+ n 1)))	
;sub1
(define sub1
	(lambda (n)
		(- n 1)))

;function of add
(define o+
	(lambda (n m)
		(cond
			((zero? m) m)
			(else (add1 (o+ n (sub1 m)))))))

; And sub
(define o-
	(lambda (n m)
		(cond
			((zero? m) n)
			(else (sub1 (o- n (sub1 m)))))))



;Fill in the dots in the following definition
(define addtup
	(lambda (tup)
		(cond
			((null? tup 0)
			(else (o+ (car tup) (addtup (addtup (cdr tup)))


; Try to write the function *
(define o*
	(lambda (n m)
		(cond
			((zero? m) 0)
			(else (o+ n (* n (sub1 m)))))))


;Write the function tup+
(define tup+
	(lambda (tup1 tup2)
		(cond
			((null? tup1) tup2)
			((null? tup2) tup1)
			(else
				(cons (o+ (car tup1) (car tup2))
					(tup+
						(cdr tup1) (cdr tup2)))))))


;Now try to write <
(define o<
	(lambda (n m)
		
		(o= (n m) quote())
			(cond
				((zero? m) #f)
				((zero? n) #t)
				(else (< (sub1 n) (sub1 m))))))


;Here is the definition of =
(define o=
	(lambda (n m)
		(cond
			((zero? m) (zero? n))
			((zero? n) #f)
			(else (o= (sub1 n) (sub1 m))))))


;Write the function of expt
(define expt
	(lambda (n m)
		(cond
			((zero? m) 1)
			(else (o* n (expt n (sub1 m)))))))


(define abs
	(abs x)
	(cond ((> x 0) x)
		((= x 0) 0)
		((< x 0) (- x))))
;What is a good name for this function?
(define quotient
	(lambda (n m)
		(cond
			((< n m) 0)
			(else (add1 (quotient (- n m) m))))))


;Now try to write the function length
(define length
	(lambda (lat)
		(cond
			((null? lat) 0)
			(else (add1 (length (cdr lat)))))))


;Try to write the function pick
(define pick
	(lambda (n lat)
		(cond
			((zero? (sub1 n)) (car lat))
			(else (pick (sub1 n) (cdr lat))))))




;Write the function no-nums
(define no-nums
	(lambda (lat)
		(cond
			((null? lat) (quote ()))
			(else (cond
				((number (car lat))
					(no-nums (cdr lat)))
				(else (cons (car lat)
					(no-nums
						(cdr lat)))))))))


;Now write all-nums which extracts a tup from a lat using all the numbers in the lat.
(define all-nums
	(lambda (lat)
		(cond
			((null? lat) (quote ()))
			(else
				(cond
					((number? (car lat))
						(cons (car lat)
							(all-nums (cdr lat))))
					(else (all-nums (cdr lat))))))))

;Write the function eqan? whic is true if its two arguments (a1 and a2) are the same atom.
(define eqan?
	(lambda (a1 a2)
		(cond
			((and (number? a1) (number? a2))
				(o= a1 a2))
			((or (number? a1) (number? a2))
				#f)
			(else (eq? a1 a2)))))

;Now write the function occur which counts the number of times an atom a appears in a lat.
(define occur
	(lambda (a lat)
		(cond
			((null? lat) 0)
			(else
				(cond
					((eq? (car lat) a)
						(add1 (occur a (cdr lat))))
					(else (occur a (cdr lat))))))))

;Write the function one? whre (one? n) is #t if n is 1 and #f (i.e.,false) otherwise.
(define one?
	(lambda (n)
	(= n 1)))

;Now rewrite the function rempick that removes the n atom from a lat.
;The fourth class is over


;the function of rempick
(define rempick
	(lambda (n lat)
		(cond
			((one? n) (cdr lat))
			(else (cons (car lat)
				(rempick (sub1 n)
					(cdr lat)))))))
