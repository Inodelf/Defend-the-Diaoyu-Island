(define atom? 
	(lambda (x)
		(and (not (pair? x)) (not (null? x)))))

(define lat?
	(lambda (l)
		(cond
			((null? l) #t)
			((atom? (car l)) (lat? (cdr l)))
			(else #f))))


;This function will affirm  one member from a list
(define member?
	(lambda (a lat)
		(cond
			((null? lat) #f)
			(else (or (eq? (car lat) a)
				(member? a (cdr lat)))))))

;This function will remove one member from a list
(define rember
	(lambda (a lat)
		(cond
			((null? lat) (quote ()))
			((eq? (car lat) a) (cdr lat))
				(else (cons (car lat)
					(rember a (cdr lat)))))))


(define firsts
	(lambda (lat)
		(cond
			((null? lat) (quote()))
			(else (cons (car (car lat))
				(firsts (cdr lat)))))))


(define insertR
	(lambda (new old lat)
		(cond 
			((null? lat) (quote()))
			(else (cond			
					((eq? (car lat) old)
						(cons old (cons new (cdr lat))))
					(else (cons (car lat)
						(insertR new old
							(cdr lat)))))))))



(define insertL
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else
				(cond
					((eq? (car lat) old) 
						(cons new lat))
					(else (cons (car lat)
						(insertL new old
							(cdr lat)))))))))



;Subst some word if find the word
(define subst
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else (cond
					((eq? (car lat) old)
						(cons new (cdr lat)))
					(else (cons (car lat)
						(subst new old
						(cdr lat)))))))))



;Subst the  word if it found alternative word first in two lists
(define subst2
	(lambda (new o1 o2 lat)
		(cond
			((null? lat) (quate ()))
			(else (cond
			((or (eq? (car lat) o1) (eq? (car lat) o2))
				(cons new (cdr lat)))
			(else (cons (car lat)
				(subst2 new o1 o2 (cdr lat)))))))))



;Find out all the word a, and then remove it.
(define multirember
	(lambda (a lat)
		(cond
			((null? lat) (quote ()))
			(else (cond
				((eq? (car lat) a)
					(multirember a (cdr lat)))
					(else (cons (car lat)
						(multirember a
							(cdr lat)))))))))




;Find out all the word old,and replace with new
(define multiinsertR
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else
				(cond
					((eq? (car lat) old)
					(cons (car lat)
					(cons new
						(multiinsertR new old
								(cdr lat)))))
					(else (cons (car lat)
						(multiinsertR new old
							(cdr lat)))))))))





;Find out all the word old, and insert the word new at the leftward
(define multiinsertL
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else
				(cond
					((eq? (car lat) old)
					(cons new 
					(cons old
						(multiinsertL new old (cdr lat)))))
					(else (cons (car lat)
						(multiinsertL new old
							(cdr lat)))))))))





;替换函数
(define multisubst
	(lambda (new old lat)
		(cond
			((null? lat) (quote()))
			(else (cond
				((eq? (car lat) old)
					(cons new
						(multisubst new old
							(cdr lat))))
				(else (cons (car lat)
					(multisubst new old (cdr lat)))))))))





;add1
(define add1
	(lambda (n)
		(+ n 1)))	
;sub1
(define sub1
	(lambda (n)
		(- n 1)))



;function of add
(define add
	(lambda (n m)
		(cond
			((zero? m) n)
			(else (add1 (add n (sub1 m)))))))



; And sub
(define sub
	(lambda (n m)
		(cond
			((zero? m) n)
			(else (sub1 (sub n (sub1 m)))))))



(define addtup
	(lambda (tup)
		(cond
		((null? tup) 0)
		(else
			(add (car tup) (addtup (cdr tup)))))))



; Try to write the function multiply
(define multi
	(lambda (n m)
		(cond
			((zero? m) 0)
			(else (add n (multi n (sub1 m)))))))



(define tupadd
	(lambda (tup1 tup2)
		(cond
			((null? tup1) tup2)
			((null? tup2) tup1)
			(else
				(cons
					(add (car tup1) (car tup2))
					(tupadd 
						(cdr tup1) (cdr tup2)))))))		





;Now try to write greater
(define greater
	(lambda (n m)
		(cond
			((zero? n) #f)
			((zero? m) #t)
			(else (greater (sub1 n) (sub1 m))))))




(define less
	(lambda (n m)
		(cond
			((zero? m) 0)
			((zero? n) 1)
			(else (less (sub1 n) (sub1 m))))))



;Here is the definition of equ
(define equ
	(lambda (n m)
		(cond
			((zero? m) (zero? n))
			((zero? n) #f)
			(else (equ (sub1 n) (sub1 m))))))


(define =
	(lambda (n m)
		(cond
			((greater n m) #f)
			((less n m) #f)
			(else #t))))




;Write the function of expt
(define expt 
	(lambda (n m)
		(cond
			((eq? m 0) 1)
			(else (multi n (expt n (sub1 m)))))))


(define quotient
	(lambda (n m)
		(cond
			((< n m) 0)
			(else (add1 (quotient (sub n m) m))))))




;Now try to write the function length
(define length
	(lambda (lat)
		(cond
			((null? lat) 0)
			(else (add1 (length (cdr lat)))))))


(define pick
	(lambda (n lat)
		(cond
			((zero? (sub1 n)) (car lat))
			(else (pick (sub1 n) (cdr lat))))))



(define rempick
	(lambda (n lat)
		(cond
			((one? n) (cdr lat))
			(else (cons (car lat)
				(rempick (sub1 n)
					(cdr lat)))))))


(define numb?
	(lambda (n)
		(cond
			((atom? n)
			((zero? n) 
			(numb? (sub1 n)))))))





;Write the function no-nums
(define no-nums
	(lambda (lat)
		(cond
			((null? lat) (quote ()))
			(else (cond
				((number? (car lat))
					(no-nums (cdr lat)))
				(else (cons (car lat)
					(no-nums
						(cdr lat)))))))))



;Now write all-nums which extracts a tup from a lat using all the numbers in the lat.
(define all-nums
	(lambda (lat)
		(cond
			((null? lat) (quote ()))
			(else
				(cond
					((number? (car lat))
						(cons (car lat)
							(all-nums (cdr lat))))
					(else (all-nums (cdr lat))))))))



;Write the function eqan? whic is true if its two arguments (a1 and a2) are the same atom.
(define eqan?
	(lambda (a1 a2)
		(cond
			((and (number? a1) (number? a2))
				(equ a1 a2))
			((or (number? a1) (number? a2))
				#f)
			(else (eq? a1 a2)))))



(define occur
	(lambda (a lat)
		(cond
			((null? lat) 0)
			(else 
				(cond
					((eq? (car lat) a)
					(add1 (occur a (cdr lat))))
					(else (occur a (cdr lat))))))))


(define one?
	(lambda (n)
		(eq? n 1)))



(define rember*
	(lambda (a l)
		(cond
			((null? l) (quote ()))
			((atom? (car l))
				(cond
					((eq? (car l) a)
						(rember* a (cdr l)))
					(else (cons (car l)
						(rember* a (cdr l))))))	
			(else (cons (rember* a (car l))
				(rember* a (cdr l)))))))


( define insertR*
	(lambda (new old l)
		(cond
			((null? l) (quote ()))
			((atom? (car l))
     				(cond
					((eq? (car l) old )
						(cons old
							(cons new
								(insertR* new old
								 (cdr l)))))
				(else (cons (car l)
					(insertR* new old
					 (cdr l))))))
			(else (cons (insertR* new old
				(car l))
			(insertR* new old
			 (cdr l)))))))



(define occur*
	(lambda (a l)
		(cond
			((null? l) 0)
			((atom?	(car l))
				(cond
					((eq? (car l) a)
					(add1 (occur* a (cdr l))))
					(else (occur* a (cdr l)))))
			(else (add (occur* a (car l))
				(occur* a (cdr l)))))))


(define subst*
	(lambda (new old l)
		(cond
			((null? l) (quote ()))
			((atom? (car l))
			(cond
				((eq? (car l) old)
				(cons new (subst* new old (cdr l))))
				(else (cons (car l)
					(subst* new old (cdr l))))))
		(else
			(cons (subst* new old (car))
			(subst* new old (cdr l)))))))




(define insertL*
	(lambda (new old l)
		(cond
			((null? l) (quote ()))
			((atom? (car l))
			(cond
				((eq? (car l) old)
				(cons new
					(cons old
					(insertL* new old (cdr l)))))
			(else (cons (car l)
				(insertL* new old (cdr l))))))
		(else (cons (insertL* new old (car l))
			(insertL* new old (cdr l)))))))



(define member*
	(lambda (a l)
		(cond
			((null? l) #f)
			((atom? (car l))
			(or (eq? (car l) a)
				(member* a (cdr l))))
			(else (or (member* a (car l))
				(member* a (cdr l)))))))


(define leftmost
	(lambda (l)
		(cond
			((atom? (car l)) (car l))
			(else (leftmost (car l))))))





(define equal?
	(lambda (s1 s2)
		(cond
			((and (atom? s1) (atom? s2))
			(eqan? s1 s2))
			((or (atom? s1) (atom? s2)) #f)
			(else (eqlist? s1 s2)))))



(define eqlist?	
	(lambda (l1 l2)
		(cond
			((and (null? l1) (null? l2)) #t)
			((or (null? l1) (null? l2)) #f)
			(else 
				(and (equal? (car l1) (car l2))
					(eqlist? (cdr l1) (cdr l2)))))))


(define rember2
	(lambda (s l)
		(cond
			((null? l) (quote ()))
			((equal? (car l) s) (cdr l))
			(else (cons (car l)
				(rember2 s (cdr l)))))))


;the Sixth Chapter
(define numbered?
	(lambda (aexp)
		(cond
			((atom? aexp) (number? aexp))
				(else
				(and (numbered? (car aexp)) 
					 (numbered? (car (cdr (cdr aexp)))))))))


(define value
	(lambda (nexp)
		(cond
			((atom? nexp) nexp)
			((eq? (operator nexp) (quote +))
				(add (value (1st-sub-exp nexp))
				 (value (2nd-sub-exp nexp))))
				((eq? (car nexp) (quote *))
					(multi (value (1st-sub-exp nexp))
					 (value (2nd-sub-exp nexp))))
			(else
				(expt (value (1st-sub-exp nexp))
					(value (2nd-sub-exp nexp)))))))

(define 1st-sub-exp
	(lambda (aexp)
		(car (cdr aexp))))

(define 2nd-sub-exp
	(lambda (aexp)
		(car (cdr (cdr aexp)))))

(define operator
	(lambda (aexp)
		(car aexp)))



(define makeset
	(lambda (lat)
		(cond
			((null? lat) (quote ()))
			((member? (car lat) (cdr lat))
				  (makeset (cdr lat)))
			(else (cons (car lat)
			      (makeset (cdr lat)))))))


(define subset?
	(lambda (set1 set2)
		(cond
			((null? set1) #t)
			((member? (car set1) set2)
			(subset? (cdr set1) set2))
			(else #f))))


(define intersect
	(lambda (set1 set2)
		(cond
			((null? set1) (quote ()))
			((member? (car set1) set2)
			(cons (car set1)
			      (intersect (cdr set1) set2)))
			(else
				(intersect (cdr set1) set2)))))


(define union
	(lambda (set1 set2)
		(cond
			((null? set1) set2)
			((member? (car set1) set2)
				  (union (cdr set1) set2))
			(else (cons (car set1)
			      (union (cdr set1) set2))))))

(define part1
	(lambda (set1 set2)
		(cond
		((null? set1) (quote ()))
		((member? (car set1) set2)
			  (part1 (cdr set1) set2))
		(else (cons (car set1)
		      (part1 (cdr set1) set2))))))

(define intersectall
	(lambda (l-set)
		(cond
		((null? (cdr l-set)) (car l-set))
		(else (intersect (car l-set)
		      (intersectall (cdr l-set)))))))	


(define a-pair?
	(lambda (set)
		(cond
			((atom? set) #f)
			((null? set) #f)
			((null? (cdr set)) #f)
			((null? (cdr (cdr set))) #t)
			(else #f))))	

(define first
	(lambda (p)
		(car p)))
	
(define second
	(lambda (p)
		(car (cdr p))))
	
(define build
	(lambda (s1 s2)
		(cond
			(else
				(cons s1
				      (cons s2 (quote ())))))))

(define third
	(lambda (p)
		(car (cdr (cdr p)))))

(define fun?
	(lambda (rel)
		(set? (firsts rel))))

(define revrel
	(lambda (rel)
		(cond
			((null? rel) (quote ()))
			(else	(cons
				(build (second (car rel)) 
				       (first (car rel)))
				(revrel (cdr rel)))))))



		
(define eqset?
	(lambda (set1 set2)
			(and (subset? set1 set2)
			(subset? set2 set1))))

(define set?
	 (lambda (lat)
		 (cond
			((null? lat) #t)
			((member? (car lat) (cdr lat)) #f)
			(else (set?  (cdr lat))))))
(define eq?-c
	(lambda (a)
		(lambda (x)
			(eq? x a))))


(define multirember_co
	(lambda (a lat col)
		(cond
			((null? lat)
			(col (quote ()) (quote ())))
			((eq? (car lat) a)
				(multirember_co a (cdr lat)
				(lambda (newlat seen)
					(col newlat
						(cons (car lat) seen)))))
			(else
				(multirember_co a
					(cdr lat)
					(lambda (newlat seen)
						(col (cons (car lat) newlat)
						seen)))))))	

(define a-friend
	(lambda (x y)
		(null? y)))


(define last-friend 
	(lambda (x y)
		(length x)))
