cscope 15 $HOME/Defend-the-Diaoyu-Island               0001775890
	@SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@SDL_active.h

28 #i‚de‡
_SDL_a˘ive_h


29 
	#_SDL_a˘ive_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	#SDL_APPMOUSEFOCUS
 0x01

	)

43 
	#SDL_APPINPUTFOCUS
 0x02

	)

44 
	#SDL_APPACTIVE
 0x04

	)

54 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëAµSèã
();

58 #ifde‡
__˝lu•lus


61 
	~"˛o£_code.h
"

	@SDL_audio.h

28 #i‚de‡
_SDL_audio_h


29 
	#_SDL_audio_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_ídün.h
"

34 
	~"SDL_muãx.h
"

35 
	~"SDL_thªad.h
"

36 
	~"SDL_rw›s.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


74 
	sSDL_AudioS≥c
 {

75 
‰eq
;

76 
Uöt16
 
f‹m©
;

77 
Uöt8
 
ch™√ls
;

78 
Uöt8
 
sûí˚
;

79 
Uöt16
 
ßm∂es
;

80 
Uöt16
 
∑ddög
;

81 
Uöt32
 
size
;

91 (
SDLCALL
 *
ˇŒback
)(*
u£rd©a
, 
Uöt8
 *
°ªam
, 
Àn
);

92 *
u£rd©a
;

93 } 
	tSDL_AudioS≥c
;

100 
	#AUDIO_U8
 0x0008

	)

101 
	#AUDIO_S8
 0x8008

	)

102 
	#AUDIO_U16LSB
 0x0010

	)

103 
	#AUDIO_S16LSB
 0x8010

	)

104 
	#AUDIO_U16MSB
 0x1010

	)

105 
	#AUDIO_S16MSB
 0x9010

	)

106 
	#AUDIO_U16
 
AUDIO_U16LSB


	)

107 
	#AUDIO_S16
 
AUDIO_S16LSB


	)

113 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


114 
	#AUDIO_U16SYS
 
AUDIO_U16LSB


	)

115 
	#AUDIO_S16SYS
 
AUDIO_S16LSB


	)

117 
	#AUDIO_U16SYS
 
AUDIO_U16MSB


	)

118 
	#AUDIO_S16SYS
 
AUDIO_S16MSB


	)

126 
	sSDL_AudioCVT
 {

127 
√eded
;

128 
Uöt16
 
§c_f‹m©
;

129 
Uöt16
 
d°_f‹m©
;

130 
øã_ö¸
;

131 
Uöt8
 *
buf
;

132 
Àn
;

133 
Àn_cvt
;

134 
Àn_mu…
;

135 
Àn_øtio
;

136 (
SDLCALL
 *
fûãrs
[10])(
SDL_AudioCVT
 *
cvt
, 
Uöt16
 
f‹m©
);

137 
fûãr_ödex
;

138 } 
	tSDL_AudioCVT
;

150 
DECLSPEC
 
SDLCALL
 
SDL_AudioInô
(c⁄° *
drivî_«me
);

151 
DECLSPEC
 
SDLCALL
 
SDL_AudioQuô
();

159 
DECLSPEC
 * 
SDLCALL
 
SDL_AudioDrivîName
(*
«mebuf
, 
maxÀn
);

178 
DECLSPEC
 
SDLCALL
 
SDL_O≥nAudio
(
SDL_AudioS≥c
 *
desúed
, SDL_AudioS≥¯*
obèöed
);

181 
	gSDL_AUDIO_STOPPED
 = 0,

182 
	gSDL_AUDIO_PLAYING
,

183 
	gSDL_AUDIO_PAUSED


184 } 
	tSDL_audio°©us
;

187 
DECLSPEC
 
SDL_audio°©us
 
SDLCALL
 
SDL_GëAudioSètus
();

196 
DECLSPEC
 
SDLCALL
 
SDL_Pau£Audio
(
∑u£_⁄
);

215 
DECLSPEC
 
SDL_AudioS≥c
 * 
SDLCALL
 
SDL_LﬂdWAV_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, SDL_AudioS≥¯*
•ec
, 
Uöt8
 **
audio_buf
, 
Uöt32
 *
audio_Àn
);

218 
	#SDL_LﬂdWAV
(
fûe
, 
•ec
, 
audio_buf
, 
audio_Àn
) \

219 
	`SDL_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(
fûe
, "rb"),1, 
•ec
,
audio_buf
,
audio_Àn
)

	)

224 
DECLSPEC
 
SDLCALL
 
SDL_FªeWAV
(
Uöt8
 *
audio_buf
);

234 
DECLSPEC
 
SDLCALL
 
SDL_BuûdAudioCVT
(
SDL_AudioCVT
 *
cvt
,

235 
Uöt16
 
§c_f‹m©
, 
Uöt8
 
§c_ch™√ls
, 
§c_øã
,

236 
Uöt16
 
d°_f‹m©
, 
Uöt8
 
d°_ch™√ls
, 
d°_øã
);

247 
DECLSPEC
 
SDLCALL
 
SDL_C⁄vîtAudio
(
SDL_AudioCVT
 *
cvt
);

250 
	#SDL_MIX_MAXVOLUME
 128

	)

258 
DECLSPEC
 
SDLCALL
 
SDL_MixAudio
(
Uöt8
 *
d°
, c⁄° Uöt8 *
§c
, 
Uöt32
 
Àn
, 
vﬁume
);

268 
DECLSPEC
 
SDLCALL
 
SDL_LockAudio
();

269 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockAudio
();

275 
DECLSPEC
 
SDLCALL
 
SDL_Clo£Audio
();

279 #ifde‡
__˝lu•lus


282 
	~"˛o£_code.h
"

	@SDL_byteorder.h

29 
	~"SDL_ídün.h
"

	@SDL_cdrom.h

28 #i‚de‡
_SDL_cdrom_h


29 
	#_SDL_cdrom_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


48 
	#SDL_MAX_TRACKS
 99

	)

54 
	#SDL_AUDIO_TRACK
 0x00

	)

55 
	#SDL_DATA_TRACK
 0x04

	)

60 
CD_TRAYEMPTY
,

61 
CD_STOPPED
,

62 
CD_PLAYING
,

63 
CD_PAUSED
,

64 
CD_ERROR
 = -1

65 } 
	tCD°©us
;

68 
	#CD_INDRIVE
(
°©us
Ë(()(°©usË> 0)

	)

70 
	sSDL_CDåack
 {

71 
Uöt8
 
id
;

72 
Uöt8
 
ty≥
;

73 
Uöt16
 
unu£d
;

74 
Uöt32
 
Àngth
;

75 
Uöt32
 
off£t
;

76 } 
	tSDL_CDåack
;

79 
	sSDL_CD
 {

80 
id
;

81 
CD°©us
 
°©us
;

85 
numåacks
;

86 
cur_åack
;

87 
cur_‰ame
;

88 
SDL_CDåack
 
åack
[
SDL_MAX_TRACKS
+1];

90 } 
	tSDL_CD
;

96 
	#CD_FPS
 75

	)

97 
	#FRAMES_TO_MSF
(
f
, 
M
,
S
,
F
) { \

98 
vÆue
 = 
f
; \

99 *(
F
Ë
vÆue
%
CD_FPS
; \

100 
vÆue
 /
CD_FPS
; \

101 *(
S
Ë
vÆue
%60; \

102 
vÆue
 /= 60; \

103 *(
M
Ë
vÆue
; \

104 }

	)

105 
	#MSF_TO_FRAMES
(
M
, 
S
, 
F
Ë((M)*60*
CD_FPS
+(S)*CD_FPS+(F))

	)

114 
DECLSPEC
 
SDLCALL
 
SDL_CDNumDrives
();

123 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_CDName
(
drive
);

132 
DECLSPEC
 
SDL_CD
 * 
SDLCALL
 
SDL_CDO≥n
(
drive
);

139 
DECLSPEC
 
CD°©us
 
SDLCALL
 
SDL_CDSètus
(
SDL_CD
 *
cdrom
);

163 
DECLSPEC
 
SDLCALL
 
SDL_CDPœyTøcks
(
SDL_CD
 *
cdrom
,

164 
°¨t_åack
, 
°¨t_‰ame
, 
¡øcks
, 
n‰ames
);

170 
DECLSPEC
 
SDLCALL
 
SDL_CDPœy
(
SDL_CD
 *
cdrom
, 
°¨t
, 
Àngth
);

175 
DECLSPEC
 
SDLCALL
 
SDL_CDPau£
(
SDL_CD
 *
cdrom
);

180 
DECLSPEC
 
SDLCALL
 
SDL_CDResume
(
SDL_CD
 *
cdrom
);

185 
DECLSPEC
 
SDLCALL
 
SDL_CDSt›
(
SDL_CD
 *
cdrom
);

190 
DECLSPEC
 
SDLCALL
 
SDL_CDEje˘
(
SDL_CD
 *
cdrom
);

193 
DECLSPEC
 
SDLCALL
 
SDL_CDClo£
(
SDL_CD
 *
cdrom
);

197 #ifde‡
__˝lu•lus


200 
	~"˛o£_code.h
"

	@SDL_config-x86_64.h

24 #i‚de‡
_SDL_c⁄fig_h


25 
	#_SDL_c⁄fig_h


	)

30 
	~"SDL_∂©f‹m.h
"

33 #ifde‡
_MSC_VER


34 #îr‹ 
You
 
should
 
c›y
 
ö˛ude
/
SDL_c⁄fig
.
h
. 
to
 include/SDL_config.h

53 
	#SDL_HAS_64BIT_TYPE
 1

	)

56 
	#SDL_BYTEORDER
 1234

	)

59 
	#HAVE_LIBC
 1

	)

60 #i‡
HAVE_LIBC


63 
	#HAVE_ALLOCA_H
 1

	)

64 
	#HAVE_SYS_TYPES_H
 1

	)

65 
	#HAVE_STDIO_H
 1

	)

66 
	#STDC_HEADERS
 1

	)

67 
	#HAVE_STDLIB_H
 1

	)

68 
	#HAVE_STDARG_H
 1

	)

69 
	#HAVE_MALLOC_H
 1

	)

70 
	#HAVE_MEMORY_H
 1

	)

71 
	#HAVE_STRING_H
 1

	)

72 
	#HAVE_STRINGS_H
 1

	)

73 
	#HAVE_INTTYPES_H
 1

	)

74 
	#HAVE_STDINT_H
 1

	)

75 
	#HAVE_CTYPE_H
 1

	)

76 
	#HAVE_MATH_H
 1

	)

77 
	#HAVE_ICONV_H
 1

	)

78 
	#HAVE_SIGNAL_H
 1

	)

82 
	#HAVE_MALLOC
 1

	)

83 
	#HAVE_CALLOC
 1

	)

84 
	#HAVE_REALLOC
 1

	)

85 
	#HAVE_FREE
 1

	)

86 
	#HAVE_ALLOCA
 1

	)

87 #i‚de‡
_WIN32


88 
	#HAVE_GETENV
 1

	)

89 
	#HAVE_PUTENV
 1

	)

90 
	#HAVE_UNSETENV
 1

	)

92 
	#HAVE_QSORT
 1

	)

93 
	#HAVE_ABS
 1

	)

94 
	#HAVE_BCOPY
 1

	)

95 
	#HAVE_MEMSET
 1

	)

96 
	#HAVE_MEMCPY
 1

	)

97 
	#HAVE_MEMMOVE
 1

	)

98 
	#HAVE_MEMCMP
 1

	)

99 
	#HAVE_STRLEN
 1

	)

102 
	#HAVE_STRDUP
 1

	)

108 
	#HAVE_STRCHR
 1

	)

109 
	#HAVE_STRRCHR
 1

	)

110 
	#HAVE_STRSTR
 1

	)

115 
	#HAVE_STRTOL
 1

	)

116 
	#HAVE_STRTOUL
 1

	)

119 
	#HAVE_STRTOLL
 1

	)

120 
	#HAVE_STRTOULL
 1

	)

121 
	#HAVE_STRTOD
 1

	)

122 
	#HAVE_ATOI
 1

	)

123 
	#HAVE_ATOF
 1

	)

124 
	#HAVE_STRCMP
 1

	)

125 
	#HAVE_STRNCMP
 1

	)

127 
	#HAVE_STRCASECMP
 1

	)

129 
	#HAVE_STRNCASECMP
 1

	)

130 
	#HAVE_SSCANF
 1

	)

131 
	#HAVE_SNPRINTF
 1

	)

132 
	#HAVE_VSNPRINTF
 1

	)

133 
	#HAVE_ICONV
 1

	)

134 
	#HAVE_SIGACTION
 1

	)

135 
	#HAVE_SA_SIGACTION
 1

	)

136 
	#HAVE_SETJMP
 1

	)

137 
	#HAVE_NANOSLEEP
 1

	)

139 
	#HAVE_GETPAGESIZE
 1

	)

140 
	#HAVE_MPROTECT
 1

	)

141 
	#HAVE_SEM_TIMEDWAIT
 1

	)

145 
	~<°d¨g.h
>

161 
	#SDL_AUDIO_DRIVER_ALSA
 1

	)

162 
	#SDL_AUDIO_DRIVER_ALSA_DYNAMIC
 "libasound.so.2"

	)

163 
	#SDL_AUDIO_DRIVER_ARTS
 1

	)

164 
	#SDL_AUDIO_DRIVER_ARTS_DYNAMIC
 "lib¨tsc.so.0"

	)

170 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

171 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

174 
	#SDL_AUDIO_DRIVER_PULSE
 1

	)

175 
	#SDL_AUDIO_DRIVER_PULSE_DYNAMIC
 "libpul£-sim∂e.so.0"

	)

176 
	#SDL_AUDIO_DRIVER_ESD
 1

	)

177 
	#SDL_AUDIO_DRIVER_ESD_DYNAMIC
 "libesd.so.0"

	)

182 
	#SDL_AUDIO_DRIVER_OSS
 1

	)

197 
	#SDL_CDROM_LINUX
 1

	)

208 
	#SDL_INPUT_LINUXEV
 1

	)

214 
	#SDL_JOYSTICK_LINUX
 1

	)

226 
	#SDL_LOADSO_DLOPEN
 1

	)

238 
	#SDL_THREAD_PTHREAD
 1

	)

239 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

252 
	#SDL_TIMER_UNIX
 1

	)

262 
	#SDL_VIDEO_DRIVER_DGA
 1

	)

265 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

266 
	#SDL_VIDEO_DRIVER_FBCON
 1

	)

285 
	#SDL_VIDEO_DRIVER_X11
 1

	)

286 
	#SDL_VIDEO_DRIVER_X11_DGAMOUSE
 1

	)

287 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC
 "libX11.so.6"

	)

288 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
 "libXext.so.6"

	)

289 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 "libXøndr.so.2"

	)

290 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER
 "libXªndî.so.1"

	)

291 
	#SDL_VIDEO_DRIVER_X11_VIDMODE
 1

	)

292 
	#SDL_VIDEO_DRIVER_X11_XINERAMA
 1

	)

293 
	#SDL_VIDEO_DRIVER_X11_XME
 1

	)

294 
	#SDL_VIDEO_DRIVER_X11_XRANDR
 1

	)

295 
	#SDL_VIDEO_DRIVER_X11_XV
 1

	)

299 
	#SDL_VIDEO_OPENGL
 1

	)

300 
	#SDL_VIDEO_OPENGL_GLX
 1

	)

306 
	#SDL_VIDEO_DISABLE_SCREENSAVER
 1

	)

309 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL_config.h

33 #ifde‡
SDL_c⁄fig_wøµî_h


36 
	#SDL_c⁄fig_wøµî_h


	)

38 #i‡
deföed
(
__i386__
)

39 
	~"SDL_c⁄fig-i386.h
"

40 #ñi‡
deföed
(
__ü64__
)

41 
	~"SDL_c⁄fig-ü64.h
"

42 #ñi‡
deföed
(
__powîpc64__
)

43 
	~"SDL_c⁄fig-µc64.h
"

44 #ñi‡
deföed
(
__powîpc__
)

45 
	~"SDL_c⁄fig-µc.h
"

46 #ñi‡
deföed
(
__s390x__
)

47 
	~"SDL_c⁄fig-s390x.h
"

48 #ñi‡
deföed
(
__s390__
)

49 
	~"SDL_c⁄fig-s390.h
"

50 #ñi‡
deföed
(
__x86_64__
)

51 
	~"SDL_c⁄fig-x86_64.h
"

52 #ñi‡
deföed
(
__¨m__
)

53 
	~"SDL_c⁄fig-¨m.h
"

54 #ñi‡
deföed
(
__Æpha__
)

55 
	~"SDL_c⁄fig-Æpha.h
"

56 #ñi‡
deföed
(
__•¨c__
Ë&& deföed (
__¨ch64__
)

57 
	~"SDL_c⁄fig-•¨c64.h
"

58 #ñi‡
deföed
(
__•¨c__
)

59 
	~"SDL_c⁄fig-•¨c.h
"

64 #unde‡
SDL_c⁄fig_wøµî_h


	@SDL_cpuinfo.h

28 #i‚de‡
_SDL_˝uöfo_h


29 
	#_SDL_˝uöfo_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasRDTSC
();

43 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMX
();

46 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMXExt
();

49 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNow
();

52 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNowExt
();

55 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE
();

58 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE2
();

61 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasA…iVec
();

64 #ifde‡
__˝lu•lus


67 
	~"˛o£_code.h
"

	@SDL_endian.h

28 #i‚de‡
_SDL_ídün_h


29 
	#_SDL_ídün_h


	)

31 
	~"SDL_°döc.h
"

37 
	#SDL_LIL_ENDIAN
 1234

	)

38 
	#SDL_BIG_ENDIAN
 4321

	)

41 #i‚de‡
SDL_BYTEORDER


42 #ifde‡
__löux__


43 
	~<ídün.h
>

44 
	#SDL_BYTEORDER
 
__BYTE_ORDER


	)

46 #i‡
deföed
(
__hµa__
) || \

47 
deföed
(
__m68k__
Ë|| deföed(
mc68000
Ë|| deföed(
_M_M68K
) || \

48 (
deföed
(
__MIPS__
Ë&& deföed(
__MISPEB__
)) || \

49 
deföed
(
__µc__
Ë|| deföed(
__POWERPC__
Ë|| deföed(
_M_PPC
) || \

50 
	$deföed
(
__•¨c__
)

51 
	#SDL_BYTEORDER
 
SDL_BIG_ENDIAN


	)

53 
	#SDL_BYTEORDER
 
SDL_LIL_ENDIAN


	)

59 
	~"begö_code.h
"

61 #ifde‡
__˝lu•lus


73 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

74 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

75 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

77 
	`__asm__
("xchgb %b0,%h0" : "=q" (
x
) : "0" (x));

78  
x
;

79 
	}
}

80 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

81 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

83 
	`__asm__
("xchgb %b0,%h0" : "=Q" (
x
) : "0" (x));

84  
x
;

85 
	}
}

86 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

87 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

89 
ªsu…
;

91 
	`__asm__
("æwimò%0,%2,8,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
 >> 8), "r" (x));

92  (
Uöt16
)
ªsu…
;

93 
	}
}

94 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

95 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

97 
	`__asm__
("r‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

98  
x
;

99 
	}
}

101 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
) {

102  
	`SDL_°©ic_ˇ°
(
Uöt16
, ((
x
<<8)|(x>>8)));

103 
	}
}

106 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

107 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

108 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

110 
__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

111  
x
;

113 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

114 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

116 
__asm__
("bsw≠»%0" : "Ù" (
x
) : "0" (x));

117  
x
;

119 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

120 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

122 
Uöt32
 
ªsu…
;

124 
__asm__
("æwimò%0,%2,24,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
>>24), "r" (x));

125 
__asm__
("æwimò%0,%2,8,8,15" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

126 
__asm__
("æwimò%0,%2,24,0,7" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

127  
ªsu…
;

129 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

130 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

132 
__asm__
("r‹w #8,%0\n\tsw≠ %0\n\å‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

133  
x
;

136 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
) {

137  
SDL_°©ic_ˇ°
(
Uöt32
, ((
x
<<24)|((x<<8)&0x00FF0000)|((x>>8)&0x0000FF00)|(x>>24)));

141 #ifde‡
SDL_HAS_64BIT_TYPE


142 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

143 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

144 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

147 °ru˘ { 
Uöt32
 
a
,
b
; } 
s
;

148 
Uöt64
 
u
;

149 } 
v
;

150 
v
.
u
 = 
x
;

151 
__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

152 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

153 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

154  
v
.
u
;

156 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

157 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

159 
__asm__
("bsw≠q %0" : "Ù" (
x
) : "0" (x));

160  
x
;

163 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

165 
Uöt32
 
hi
, 
lo
;

168 
lo
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

169 
x
 >>= 32;

170 
hi
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

171 
x
 = 
SDL_Sw≠32
(
lo
);

172 
x
 <<= 32;

173 
x
 |
SDL_Sw≠32
(
hi
);

174  (
x
);

182 
	#SDL_Sw≠64
(
X
Ë(X)

	)

191 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


192 
	#SDL_Sw≠LE16
(
X
Ë(X)

	)

193 
	#SDL_Sw≠LE32
(
X
Ë(X)

	)

194 
	#SDL_Sw≠LE64
(
X
Ë(X)

	)

195 
	#SDL_Sw≠BE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

196 
	#SDL_Sw≠BE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

197 
	#SDL_Sw≠BE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

199 
	#SDL_Sw≠LE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

200 
	#SDL_Sw≠LE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

201 
	#SDL_Sw≠LE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

202 
	#SDL_Sw≠BE16
(
X
Ë(X)

	)

203 
	#SDL_Sw≠BE32
(
X
Ë(X)

	)

204 
	#SDL_Sw≠BE64
(
X
Ë(X)

	)

209 #ifde‡
__˝lu•lus


212 
	~"˛o£_code.h
"

	@SDL_error.h

28 #i‚de‡
_SDL_îr‹_h


29 
	#_SDL_îr‹_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


43 
DECLSPEC
 
SDLCALL
 
SDL_SëEº‹
(c⁄° *
fmt
, ...);

44 
DECLSPEC
 * 
SDLCALL
 
SDL_GëEº‹
();

45 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨Eº‹
();

53 
	#SDL_OutOfMem‹y
(Ë
	`SDL_Eº‹
(
SDL_ENOMEM
)

	)

54 
	#SDL_Unsuµ‹ãd
(Ë
	`SDL_Eº‹
(
SDL_UNSUPPORTED
)

	)

56 
	gSDL_ENOMEM
,

57 
	gSDL_EFREAD
,

58 
	gSDL_EFWRITE
,

59 
	gSDL_EFSEEK
,

60 
	gSDL_UNSUPPORTED
,

61 
	gSDL_LASTERROR


62 } 
	tSDL_îr‹code
;

63 
DECLSPEC
 
SDLCALL
 
SDL_Eº‹
(
SDL_îr‹code
 
code
);

67 #ifde‡
__˝lu•lus


70 
	~"˛o£_code.h
"

	@SDL_events.h

28 #i‚de‡
_SDL_evíts_h


29 
	#_SDL_evíts_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_a˘ive.h
"

34 
	~"SDL_keybﬂrd.h
"

35 
	~"SDL_mou£.h
"

36 
	~"SDL_joy°ick.h
"

37 
	~"SDL_quô.h
"

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


47 
	#SDL_RELEASED
 0

	)

48 
	#SDL_PRESSED
 1

	)

53 
SDL_NOEVENT
 = 0,

54 
SDL_ACTIVEEVENT
,

55 
SDL_KEYDOWN
,

56 
SDL_KEYUP
,

57 
SDL_MOUSEMOTION
,

58 
SDL_MOUSEBUTTONDOWN
,

59 
SDL_MOUSEBUTTONUP
,

60 
SDL_JOYAXISMOTION
,

61 
SDL_JOYBALLMOTION
,

62 
SDL_JOYHATMOTION
,

63 
SDL_JOYBUTTONDOWN
,

64 
SDL_JOYBUTTONUP
,

65 
SDL_QUIT
,

66 
SDL_SYSWMEVENT
,

67 
SDL_EVENT_RESERVEDA
,

68 
SDL_EVENT_RESERVEDB
,

69 
SDL_VIDEORESIZE
,

70 
SDL_VIDEOEXPOSE
,

71 
SDL_EVENT_RESERVED2
,

72 
SDL_EVENT_RESERVED3
,

73 
SDL_EVENT_RESERVED4
,

74 
SDL_EVENT_RESERVED5
,

75 
SDL_EVENT_RESERVED6
,

76 
SDL_EVENT_RESERVED7
,

78 
SDL_USEREVENT
 = 24,

82 
SDL_NUMEVENTS
 = 32

83 } 
	tSDL_EvítTy≥
;

87 
	#SDL_EVENTMASK
(
X
Ë(1<<(X))

	)

89 
SDL_ACTIVEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_ACTIVEEVENT
),

90 
SDL_KEYDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
),

91 
SDL_KEYUPMASK
 = 
SDL_EVENTMASK
(
SDL_KEYUP
),

92 
SDL_KEYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
)|

93 
SDL_EVENTMASK
(
SDL_KEYUP
),

94 
SDL_MOUSEMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
),

95 
SDL_MOUSEBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
),

96 
SDL_MOUSEBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

97 
SDL_MOUSEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
)|

98 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
)|

99 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

100 
SDL_JOYAXISMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
),

101 
SDL_JOYBALLMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
),

102 
SDL_JOYHATMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
),

103 
SDL_JOYBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
),

104 
SDL_JOYBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

105 
SDL_JOYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
)|

106 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
)|

107 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
)|

108 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
)|

109 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

110 
SDL_VIDEORESIZEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEORESIZE
),

111 
SDL_VIDEOEXPOSEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEOEXPOSE
),

112 
SDL_QUITMASK
 = 
SDL_EVENTMASK
(
SDL_QUIT
),

113 
SDL_SYSWMEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_SYSWMEVENT
)

114 } 
	tSDL_EvítMask
 ;

115 
	#SDL_ALLEVENTS
 0xFFFFFFFF

	)

119 
	sSDL_A˘iveEvít
 {

120 
Uöt8
 
ty≥
;

121 
Uöt8
 
gaö
;

122 
Uöt8
 
°©e
;

123 } 
	tSDL_A˘iveEvít
;

126 
	sSDL_KeybﬂrdEvít
 {

127 
Uöt8
 
ty≥
;

128 
Uöt8
 
which
;

129 
Uöt8
 
°©e
;

130 
SDL_keysym
 
keysym
;

131 } 
	tSDL_KeybﬂrdEvít
;

134 
	sSDL_Mou£MŸi⁄Evít
 {

135 
Uöt8
 
ty≥
;

136 
Uöt8
 
which
;

137 
Uöt8
 
°©e
;

138 
Uöt16
 
x
, 
y
;

139 
Söt16
 
xªl
;

140 
Söt16
 
yªl
;

141 } 
	tSDL_Mou£MŸi⁄Evít
;

144 
	sSDL_Mou£Buâ⁄Evít
 {

145 
Uöt8
 
ty≥
;

146 
Uöt8
 
which
;

147 
Uöt8
 
buâ⁄
;

148 
Uöt8
 
°©e
;

149 
Uöt16
 
x
, 
y
;

150 } 
	tSDL_Mou£Buâ⁄Evít
;

153 
	sSDL_JoyAxisEvít
 {

154 
Uöt8
 
ty≥
;

155 
Uöt8
 
which
;

156 
Uöt8
 
axis
;

157 
Söt16
 
vÆue
;

158 } 
	tSDL_JoyAxisEvít
;

161 
	sSDL_JoyBÆlEvít
 {

162 
Uöt8
 
ty≥
;

163 
Uöt8
 
which
;

164 
Uöt8
 
bÆl
;

165 
Söt16
 
xªl
;

166 
Söt16
 
yªl
;

167 } 
	tSDL_JoyBÆlEvít
;

170 
	sSDL_JoyH©Evít
 {

171 
Uöt8
 
ty≥
;

172 
Uöt8
 
which
;

173 
Uöt8
 
h©
;

174 
Uöt8
 
vÆue
;

180 } 
	tSDL_JoyH©Evít
;

183 
	sSDL_JoyBuâ⁄Evít
 {

184 
Uöt8
 
ty≥
;

185 
Uöt8
 
which
;

186 
Uöt8
 
buâ⁄
;

187 
Uöt8
 
°©e
;

188 } 
	tSDL_JoyBuâ⁄Evít
;

194 
	sSDL_ResizeEvít
 {

195 
Uöt8
 
ty≥
;

196 
w
;

197 
h
;

198 } 
	tSDL_ResizeEvít
;

201 
	sSDL_Expo£Evít
 {

202 
Uöt8
 
ty≥
;

203 } 
	tSDL_Expo£Evít
;

206 
	sSDL_QuôEvít
 {

207 
Uöt8
 
ty≥
;

208 } 
	tSDL_QuôEvít
;

211 
	sSDL_U£rEvít
 {

212 
Uöt8
 
ty≥
;

213 
code
;

214 *
d©a1
;

215 *
d©a2
;

216 } 
	tSDL_U£rEvít
;

219 
SDL_SysWMmsg
;

220 
SDL_SysWMmsg
 
	tSDL_SysWMmsg
;

221 
	sSDL_SysWMEvít
 {

222 
Uöt8
 
ty≥
;

223 
SDL_SysWMmsg
 *
msg
;

224 } 
	tSDL_SysWMEvít
;

227 
	uSDL_Evít
 {

228 
Uöt8
 
ty≥
;

229 
SDL_A˘iveEvít
 
a˘ive
;

230 
SDL_KeybﬂrdEvít
 
key
;

231 
SDL_Mou£MŸi⁄Evít
 
mŸi⁄
;

232 
SDL_Mou£Buâ⁄Evít
 
buâ⁄
;

233 
SDL_JoyAxisEvít
 
jaxis
;

234 
SDL_JoyBÆlEvít
 
jbÆl
;

235 
SDL_JoyH©Evít
 
jh©
;

236 
SDL_JoyBuâ⁄Evít
 
jbuâ⁄
;

237 
SDL_ResizeEvít
 
ªsize
;

238 
SDL_Expo£Evít
 
expo£
;

239 
SDL_QuôEvít
 
quô
;

240 
SDL_U£rEvít
 
u£r
;

241 
SDL_SysWMEvít
 
syswm
;

242 } 
	tSDL_Evít
;

251 
DECLSPEC
 
SDLCALL
 
SDL_PumpEvíts
();

254 
	gSDL_ADDEVENT
,

255 
	gSDL_PEEKEVENT
,

256 
	gSDL_GETEVENT


257 } 
	tSDL_evíè˘i⁄
;

277 
DECLSPEC
 
SDLCALL
 
SDL_PìpEvíts
(
SDL_Evít
 *
evíts
, 
numevíts
,

278 
SDL_evíè˘i⁄
 
a˘i⁄
, 
Uöt32
 
mask
);

284 
DECLSPEC
 
SDLCALL
 
SDL_PﬁlEvít
(
SDL_Evít
 *
evít
);

290 
DECLSPEC
 
SDLCALL
 
SDL_WaôEvít
(
SDL_Evít
 *
evít
);

296 
DECLSPEC
 
SDLCALL
 
SDL_PushEvít
(
SDL_Evít
 *
evít
);

300 (
SDLCALL
 *
	tSDL_EvítFûãr
)(c⁄° 
	tSDL_Evít
 *
	tevít
);

323 
DECLSPEC
 
SDLCALL
 
SDL_SëEvítFûãr
(
SDL_EvítFûãr
 
fûãr
);

329 
DECLSPEC
 
SDL_EvítFûãr
 
SDLCALL
 
SDL_GëEvítFûãr
();

334 
	#SDL_QUERY
 -1

	)

335 
	#SDL_IGNORE
 0

	)

336 
	#SDL_DISABLE
 0

	)

337 
	#SDL_ENABLE
 1

	)

348 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_EvítSèã
(Uöt8 
ty≥
, 
°©e
);

351 #ifde‡
__˝lu•lus


354 
	~"˛o£_code.h
"

	@SDL_framerate.h

10 #i‚de‡
_SDL_‰amî©e_h


11 
	#_SDL_‰amî©e_h


	)

14 #ifde‡
__˝lu•lus


20 
	~"SDL.h
"

27 
	#FPS_UPPER_LIMIT
 200

	)

32 
	#FPS_LOWER_LIMIT
 1

	)

37 
	#FPS_DEFAULT
 30

	)

43 
Uöt32
 
‰amecou¡
;

44 
øãticks
;

45 
Uöt32
 
œ°ticks
;

46 
Uöt32
 
øã
;

47 } 
	tFPSm™agî
;

51 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

52 #i‡
deföed
(
DLL_EXPORT
Ë&& !deföed(
LIBSDL_GFX_DLL_IMPORT
)

53 
	#SDL_FRAMERATE_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ifde‡
LIBSDL_GFX_DLL_IMPORT


56 
	#SDL_FRAMERATE_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 #i‚de‡
SDL_FRAMERATE_SCOPE


61 
	#SDL_FRAMERATE_SCOPE
 

	)

66 
SDL_FRAMERATE_SCOPE
 
SDL_öôFømî©e
(
FPSm™agî
 * 
m™agî
);

67 
SDL_FRAMERATE_SCOPE
 
SDL_£tFømî©e
(
FPSm™agî
 * 
m™agî
, 
øã
);

68 
SDL_FRAMERATE_SCOPE
 
SDL_gëFømî©e
(
FPSm™agî
 * 
m™agî
);

69 
SDL_FRAMERATE_SCOPE
 
SDL_gëFømecou¡
(
FPSm™agî
 * 
m™agî
);

70 
SDL_FRAMERATE_SCOPE
 
SDL_‰amî©eDñay
(
FPSm™agî
 * 
m™agî
);

75 #ifde‡
__˝lu•lus


	@SDL_getenv.h

28 
	~"SDL_°döc.h
"

	@SDL_gfxBlitFunc.h

9 #i‚de‡
_SDL_gfxBlôFunc_h


10 
	#_SDL_gfxBlôFunc_h


	)

13 #ifde‡
__˝lu•lus


17 
	~<°dio.h
>

18 
	~<°dlib.h
>

20 
	~<SDL.h
>

21 
	~<SDL_video.h
>

25 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

26 #i‡
deföed
(
DLL_EXPORT
Ë&& !deföed(
LIBSDL_GFX_DLL_IMPORT
)

27 
	#SDL_GFXBLITFUNC_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

29 #ifde‡
LIBSDL_GFX_DLL_IMPORT


30 
	#SDL_GFXBLITFUNC_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

34 #i‚de‡
SDL_GFXBLITFUNC_SCOPE


35 
	#SDL_GFXBLITFUNC_SCOPE
 

	)

39 
SDL_GFXBLITFUNC_SCOPE
 
SDL_gfxBlôRGBA
(
SDL_SurÁ˚
 * 
§c
, 
SDL_Re˘
 * 
§¸e˘
, SDL_SurÁ˚ * 
d°
, SDL_Re˘ * 
d°ª˘
);

41 
SDL_GFXBLITFUNC_SCOPE
 
SDL_gfxSëAÕha
(
SDL_SurÁ˚
 * 
§c
, 
Uöt8
 
a
);

43 
SDL_GFXBLITFUNC_SCOPE
 
SDL_gfxMu…ùlyAÕha
(
SDL_SurÁ˚
 * 
§c
, 
Uöt8
 
a
);

54 
Uöt8
 *
	gs_pixñs
;

55 
	gs_width
;

56 
	gs_height
;

57 
	gs_skù
;

58 
Uöt8
 *
	gd_pixñs
;

59 
	gd_width
;

60 
	gd_height
;

61 
	gd_skù
;

62 *
	gaux_d©a
;

63 
SDL_PixñF‹m©
 *
	g§c
;

64 
Uöt8
 *
	gèbÀ
;

65 
SDL_PixñF‹m©
 *
	gd°
;

66 } 
	tSDL_gfxBlôInfo
;

71 
	#GFX_RGBA_FROM_PIXEL
(
pixñ
, 
fmt
, 
r
, 
g
, 
b
, 
a
) \

73 
r
 = ((
pixñ
&
fmt
->
Rmask
)>>fmt->
Rshi·
)<<fmt->
Rloss
; \

74 
g
 = ((
pixñ
&
fmt
->
Gmask
)>>fmt->
Gshi·
)<<fmt->
Gloss
; \

75 
b
 = ((
pixñ
&
fmt
->
Bmask
)>>fmt->
Bshi·
)<<fmt->
Bloss
; \

76 
a
 = ((
pixñ
&
fmt
->
Amask
)>>fmt->
Ashi·
)<<fmt->
Aloss
; \

77 }

	)

82 
	#GFX_DISEMBLE_RGBA
(
buf
, 
bµ
, 
fmt
, 
pixñ
, 
r
, 
g
, 
b
, 
a
) \

84 
pixñ
 = *((
Uöt32
 *)(
buf
)); \

85 
	`GFX_RGBA_FROM_PIXEL
(
pixñ
, 
fmt
, 
r
, 
g
, 
b
, 
a
); \

86 
pixñ
 &~
fmt
->
Amask
; \

87 } 0)

	)

92 
	#GFX_PIXEL_FROM_RGBA
(
pixñ
, 
fmt
, 
r
, 
g
, 
b
, 
a
) \

94 
pixñ
 = ((
r
>>
fmt
->
Rloss
)<<fmt->
Rshi·
)| \

95 ((
g
>>
fmt
->
Gloss
)<<fmt->
Gshi·
)| \

96 ((
b
>>
fmt
->
Bloss
)<<fmt->
Bshi·
)| \

97 ((
a
<<
fmt
->
Aloss
)<<fmt->
Ashi·
); \

98 }

	)

103 
	#GFX_ASSEMBLE_RGBA
(
buf
, 
bµ
, 
fmt
, 
r
, 
g
, 
b
, 
a
) \

105 
Uöt32
 
pixñ
; \

107 
	`GFX_PIXEL_FROM_RGBA
(
pixñ
, 
fmt
, 
r
, 
g
, 
b
, 
a
); \

108 *((
Uöt32
 *)(
buf
)Ë
pixñ
; \

109 }

	)

114 
	#GFX_ALPHA_BLEND
(
sR
, 
sG
, 
sB
, 
A
, 
dR
, 
dG
, 
dB
) \

116 
dR
 = (((
sR
-dR)*(
A
))/255)+dR; \

117 
dG
 = (((
sG
-dG)*(
A
))/255)+dG; \

118 
dB
 = (((
sB
-dB)*(
A
))/255)+dB; \

119 } 0)

	)

126 
	#GFX_DUFFS_LOOP4
(
pixñ_c›y_ö¸emít
, 
width
) \

127 { 
n
 = (
width
+3)/4; \

128 
width
 & 3) { \

129 0: dÿ{ 
pixñ_c›y_ö¸emít
; \

130 3: 
pixñ_c›y_ö¸emít
; \

131 2: 
pixñ_c›y_ö¸emít
; \

132 1: 
pixñ_c›y_ö¸emít
; \

133 }  --
n
 > 0 ); \

135 }

	)

140 #ifde‡
__˝lu•lus


	@SDL_gfxPrimitives.h

9 #i‚de‡
_SDL_gfxPrimôives_h


10 
	#_SDL_gfxPrimôives_h


	)

12 
	~<m©h.h
>

13 #i‚de‡
M_PI


14 
	#M_PI
 3.1415926535897932384626433832795

	)

17 
	~"SDL.h
"

20 #ifde‡
__˝lu•lus


26 
	#SDL_GFXPRIMITIVES_MAJOR
 2

	)

27 
	#SDL_GFXPRIMITIVES_MINOR
 0

	)

28 
	#SDL_GFXPRIMITIVES_MICRO
 22

	)

33 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

34 #i‡
deföed
(
DLL_EXPORT
Ë&& !deföed(
LIBSDL_GFX_DLL_IMPORT
)

35 
	#SDL_GFXPRIMITIVES_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

37 #ifde‡
LIBSDL_GFX_DLL_IMPORT


38 
	#SDL_GFXPRIMITIVES_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

42 #i‚de‡
SDL_GFXPRIMITIVES_SCOPE


43 
	#SDL_GFXPRIMITIVES_SCOPE
 

	)

50 
SDL_GFXPRIMITIVES_SCOPE
 
pixñCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, 
Uöt32
 
cﬁ‹
);

51 
SDL_GFXPRIMITIVES_SCOPE
 
pixñRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

55 
SDL_GFXPRIMITIVES_SCOPE
 
hlöeCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
x2
, Söt16 
y
, 
Uöt32
 
cﬁ‹
);

56 
SDL_GFXPRIMITIVES_SCOPE
 
hlöeRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
x2
, Söt16 
y
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

60 
SDL_GFXPRIMITIVES_SCOPE
 
vlöeCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y1
, Söt16 
y2
, 
Uöt32
 
cﬁ‹
);

61 
SDL_GFXPRIMITIVES_SCOPE
 
vlöeRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y1
, Söt16 
y2
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

65 
SDL_GFXPRIMITIVES_SCOPE
 
ª˘™gÀCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, 
Uöt32
 
cﬁ‹
);

66 
SDL_GFXPRIMITIVES_SCOPE
 
ª˘™gÀRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
,

67 
Söt16
 
x2
, Söt16 
y2
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

71 
SDL_GFXPRIMITIVES_SCOPE
 
roundedRe˘™gÀCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
ød
, 
Uöt32
 
cﬁ‹
);

72 
SDL_GFXPRIMITIVES_SCOPE
 
roundedRe˘™gÀRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
,

73 
Söt16
 
x2
, Söt16 
y2
, Söt16 
ød
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

77 
SDL_GFXPRIMITIVES_SCOPE
 
boxCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, 
Uöt32
 
cﬁ‹
);

78 
SDL_GFXPRIMITIVES_SCOPE
 
boxRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
,

79 
Söt16
 
y2
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

83 
SDL_GFXPRIMITIVES_SCOPE
 
roundedBoxCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
ød
, 
Uöt32
 
cﬁ‹
);

84 
SDL_GFXPRIMITIVES_SCOPE
 
roundedBoxRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
,

85 
Söt16
 
y2
, Söt16 
ød
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

89 
SDL_GFXPRIMITIVES_SCOPE
 
löeCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, 
Uöt32
 
cﬁ‹
);

90 
SDL_GFXPRIMITIVES_SCOPE
 
löeRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
,

91 
Söt16
 
x2
, Söt16 
y2
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

95 
SDL_GFXPRIMITIVES_SCOPE
 
ØlöeCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, 
Uöt32
 
cﬁ‹
);

96 
SDL_GFXPRIMITIVES_SCOPE
 
ØlöeRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
,

97 
Söt16
 
x2
, Söt16 
y2
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

100 
SDL_GFXPRIMITIVES_SCOPE
 
thickLöeCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
,

101 
Uöt8
 
width
, 
Uöt32
 
cﬁ‹
);

102 
SDL_GFXPRIMITIVES_SCOPE
 
thickLöeRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
,

103 
Uöt8
 
width
, Uöt8 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

107 
SDL_GFXPRIMITIVES_SCOPE
 
cú˛eCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
, 
Uöt32
 
cﬁ‹
);

108 
SDL_GFXPRIMITIVES_SCOPE
 
cú˛eRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

112 
SDL_GFXPRIMITIVES_SCOPE
 
¨cCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
, Söt16 
°¨t
, Söt16 
íd
, 
Uöt32
 
cﬁ‹
);

113 
SDL_GFXPRIMITIVES_SCOPE
 
¨cRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
, Söt16 
°¨t
, Söt16 
íd
,

114 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

118 
SDL_GFXPRIMITIVES_SCOPE
 
Øcú˛eCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
, 
Uöt32
 
cﬁ‹
);

119 
SDL_GFXPRIMITIVES_SCOPE
 
Øcú˛eRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
,

120 
Söt16
 
ød
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

124 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdCú˛eCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
r
, 
Uöt32
 
cﬁ‹
);

125 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdCú˛eRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
,

126 
Söt16
 
ød
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

130 
SDL_GFXPRIMITIVES_SCOPE
 
ñlù£Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
rx
, Söt16 
ry
, 
Uöt32
 
cﬁ‹
);

131 
SDL_GFXPRIMITIVES_SCOPE
 
ñlù£RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
,

132 
Söt16
 
rx
, Söt16 
ry
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

136 
SDL_GFXPRIMITIVES_SCOPE
 
Øñlù£Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
rx
, Söt16 
ry
, 
Uöt32
 
cﬁ‹
);

137 
SDL_GFXPRIMITIVES_SCOPE
 
Øñlù£RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
,

138 
Söt16
 
rx
, Söt16 
ry
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

142 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdEŒù£Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
rx
, Söt16 
ry
, 
Uöt32
 
cﬁ‹
);

143 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdEŒù£RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
,

144 
Söt16
 
rx
, Söt16 
ry
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

148 
SDL_GFXPRIMITIVES_SCOPE
 
põCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
,

149 
Söt16
 
°¨t
, Söt16 
íd
, 
Uöt32
 
cﬁ‹
);

150 
SDL_GFXPRIMITIVES_SCOPE
 
põRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
,

151 
Söt16
 
°¨t
, Söt16 
íd
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

155 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPõCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
,

156 
Söt16
 
°¨t
, Söt16 
íd
, 
Uöt32
 
cﬁ‹
);

157 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPõRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, Söt16 
ød
,

158 
Söt16
 
°¨t
, Söt16 
íd
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

162 
SDL_GFXPRIMITIVES_SCOPE
 
åig⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
, 
Uöt32
 
cﬁ‹
);

163 
SDL_GFXPRIMITIVES_SCOPE
 
åig⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
,

164 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

168 
SDL_GFXPRIMITIVES_SCOPE
 
Øåig⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
, 
Uöt32
 
cﬁ‹
);

169 
SDL_GFXPRIMITIVES_SCOPE
 
Øåig⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
,

170 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

174 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdTrig⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
, 
Uöt32
 
cﬁ‹
);

175 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdTrig⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x1
, Söt16 
y1
, Söt16 
x2
, Söt16 
y2
, Söt16 
x3
, Söt16 
y3
,

176 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

180 
SDL_GFXPRIMITIVES_SCOPE
 
pﬁyg⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, 
Uöt32
 
cﬁ‹
);

181 
SDL_GFXPRIMITIVES_SCOPE
 
pﬁyg⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
,

182 
n
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

186 
SDL_GFXPRIMITIVES_SCOPE
 
Øpﬁyg⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, 
Uöt32
 
cﬁ‹
);

187 
SDL_GFXPRIMITIVES_SCOPE
 
Øpﬁyg⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
,

188 
n
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

192 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPﬁyg⁄Cﬁ‹
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, 
Uöt32
 
cﬁ‹
);

193 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPﬁyg⁄RGBA
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
,

194 c⁄° 
Söt16
 * 
vy
, 
n
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

195 
SDL_GFXPRIMITIVES_SCOPE
 
ãxtuªdPﬁyg⁄
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, SDL_SurÁ˚ * 
ãxtuª
,
ãxtuª_dx
,
ãxtuª_dy
);

199 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPﬁyg⁄Cﬁ‹MT
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, 
Uöt32
 
cﬁ‹
, **
pﬁyI¡s
, *
pﬁyAŒoˇãd
);

200 
SDL_GFXPRIMITIVES_SCOPE
 
fûÀdPﬁyg⁄RGBAMT
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
,

201 c⁄° 
Söt16
 * 
vy
, 
n
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
,

202 **
pﬁyI¡s
, *
pﬁyAŒoˇãd
);

203 
SDL_GFXPRIMITIVES_SCOPE
 
ãxtuªdPﬁyg⁄MT
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, SDL_SurÁ˚ * 
ãxtuª
,
ãxtuª_dx
,
ãxtuª_dy
, **
pﬁyI¡s
, *
pﬁyAŒoˇãd
);

207 
SDL_GFXPRIMITIVES_SCOPE
 
bezõrCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
, 
n
, 
s
, 
Uöt32
 
cﬁ‹
);

208 
SDL_GFXPRIMITIVES_SCOPE
 
bezõrRGBA
(
SDL_SurÁ˚
 * 
d°
, c⁄° 
Söt16
 * 
vx
, c⁄° Söt16 * 
vy
,

209 
n
, 
s
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

213 
SDL_GFXPRIMITIVES_SCOPE
 
gfxPrimôivesSëF⁄t
(c⁄° *
f⁄td©a
, 
Uöt32
 
cw
, Uöt32 
ch
);

214 
SDL_GFXPRIMITIVES_SCOPE
 
gfxPrimôivesSëF⁄tRŸ©i⁄
(
Uöt32
 
rŸ©i⁄
);

215 
SDL_GFXPRIMITIVES_SCOPE
 
ch¨a˘îCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, 
c
, 
Uöt32
 
cﬁ‹
);

216 
SDL_GFXPRIMITIVES_SCOPE
 
ch¨a˘îRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, 
c
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

217 
SDL_GFXPRIMITIVES_SCOPE
 
°rögCﬁ‹
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, c⁄° *
s
, 
Uöt32
 
cﬁ‹
);

218 
SDL_GFXPRIMITIVES_SCOPE
 
°rögRGBA
(
SDL_SurÁ˚
 * 
d°
, 
Söt16
 
x
, Söt16 
y
, c⁄° *
s
, 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
, Uöt8 
a
);

221 #ifde‡
__˝lu•lus


	@SDL_gfxPrimitives_font.h

6 
	#GFX_FONTDATAMAX
 (8*256)

	)

8 
	ggfxPrimôivesF⁄td©a
[
GFX_FONTDATAMAX
] = {

	@SDL_image.h

24 #i‚de‡
_SDL_IMAGE_H


25 
	#_SDL_IMAGE_H


	)

27 
	~"SDL.h
"

28 
	~"SDL_vîsi⁄.h
"

29 
	~"begö_code.h
"

32 #ifde‡
__˝lu•lus


38 
	#SDL_IMAGE_MAJOR_VERSION
 1

	)

39 
	#SDL_IMAGE_MINOR_VERSION
 2

	)

40 
	#SDL_IMAGE_PATCHLEVEL
 12

	)

45 
	#SDL_IMAGE_VERSION
(
X
) \

47 (
X
)->
maj‹
 = 
SDL_IMAGE_MAJOR_VERSION
; \

48 (
X
)->
mö‹
 = 
SDL_IMAGE_MINOR_VERSION
; \

49 (
X
)->
∑tch
 = 
SDL_IMAGE_PATCHLEVEL
; \

50 }

	)

56 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
IMG_Löked_Vîsi⁄
();

60 
	gIMG_INIT_JPG
 = 0x00000001,

61 
	gIMG_INIT_PNG
 = 0x00000002,

62 
	gIMG_INIT_TIF
 = 0x00000004,

63 
	gIMG_INIT_WEBP
 = 0x00000008

64 } 
	tIMG_InôFœgs
;

70 
DECLSPEC
 
SDLCALL
 
IMG_Inô
(
Êags
);

73 
DECLSPEC
 
SDLCALL
 
IMG_Quô
();

83 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTy≥d_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, *
ty≥
);

85 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd
(c⁄° *
fûe
);

86 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

91 
DECLSPEC
 
SDLCALL
 
IMG_InvîtAÕha
(
⁄
);

94 
DECLSPEC
 
SDLCALL
 
IMG_isICO
(
SDL_RW›s
 *
§c
);

95 
DECLSPEC
 
SDLCALL
 
IMG_isCUR
(
SDL_RW›s
 *
§c
);

96 
DECLSPEC
 
SDLCALL
 
IMG_isBMP
(
SDL_RW›s
 *
§c
);

97 
DECLSPEC
 
SDLCALL
 
IMG_isGIF
(
SDL_RW›s
 *
§c
);

98 
DECLSPEC
 
SDLCALL
 
IMG_isJPG
(
SDL_RW›s
 *
§c
);

99 
DECLSPEC
 
SDLCALL
 
IMG_isLBM
(
SDL_RW›s
 *
§c
);

100 
DECLSPEC
 
SDLCALL
 
IMG_isPCX
(
SDL_RW›s
 *
§c
);

101 
DECLSPEC
 
SDLCALL
 
IMG_isPNG
(
SDL_RW›s
 *
§c
);

102 
DECLSPEC
 
SDLCALL
 
IMG_isPNM
(
SDL_RW›s
 *
§c
);

103 
DECLSPEC
 
SDLCALL
 
IMG_isTIF
(
SDL_RW›s
 *
§c
);

104 
DECLSPEC
 
SDLCALL
 
IMG_isXCF
(
SDL_RW›s
 *
§c
);

105 
DECLSPEC
 
SDLCALL
 
IMG_isXPM
(
SDL_RW›s
 *
§c
);

106 
DECLSPEC
 
SDLCALL
 
IMG_isXV
(
SDL_RW›s
 *
§c
);

107 
DECLSPEC
 
SDLCALL
 
IMG_isWEBP
(
SDL_RW›s
 *
§c
);

110 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdICO_RW
(
SDL_RW›s
 *
§c
);

111 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdCUR_RW
(
SDL_RW›s
 *
§c
);

112 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
);

113 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdGIF_RW
(
SDL_RW›s
 *
§c
);

114 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdJPG_RW
(
SDL_RW›s
 *
§c
);

115 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdLBM_RW
(
SDL_RW›s
 *
§c
);

116 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPCX_RW
(
SDL_RW›s
 *
§c
);

117 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNG_RW
(
SDL_RW›s
 *
§c
);

118 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNM_RW
(
SDL_RW›s
 *
§c
);

119 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTGA_RW
(
SDL_RW›s
 *
§c
);

120 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTIF_RW
(
SDL_RW›s
 *
§c
);

121 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXCF_RW
(
SDL_RW›s
 *
§c
);

122 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXPM_RW
(
SDL_RW›s
 *
§c
);

123 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXV_RW
(
SDL_RW›s
 *
§c
);

124 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdWEBP_RW
(
SDL_RW›s
 *
§c
);

126 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_RódXPMFromAºay
(**
xpm
);

129 
	#IMG_SëEº‹
 
SDL_SëEº‹


	)

130 
	#IMG_GëEº‹
 
SDL_GëEº‹


	)

133 #ifde‡
__˝lu•lus


136 
	~"˛o£_code.h
"

	@SDL_imageFilter.h

10 #i‚de‡
_SDL_imageFûãr_h


11 
	#_SDL_imageFûãr_h


	)

14 #ifde‡
__˝lu•lus


20 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

21 #i‡
deföed
(
DLL_EXPORT
Ë&& !deföed(
LIBSDL_GFX_DLL_IMPORT
)

22 
	#SDL_IMAGEFILTER_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

24 #ifde‡
LIBSDL_GFX_DLL_IMPORT


25 
	#SDL_IMAGEFILTER_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

29 #i‚de‡
SDL_IMAGEFILTER_SCOPE


30 
	#SDL_IMAGEFILTER_SCOPE
 

	)

39 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMMXdëe˘
();

42 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMMXoff
();

43 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMMX⁄
();

52 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAdd
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

55 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMón
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

58 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrSub
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

61 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAbsDiff
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

64 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMu…
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

67 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMu…N‹
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

70 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMu…Divby2
(*
Src1
, *
Src2
, *
De°
,

71 
Àngth
);

74 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMu…Divby4
(*
Src1
, *
Src2
, *
De°
,

75 
Àngth
);

78 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrBôAnd
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

81 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrBôOr
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

84 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrDiv
(*
Src1
, *
Src2
, *
De°
, 
Àngth
);

87 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrBôNeg©i⁄
(*
Src1
, *
De°
, 
Àngth
);

90 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAddByã
(*
Src1
, *
De°
, 
Àngth
, 
C
);

93 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAddUöt
(*
Src1
, *
De°
, 
Àngth
, 
C
);

96 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAddByãToHÆf
(*
Src1
, *
De°
, 
Àngth
,

97 
C
);

100 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrSubByã
(*
Src1
, *
De°
, 
Àngth
, 
C
);

103 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrSubUöt
(*
Src1
, *
De°
, 
Àngth
, 
C
);

106 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·Right
(*
Src1
, *
De°
, 
Àngth
, 
N
);

109 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·RightUöt
(*
Src1
, *
De°
, 
Àngth
, 
N
);

112 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrMu…ByByã
(*
Src1
, *
De°
, 
Àngth
, 
C
);

115 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·RightAndMu…ByByã
(*
Src1
, *
De°
, 
Àngth
,

116 
N
, 
C
);

119 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·Le·Byã
(*
Src1
, *
De°
, 
Àngth
,

120 
N
);

123 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·Le·Uöt
(*
Src1
, *
De°
, 
Àngth
,

124 
N
);

127 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrShi·Le·
(*
Src1
, *
De°
, 
Àngth
, 
N
);

130 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrBö¨izeUsögThªshﬁd
(*
Src1
, *
De°
, 
Àngth
,

131 
T
);

134 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrClùToR™ge
(*
Src1
, *
De°
, 
Àngth
,

135 
Tmö
, 
Tmax
);

138 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrN‹mÆizeLöór
(*
Src
, *
De°
, 
Àngth
, 
Cmö
,

139 
Cmax
, 
Nmö
, 
Nmax
);

144 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l3x3Divide
(*
Src
, *
De°
, 
rows
,

145 
cﬁumns
, sig√d *
Kî√l
, 
Divis‹
);

148 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l5x5Divide
(*
Src
, *
De°
, 
rows
,

149 
cﬁumns
, sig√d *
Kî√l
, 
Divis‹
);

152 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l7x7Divide
(*
Src
, *
De°
, 
rows
,

153 
cﬁumns
, sig√d *
Kî√l
, 
Divis‹
);

156 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l9x9Divide
(*
Src
, *
De°
, 
rows
,

157 
cﬁumns
, sig√d *
Kî√l
, 
Divis‹
);

160 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l3x3Shi·Right
(*
Src
, *
De°
, 
rows
,

161 
cﬁumns
, sig√d *
Kî√l
,

162 
NRightShi·
);

165 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l5x5Shi·Right
(*
Src
, *
De°
, 
rows
,

166 
cﬁumns
, sig√d *
Kî√l
,

167 
NRightShi·
);

170 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l7x7Shi·Right
(*
Src
, *
De°
, 
rows
,

171 
cﬁumns
, sig√d *
Kî√l
,

172 
NRightShi·
);

175 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrC⁄vﬁveKî√l9x9Shi·Right
(*
Src
, *
De°
, 
rows
,

176 
cﬁumns
, sig√d *
Kî√l
,

177 
NRightShi·
);

180 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrSobñX
(*
Src
, *
De°
, 
rows
, 
cﬁumns
);

183 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrSobñXShi·Right
(*
Src
, *
De°
, 
rows
, 
cﬁumns
,

184 
NRightShi·
);

187 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrAlignSèck
();

188 
SDL_IMAGEFILTER_SCOPE
 
SDL_imageFûãrRe°‹eSèck
();

191 #ifde‡
__˝lu•lus


	@SDL_joystick.h

27 #i‚de‡
_SDL_joy°ick_h


28 
	#_SDL_joy°ick_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


46 
_SDL_Joy°ick
;

47 
_SDL_Joy°ick
 
	tSDL_Joy°ick
;

53 
DECLSPEC
 
SDLCALL
 
SDL_NumJoy°icks
();

61 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_Joy°ickName
(
devi˚_ödex
);

73 
DECLSPEC
 
SDL_Joy°ick
 * 
SDLCALL
 
SDL_Joy°ickO≥n
(
devi˚_ödex
);

78 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickO≥√d
(
devi˚_ödex
);

83 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickIndex
(
SDL_Joy°ick
 *
joy°ick
);

88 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumAxes
(
SDL_Joy°ick
 *
joy°ick
);

96 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBÆls
(
SDL_Joy°ick
 *
joy°ick
);

101 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumH©s
(
SDL_Joy°ick
 *
joy°ick
);

106 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBuâ⁄s
(
SDL_Joy°ick
 *
joy°ick
);

114 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickUpd©e
();

125 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickEvítSèã
(
°©e
);

134 
DECLSPEC
 
Söt16
 
SDLCALL
 
SDL_Joy°ickGëAxis
(
SDL_Joy°ick
 *
joy°ick
, 
axis
);

141 
	#SDL_HAT_CENTERED
 0x00

	)

142 
	#SDL_HAT_UP
 0x01

	)

143 
	#SDL_HAT_RIGHT
 0x02

	)

144 
	#SDL_HAT_DOWN
 0x04

	)

145 
	#SDL_HAT_LEFT
 0x08

	)

146 
	#SDL_HAT_RIGHTUP
 (
SDL_HAT_RIGHT
|
SDL_HAT_UP
)

	)

147 
	#SDL_HAT_RIGHTDOWN
 (
SDL_HAT_RIGHT
|
SDL_HAT_DOWN
)

	)

148 
	#SDL_HAT_LEFTUP
 (
SDL_HAT_LEFT
|
SDL_HAT_UP
)

	)

149 
	#SDL_HAT_LEFTDOWN
 (
SDL_HAT_LEFT
|
SDL_HAT_DOWN
)

	)

157 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëH©
(
SDL_Joy°ick
 *
joy°ick
, 
h©
);

166 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëBÆl
(
SDL_Joy°ick
 *
joy°ick
, 
bÆl
, *
dx
, *
dy
);

173 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëBuâ⁄
(
SDL_Joy°ick
 *
joy°ick
, 
buâ⁄
);

178 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickClo£
(
SDL_Joy°ick
 *
joy°ick
);

182 #ifde‡
__˝lu•lus


185 
	~"˛o£_code.h
"

	@SDL_keyboard.h

27 #i‚de‡
_SDL_keybﬂrd_h


28 
	#_SDL_keybﬂrd_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_keysym.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


59 
	sSDL_keysym
 {

60 
Uöt8
 
sˇncode
;

61 
SDLKey
 
sym
;

62 
SDLMod
 
mod
;

63 
Uöt16
 
unicode
;

64 } 
	tSDL_keysym
;

67 
	#SDL_ALL_HOTKEYS
 0xFFFFFFFF

	)

82 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀUNICODE
(
íabÀ
);

84 
	#SDL_DEFAULT_REPEAT_DELAY
 500

	)

85 
	#SDL_DEFAULT_REPEAT_INTERVAL
 30

	)

98 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀKeyRïót
(
dñay
, 
öãrvÆ
);

99 
DECLSPEC
 
SDLCALL
 
SDL_GëKeyRïót
(*
dñay
, *
öãrvÆ
);

110 
DECLSPEC
 
Uöt8
 * 
SDLCALL
 
SDL_GëKeySèã
(*
numkeys
);

115 
DECLSPEC
 
SDLMod
 
SDLCALL
 
SDL_GëModSèã
();

121 
DECLSPEC
 
SDLCALL
 
SDL_SëModSèã
(
SDLMod
 
mod°©e
);

126 
DECLSPEC
 * 
SDLCALL
 
SDL_GëKeyName
(
SDLKey
 
key
);

130 #ifde‡
__˝lu•lus


133 
	~"˛o£_code.h
"

	@SDL_keysym.h

23 #i‚de‡
_SDL_keysym_h


24 
	#_SDL_keysym_h


	)

36 
	mSDLK_UNKNOWN
 = 0,

37 
	mSDLK_FIRST
 = 0,

38 
	mSDLK_BACKSPACE
 = 8,

39 
	mSDLK_TAB
 = 9,

40 
	mSDLK_CLEAR
 = 12,

41 
	mSDLK_RETURN
 = 13,

42 
	mSDLK_PAUSE
 = 19,

43 
	mSDLK_ESCAPE
 = 27,

44 
	mSDLK_SPACE
 = 32,

45 
	mSDLK_EXCLAIM
 = 33,

46 
	mSDLK_QUOTEDBL
 = 34,

47 
	mSDLK_HASH
 = 35,

48 
	mSDLK_DOLLAR
 = 36,

49 
	mSDLK_AMPERSAND
 = 38,

50 
	mSDLK_QUOTE
 = 39,

51 
	mSDLK_LEFTPAREN
 = 40,

52 
	mSDLK_RIGHTPAREN
 = 41,

53 
	mSDLK_ASTERISK
 = 42,

54 
	mSDLK_PLUS
 = 43,

55 
	mSDLK_COMMA
 = 44,

56 
	mSDLK_MINUS
 = 45,

57 
	mSDLK_PERIOD
 = 46,

58 
	mSDLK_SLASH
 = 47,

59 
	mSDLK_0
 = 48,

60 
	mSDLK_1
 = 49,

61 
	mSDLK_2
 = 50,

62 
	mSDLK_3
 = 51,

63 
	mSDLK_4
 = 52,

64 
	mSDLK_5
 = 53,

65 
	mSDLK_6
 = 54,

66 
	mSDLK_7
 = 55,

67 
	mSDLK_8
 = 56,

68 
	mSDLK_9
 = 57,

69 
	mSDLK_COLON
 = 58,

70 
	mSDLK_SEMICOLON
 = 59,

71 
	mSDLK_LESS
 = 60,

72 
	mSDLK_EQUALS
 = 61,

73 
	mSDLK_GREATER
 = 62,

74 
	mSDLK_QUESTION
 = 63,

75 
	mSDLK_AT
 = 64,

79 
	mSDLK_LEFTBRACKET
 = 91,

80 
	mSDLK_BACKSLASH
 = 92,

81 
	mSDLK_RIGHTBRACKET
 = 93,

82 
	mSDLK_CARET
 = 94,

83 
	mSDLK_UNDERSCORE
 = 95,

84 
	mSDLK_BACKQUOTE
 = 96,

85 
	mSDLK_a
 = 97,

86 
	mSDLK_b
 = 98,

87 
	mSDLK_c
 = 99,

88 
	mSDLK_d
 = 100,

89 
	mSDLK_e
 = 101,

90 
	mSDLK_f
 = 102,

91 
	mSDLK_g
 = 103,

92 
	mSDLK_h
 = 104,

93 
	mSDLK_i
 = 105,

94 
	mSDLK_j
 = 106,

95 
	mSDLK_k
 = 107,

96 
	mSDLK_l
 = 108,

97 
	mSDLK_m
 = 109,

98 
	mSDLK_n
 = 110,

99 
	mSDLK_o
 = 111,

100 
	mSDLK_p
 = 112,

101 
	mSDLK_q
 = 113,

102 
	mSDLK_r
 = 114,

103 
	mSDLK_s
 = 115,

104 
	mSDLK_t
 = 116,

105 
	mSDLK_u
 = 117,

106 
	mSDLK_v
 = 118,

107 
	mSDLK_w
 = 119,

108 
	mSDLK_x
 = 120,

109 
	mSDLK_y
 = 121,

110 
	mSDLK_z
 = 122,

111 
	mSDLK_DELETE
 = 127,

117 
	mSDLK_WORLD_0
 = 160,

118 
	mSDLK_WORLD_1
 = 161,

119 
	mSDLK_WORLD_2
 = 162,

120 
	mSDLK_WORLD_3
 = 163,

121 
	mSDLK_WORLD_4
 = 164,

122 
	mSDLK_WORLD_5
 = 165,

123 
	mSDLK_WORLD_6
 = 166,

124 
	mSDLK_WORLD_7
 = 167,

125 
	mSDLK_WORLD_8
 = 168,

126 
	mSDLK_WORLD_9
 = 169,

127 
	mSDLK_WORLD_10
 = 170,

128 
	mSDLK_WORLD_11
 = 171,

129 
	mSDLK_WORLD_12
 = 172,

130 
	mSDLK_WORLD_13
 = 173,

131 
	mSDLK_WORLD_14
 = 174,

132 
	mSDLK_WORLD_15
 = 175,

133 
	mSDLK_WORLD_16
 = 176,

134 
	mSDLK_WORLD_17
 = 177,

135 
	mSDLK_WORLD_18
 = 178,

136 
	mSDLK_WORLD_19
 = 179,

137 
	mSDLK_WORLD_20
 = 180,

138 
	mSDLK_WORLD_21
 = 181,

139 
	mSDLK_WORLD_22
 = 182,

140 
	mSDLK_WORLD_23
 = 183,

141 
	mSDLK_WORLD_24
 = 184,

142 
	mSDLK_WORLD_25
 = 185,

143 
	mSDLK_WORLD_26
 = 186,

144 
	mSDLK_WORLD_27
 = 187,

145 
	mSDLK_WORLD_28
 = 188,

146 
	mSDLK_WORLD_29
 = 189,

147 
	mSDLK_WORLD_30
 = 190,

148 
	mSDLK_WORLD_31
 = 191,

149 
	mSDLK_WORLD_32
 = 192,

150 
	mSDLK_WORLD_33
 = 193,

151 
	mSDLK_WORLD_34
 = 194,

152 
	mSDLK_WORLD_35
 = 195,

153 
	mSDLK_WORLD_36
 = 196,

154 
	mSDLK_WORLD_37
 = 197,

155 
	mSDLK_WORLD_38
 = 198,

156 
	mSDLK_WORLD_39
 = 199,

157 
	mSDLK_WORLD_40
 = 200,

158 
	mSDLK_WORLD_41
 = 201,

159 
	mSDLK_WORLD_42
 = 202,

160 
	mSDLK_WORLD_43
 = 203,

161 
	mSDLK_WORLD_44
 = 204,

162 
	mSDLK_WORLD_45
 = 205,

163 
	mSDLK_WORLD_46
 = 206,

164 
	mSDLK_WORLD_47
 = 207,

165 
	mSDLK_WORLD_48
 = 208,

166 
	mSDLK_WORLD_49
 = 209,

167 
	mSDLK_WORLD_50
 = 210,

168 
	mSDLK_WORLD_51
 = 211,

169 
	mSDLK_WORLD_52
 = 212,

170 
	mSDLK_WORLD_53
 = 213,

171 
	mSDLK_WORLD_54
 = 214,

172 
	mSDLK_WORLD_55
 = 215,

173 
	mSDLK_WORLD_56
 = 216,

174 
	mSDLK_WORLD_57
 = 217,

175 
	mSDLK_WORLD_58
 = 218,

176 
	mSDLK_WORLD_59
 = 219,

177 
	mSDLK_WORLD_60
 = 220,

178 
	mSDLK_WORLD_61
 = 221,

179 
	mSDLK_WORLD_62
 = 222,

180 
	mSDLK_WORLD_63
 = 223,

181 
	mSDLK_WORLD_64
 = 224,

182 
	mSDLK_WORLD_65
 = 225,

183 
	mSDLK_WORLD_66
 = 226,

184 
	mSDLK_WORLD_67
 = 227,

185 
	mSDLK_WORLD_68
 = 228,

186 
	mSDLK_WORLD_69
 = 229,

187 
	mSDLK_WORLD_70
 = 230,

188 
	mSDLK_WORLD_71
 = 231,

189 
	mSDLK_WORLD_72
 = 232,

190 
	mSDLK_WORLD_73
 = 233,

191 
	mSDLK_WORLD_74
 = 234,

192 
	mSDLK_WORLD_75
 = 235,

193 
	mSDLK_WORLD_76
 = 236,

194 
	mSDLK_WORLD_77
 = 237,

195 
	mSDLK_WORLD_78
 = 238,

196 
	mSDLK_WORLD_79
 = 239,

197 
	mSDLK_WORLD_80
 = 240,

198 
	mSDLK_WORLD_81
 = 241,

199 
	mSDLK_WORLD_82
 = 242,

200 
	mSDLK_WORLD_83
 = 243,

201 
	mSDLK_WORLD_84
 = 244,

202 
	mSDLK_WORLD_85
 = 245,

203 
	mSDLK_WORLD_86
 = 246,

204 
	mSDLK_WORLD_87
 = 247,

205 
	mSDLK_WORLD_88
 = 248,

206 
	mSDLK_WORLD_89
 = 249,

207 
	mSDLK_WORLD_90
 = 250,

208 
	mSDLK_WORLD_91
 = 251,

209 
	mSDLK_WORLD_92
 = 252,

210 
	mSDLK_WORLD_93
 = 253,

211 
	mSDLK_WORLD_94
 = 254,

212 
	mSDLK_WORLD_95
 = 255,

217 
	mSDLK_KP0
 = 256,

218 
	mSDLK_KP1
 = 257,

219 
	mSDLK_KP2
 = 258,

220 
	mSDLK_KP3
 = 259,

221 
	mSDLK_KP4
 = 260,

222 
	mSDLK_KP5
 = 261,

223 
	mSDLK_KP6
 = 262,

224 
	mSDLK_KP7
 = 263,

225 
	mSDLK_KP8
 = 264,

226 
	mSDLK_KP9
 = 265,

227 
	mSDLK_KP_PERIOD
 = 266,

228 
	mSDLK_KP_DIVIDE
 = 267,

229 
	mSDLK_KP_MULTIPLY
 = 268,

230 
	mSDLK_KP_MINUS
 = 269,

231 
	mSDLK_KP_PLUS
 = 270,

232 
	mSDLK_KP_ENTER
 = 271,

233 
	mSDLK_KP_EQUALS
 = 272,

238 
	mSDLK_UP
 = 273,

239 
	mSDLK_DOWN
 = 274,

240 
	mSDLK_RIGHT
 = 275,

241 
	mSDLK_LEFT
 = 276,

242 
	mSDLK_INSERT
 = 277,

243 
	mSDLK_HOME
 = 278,

244 
	mSDLK_END
 = 279,

245 
	mSDLK_PAGEUP
 = 280,

246 
	mSDLK_PAGEDOWN
 = 281,

251 
	mSDLK_F1
 = 282,

252 
	mSDLK_F2
 = 283,

253 
	mSDLK_F3
 = 284,

254 
	mSDLK_F4
 = 285,

255 
	mSDLK_F5
 = 286,

256 
	mSDLK_F6
 = 287,

257 
	mSDLK_F7
 = 288,

258 
	mSDLK_F8
 = 289,

259 
	mSDLK_F9
 = 290,

260 
	mSDLK_F10
 = 291,

261 
	mSDLK_F11
 = 292,

262 
	mSDLK_F12
 = 293,

263 
	mSDLK_F13
 = 294,

264 
	mSDLK_F14
 = 295,

265 
	mSDLK_F15
 = 296,

270 
	mSDLK_NUMLOCK
 = 300,

271 
	mSDLK_CAPSLOCK
 = 301,

272 
	mSDLK_SCROLLOCK
 = 302,

273 
	mSDLK_RSHIFT
 = 303,

274 
	mSDLK_LSHIFT
 = 304,

275 
	mSDLK_RCTRL
 = 305,

276 
	mSDLK_LCTRL
 = 306,

277 
	mSDLK_RALT
 = 307,

278 
	mSDLK_LALT
 = 308,

279 
	mSDLK_RMETA
 = 309,

280 
	mSDLK_LMETA
 = 310,

281 
	mSDLK_LSUPER
 = 311,

282 
	mSDLK_RSUPER
 = 312,

283 
	mSDLK_MODE
 = 313,

284 
	mSDLK_COMPOSE
 = 314,

289 
	mSDLK_HELP
 = 315,

290 
	mSDLK_PRINT
 = 316,

291 
	mSDLK_SYSREQ
 = 317,

292 
	mSDLK_BREAK
 = 318,

293 
	mSDLK_MENU
 = 319,

294 
	mSDLK_POWER
 = 320,

295 
	mSDLK_EURO
 = 321,

296 
	mSDLK_UNDO
 = 322,

301 
	mSDLK_LAST


302 } 
	tSDLKey
;

306 
	mKMOD_NONE
 = 0x0000,

307 
	mKMOD_LSHIFT
= 0x0001,

308 
	mKMOD_RSHIFT
= 0x0002,

309 
	mKMOD_LCTRL
 = 0x0040,

310 
	mKMOD_RCTRL
 = 0x0080,

311 
	mKMOD_LALT
 = 0x0100,

312 
	mKMOD_RALT
 = 0x0200,

313 
	mKMOD_LMETA
 = 0x0400,

314 
	mKMOD_RMETA
 = 0x0800,

315 
	mKMOD_NUM
 = 0x1000,

316 
	mKMOD_CAPS
 = 0x2000,

317 
	mKMOD_MODE
 = 0x4000,

318 
	mKMOD_RESERVED
 = 0x8000

319 } 
	tSDLMod
;

321 
	#KMOD_CTRL
 (
KMOD_LCTRL
|
KMOD_RCTRL
)

	)

322 
	#KMOD_SHIFT
 (
KMOD_LSHIFT
|
KMOD_RSHIFT
)

	)

323 
	#KMOD_ALT
 (
KMOD_LALT
|
KMOD_RALT
)

	)

324 
	#KMOD_META
 (
KMOD_LMETA
|
KMOD_RMETA
)

	)

	@SDL_loadso.h

43 #i‚de‡
_SDL_lﬂdso_h


44 
	#_SDL_lﬂdso_h


	)

46 
	~"SDL_°döc.h
"

47 
	~"SDL_îr‹.h
"

49 
	~"begö_code.h
"

51 #ifde‡
__˝lu•lus


60 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdObje˘
(c⁄° *
sofûe
);

67 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdFun˘i⁄
(*
h™dÀ
, c⁄° *
«me
);

70 
DECLSPEC
 
SDLCALL
 
SDL_U∆ﬂdObje˘
(*
h™dÀ
);

73 #ifde‡
__˝lu•lus


76 
	~"˛o£_code.h
"

	@SDL_main.h

23 #i‚de‡
_SDL_maö_h


24 
	#_SDL_maö_h


	)

26 
	~"SDL_°döc.h
"

32 #i‡
deföed
(
__WIN32__
) || \

33 (
deföed
(
__MWERKS__
Ë&& !deföed(
__BEOS__
)) || \

34 
deföed
(
__MACOS__
Ë|| deföed(
__MACOSX__
) || \

35 
deföed
(
__SYMBIAN32__
Ë|| 
	$deföed
(
QWS
)

37 #ifde‡
__˝lu•lus


38 
	#C_LINKAGE
 "C"

	)

40 
	#C_LINKAGE


	)

54 
	#maö
 
SDL_maö


	)

57 
C_LINKAGE
 
	`SDL_maö
(
¨gc
, *
¨gv
[]);

62 #ifde‡
__WIN32__


64 
	~"begö_code.h
"

65 #ifde‡
__˝lu•lus


70 
DECLSPEC
 
SDLCALL
 
	`SDL_SëModuÀH™dÀ
(*
hIn°
);

72 
DECLSPEC
 
SDLCALL
 
	`SDL_Regi°îAµ
(*
«me
, 
Uöt32
 
°yÀ
, *
hIn°
);

74 
DECLSPEC
 
SDLCALL
 
	`SDL_Uƒegi°îAµ
();

75 #ifde‡
__˝lu•lus


76 
	}
}

78 
	~"˛o£_code.h
"

84 #i‡
deföed
(
__MACOS__
)

86 
	~"begö_code.h
"

87 #ifde‡
__˝lu•lus


92 
QDGlobÆs
;

95 
DECLSPEC
 
SDLCALL
 
SDL_InôQuickDøw
(
QDGlobÆs
 *
the_qd
);

97 #ifde‡
__˝lu•lus


100 
	~"˛o£_code.h
"

	@SDL_mixer.h

24 #i‚de‡
_SDL_MIXER_H


25 
	#_SDL_MIXER_H


	)

27 
	~"SDL_ty≥s.h
"

28 
	~"SDL_rw›s.h
"

29 
	~"SDL_audio.h
"

30 
	~"SDL_ídün.h
"

31 
	~"SDL_vîsi⁄.h
"

32 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


41 
	#SDL_MIXER_MAJOR_VERSION
 1

	)

42 
	#SDL_MIXER_MINOR_VERSION
 2

	)

43 
	#SDL_MIXER_PATCHLEVEL
 12

	)

48 
	#SDL_MIXER_VERSION
(
X
) \

50 (
X
)->
maj‹
 = 
SDL_MIXER_MAJOR_VERSION
; \

51 (
X
)->
mö‹
 = 
SDL_MIXER_MINOR_VERSION
; \

52 (
X
)->
∑tch
 = 
SDL_MIXER_PATCHLEVEL
; \

53 }

	)

56 
	#MIX_MAJOR_VERSION
 
SDL_MIXER_MAJOR_VERSION


	)

57 
	#MIX_MINOR_VERSION
 
SDL_MIXER_MINOR_VERSION


	)

58 
	#MIX_PATCHLEVEL
 
SDL_MIXER_PATCHLEVEL


	)

59 
	#MIX_VERSION
(
X
Ë
	`SDL_MIXER_VERSION
(X)

	)

65 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
Mix_Löked_Vîsi⁄
();

69 
	gMIX_INIT_FLAC
 = 0x00000001,

70 
	gMIX_INIT_MOD
 = 0x00000002,

71 
	gMIX_INIT_MP3
 = 0x00000004,

72 
	gMIX_INIT_OGG
 = 0x00000008,

73 
	gMIX_INIT_FLUIDSYNTH
 = 0x00000010

74 } 
	tMIX_InôFœgs
;

80 
DECLSPEC
 
SDLCALL
 
Mix_Inô
(
Êags
);

83 
DECLSPEC
 
SDLCALL
 
Mix_Quô
();

87 #i‚de‡
MIX_CHANNELS


88 
	#MIX_CHANNELS
 8

	)

92 
	#MIX_DEFAULT_FREQUENCY
 22050

	)

93 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


94 
	#MIX_DEFAULT_FORMAT
 
AUDIO_S16LSB


	)

96 
	#MIX_DEFAULT_FORMAT
 
AUDIO_S16MSB


	)

98 
	#MIX_DEFAULT_CHANNELS
 2

	)

99 
	#MIX_MAX_VOLUME
 128

	)

102 
	sMix_Chunk
 {

103 
	gÆloˇãd
;

104 
Uöt8
 *
	gabuf
;

105 
Uöt32
 
	gÆí
;

106 
Uöt8
 
	gvﬁume
;

107 } 
	tMix_Chunk
;

111 
	gMIX_NO_FADING
,

112 
	gMIX_FADING_OUT
,

113 
	gMIX_FADING_IN


114 } 
	tMix_Fadög
;

117 
	gMUS_NONE
,

118 
	gMUS_CMD
,

119 
	gMUS_WAV
,

120 
	gMUS_MOD
,

121 
	gMUS_MID
,

122 
	gMUS_OGG
,

123 
	gMUS_MP3
,

124 
	gMUS_MP3_MAD
,

125 
	gMUS_FLAC
,

126 
	gMUS_MODPLUG


127 } 
	tMix_MusicTy≥
;

130 
_Mix_Music
 
	tMix_Music
;

133 
DECLSPEC
 
SDLCALL
 
Mix_O≥nAudio
(
‰equícy
, 
Uöt16
 
f‹m©
, 
ch™√ls
,

134 
chunksize
);

141 
DECLSPEC
 
SDLCALL
 
Mix_AŒoˇãCh™√ls
(
numch™s
);

146 
DECLSPEC
 
SDLCALL
 
Mix_QuîyS≥c
(*
‰equícy
,
Uöt16
 *
f‹m©
,*
ch™√ls
);

149 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_LﬂdWAV_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

150 
	#Mix_LﬂdWAV
(
fûe
Ë
	`Mix_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

151 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUS
(c⁄° *
fûe
);

155 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUS_RW
(
SDL_RW›s
 *
rw
);

158 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUSTy≥_RW
(
SDL_RW›s
 *
rw
, 
Mix_MusicTy≥
 
ty≥
, 
‰ì§c
);

161 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_QuickLﬂd_WAV
(
Uöt8
 *
mem
);

164 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_QuickLﬂd_RAW
(
Uöt8
 *
mem
, 
Uöt32
 
Àn
);

167 
DECLSPEC
 
SDLCALL
 
Mix_FªeChunk
(
Mix_Chunk
 *
chunk
);

168 
DECLSPEC
 
SDLCALL
 
Mix_FªeMusic
(
Mix_Music
 *
music
);

189 
DECLSPEC
 
SDLCALL
 
Mix_GëNumChunkDecodîs
();

190 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëChunkDecodî
(
ödex
);

191 
DECLSPEC
 
SDLCALL
 
Mix_GëNumMusicDecodîs
();

192 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëMusicDecodî
(
ödex
);

197 
DECLSPEC
 
Mix_MusicTy≥
 
SDLCALL
 
Mix_GëMusicTy≥
(c⁄° 
Mix_Music
 *
music
);

203 
DECLSPEC
 
SDLCALL
 
Mix_SëPo°Mix
((*
mix_func
)

204 (*
ud©a
, 
Uöt8
 *
°ªam
, 
Àn
), *
¨g
);

209 
DECLSPEC
 
SDLCALL
 
Mix_HookMusic
((*
mix_func
)

210 (*
ud©a
, 
Uöt8
 *
°ªam
, 
Àn
), *
¨g
);

215 
DECLSPEC
 
SDLCALL
 
Mix_HookMusicFöished
((*
music_föished
)());

218 
DECLSPEC
 * 
SDLCALL
 
Mix_GëMusicHookD©a
();

228 
DECLSPEC
 
SDLCALL
 
Mix_Ch™√lFöished
((*
ch™√l_föished
)(
ch™√l
));

233 
	#MIX_CHANNEL_POST
 -2

	)

252 (*
	gMix_Ef„˘Func_t
)(
	tch™
, *
	t°ªam
, 
	tÀn
, *
	tud©a
);

263 (*
	gMix_Ef„˘D⁄e_t
)(
	tch™
, *
	tud©a
);

312 
DECLSPEC
 
SDLCALL
 
Mix_Regi°îEf„˘
(
ch™
, 
Mix_Ef„˘Func_t
 
f
,

313 
Mix_Ef„˘D⁄e_t
 
d
, *
¨g
);

324 
DECLSPEC
 
SDLCALL
 
Mix_Uƒegi°îEf„˘
(
ch™√l
, 
Mix_Ef„˘Func_t
 
f
);

338 
DECLSPEC
 
SDLCALL
 
Mix_Uƒegi°îAŒEf„˘s
(
ch™√l
);

341 
	#MIX_EFFECTSMAXSPEED
 "MIX_EFFECTSMAXSPEED"

	)

378 
DECLSPEC
 
SDLCALL
 
Mix_SëP™nög
(
ch™√l
, 
Uöt8
 
À·
, Uöt8 
right
);

418 
DECLSPEC
 
SDLCALL
 
Mix_SëPosôi⁄
(
ch™√l
, 
Söt16
 
™gÀ
, 
Uöt8
 
di°™˚
);

448 
DECLSPEC
 
SDLCALL
 
Mix_SëDi°™˚
(
ch™√l
, 
Uöt8
 
di°™˚
);

472 
no_∑r£_DECLSPEC
 
SDLCALL
 
Mix_SëRevîb
(
ch™√l
, 
Uöt8
 
echo
);

495 
DECLSPEC
 
SDLCALL
 
Mix_SëRevî£Sãªo
(
ch™√l
, 
Êù
);

504 
DECLSPEC
 
SDLCALL
 
Mix_Re£rveCh™√ls
(
num
);

514 
DECLSPEC
 
SDLCALL
 
Mix_GroupCh™√l
(
which
, 
èg
);

516 
DECLSPEC
 
SDLCALL
 
Mix_GroupCh™√ls
(
‰om
, 
to
, 
èg
);

520 
DECLSPEC
 
SDLCALL
 
Mix_GroupAvaûabÀ
(
èg
);

524 
DECLSPEC
 
SDLCALL
 
Mix_GroupCou¡
(
èg
);

526 
DECLSPEC
 
SDLCALL
 
Mix_GroupOlde°
(
èg
);

528 
DECLSPEC
 
SDLCALL
 
Mix_GroupNewî
(
èg
);

536 
	#Mix_PœyCh™√l
(
ch™√l
,
chunk
,
lo›s
Ë
	`Mix_PœyCh™√lTimed
(ch™√l,chunk,lo›s,-1)

	)

538 
DECLSPEC
 
SDLCALL
 
Mix_PœyCh™√lTimed
(
ch™√l
, 
Mix_Chunk
 *
chunk
, 
lo›s
, 
ticks
);

539 
DECLSPEC
 
SDLCALL
 
Mix_PœyMusic
(
Mix_Music
 *
music
, 
lo›s
);

542 
DECLSPEC
 
SDLCALL
 
Mix_FadeInMusic
(
Mix_Music
 *
music
, 
lo›s
, 
ms
);

543 
DECLSPEC
 
SDLCALL
 
Mix_FadeInMusicPos
(
Mix_Music
 *
music
, 
lo›s
, 
ms
, 
posôi⁄
);

544 
	#Mix_FadeInCh™√l
(
ch™√l
,
chunk
,
lo›s
,
ms
Ë
	`Mix_FadeInCh™√lTimed
(ch™√l,chunk,lo›s,ms,-1)

	)

545 
DECLSPEC
 
SDLCALL
 
Mix_FadeInCh™√lTimed
(
ch™√l
, 
Mix_Chunk
 *
chunk
, 
lo›s
, 
ms
, 
ticks
);

552 
DECLSPEC
 
SDLCALL
 
Mix_Vﬁume
(
ch™√l
, 
vﬁume
);

553 
DECLSPEC
 
SDLCALL
 
Mix_VﬁumeChunk
(
Mix_Chunk
 *
chunk
, 
vﬁume
);

554 
DECLSPEC
 
SDLCALL
 
Mix_VﬁumeMusic
(
vﬁume
);

557 
DECLSPEC
 
SDLCALL
 
Mix_HÆtCh™√l
(
ch™√l
);

558 
DECLSPEC
 
SDLCALL
 
Mix_HÆtGroup
(
èg
);

559 
DECLSPEC
 
SDLCALL
 
Mix_HÆtMusic
();

565 
DECLSPEC
 
SDLCALL
 
Mix_ExpúeCh™√l
(
ch™√l
, 
ticks
);

571 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutCh™√l
(
which
, 
ms
);

572 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutGroup
(
èg
, 
ms
);

573 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutMusic
(
ms
);

576 
DECLSPEC
 
Mix_Fadög
 
SDLCALL
 
Mix_FadögMusic
();

577 
DECLSPEC
 
Mix_Fadög
 
SDLCALL
 
Mix_FadögCh™√l
(
which
);

580 
DECLSPEC
 
SDLCALL
 
Mix_Pau£
(
ch™√l
);

581 
DECLSPEC
 
SDLCALL
 
Mix_Resume
(
ch™√l
);

582 
DECLSPEC
 
SDLCALL
 
Mix_Pau£d
(
ch™√l
);

585 
DECLSPEC
 
SDLCALL
 
Mix_Pau£Music
();

586 
DECLSPEC
 
SDLCALL
 
Mix_ResumeMusic
();

587 
DECLSPEC
 
SDLCALL
 
Mix_RewödMusic
();

588 
DECLSPEC
 
SDLCALL
 
Mix_Pau£dMusic
();

596 
DECLSPEC
 
SDLCALL
 
Mix_SëMusicPosôi⁄
(
posôi⁄
);

601 
DECLSPEC
 
SDLCALL
 
Mix_Pœyög
(
ch™√l
);

602 
DECLSPEC
 
SDLCALL
 
Mix_PœyögMusic
();

605 
DECLSPEC
 
SDLCALL
 
Mix_SëMusicCMD
(c⁄° *
comm™d
);

608 
DECLSPEC
 
SDLCALL
 
Mix_SëSynchroVÆue
(
vÆue
);

609 
DECLSPEC
 
SDLCALL
 
Mix_GëSynchroVÆue
();

612 
DECLSPEC
 
SDLCALL
 
Mix_SëSoundF⁄ts
(c⁄° *
∑ths
);

613 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëSoundF⁄ts
();

614 
DECLSPEC
 
SDLCALL
 
Mix_EachSoundF⁄t
((*
fun˘i⁄
)(c⁄° *, *), *
d©a
);

619 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_GëChunk
(
ch™√l
);

622 
DECLSPEC
 
SDLCALL
 
Mix_Clo£Audio
();

625 
	#Mix_SëEº‹
 
SDL_SëEº‹


	)

626 
	#Mix_GëEº‹
 
SDL_GëEº‹


	)

629 #ifde‡
__˝lu•lus


632 
	~"˛o£_code.h
"

	@SDL_mouse.h

27 #i‚de‡
_SDL_mou£_h


28 
	#_SDL_mou£_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_video.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


40 
WMcurs‹
 
	tWMcurs‹
;

41 
	sSDL_Curs‹
 {

42 
SDL_Re˘
 
¨ó
;

43 
Söt16
 
hŸ_x
, 
hŸ_y
;

44 
Uöt8
 *
d©a
;

45 
Uöt8
 *
mask
;

46 
Uöt8
 *
ßve
[2];

47 
WMcurs‹
 *
wm_curs‹
;

48 } 
	tSDL_Curs‹
;

57 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëMou£Sèã
(*
x
, *
y
);

65 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëRñ©iveMou£Sèã
(*
x
, *
y
);

70 
DECLSPEC
 
SDLCALL
 
SDL_W¨pMou£
(
Uöt16
 
x
, Uöt16 
y
);

85 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_Cª©eCurs‹


86 (
Uöt8
 *
d©a
, Uöt8 *
mask
, 
w
, 
h
, 
hŸ_x
, 
hŸ_y
);

93 
DECLSPEC
 
SDLCALL
 
SDL_SëCurs‹
(
SDL_Curs‹
 *
curs‹
);

98 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_GëCurs‹
();

103 
DECLSPEC
 
SDLCALL
 
SDL_FªeCurs‹
(
SDL_Curs‹
 *
curs‹
);

112 
DECLSPEC
 
SDLCALL
 
SDL_ShowCurs‹
(
toggÀ
);

122 
	#SDL_BUTTON
(
X
Ë(1 << ((X)-1))

	)

123 
	#SDL_BUTTON_LEFT
 1

	)

124 
	#SDL_BUTTON_MIDDLE
 2

	)

125 
	#SDL_BUTTON_RIGHT
 3

	)

126 
	#SDL_BUTTON_WHEELUP
 4

	)

127 
	#SDL_BUTTON_WHEELDOWN
 5

	)

128 
	#SDL_BUTTON_X1
 6

	)

129 
	#SDL_BUTTON_X2
 7

	)

130 
	#SDL_BUTTON_LMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_LEFT
)

	)

131 
	#SDL_BUTTON_MMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_MIDDLE
)

	)

132 
	#SDL_BUTTON_RMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_RIGHT
)

	)

133 
	#SDL_BUTTON_X1MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X1
)

	)

134 
	#SDL_BUTTON_X2MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X2
)

	)

138 #ifde‡
__˝lu•lus


141 
	~"˛o£_code.h
"

	@SDL_mutex.h

23 #i‚de‡
_SDL_muãx_h


24 
	#_SDL_muãx_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


44 
	#SDL_MUTEX_TIMEDOUT
 1

	)

47 
	#SDL_MUTEX_MAXWAIT
 (~(
Uöt32
)0)

	)

55 
SDL_muãx
;

56 
SDL_muãx
 
	tSDL_muãx
;

59 
DECLSPEC
 
SDL_muãx
 * 
SDLCALL
 
SDL_Cª©eMuãx
();

61 
	#SDL_LockMuãx
(
m
Ë
	`SDL_muãxP
(m)

	)

65 
DECLSPEC
 
SDLCALL
 
SDL_muãxP
(
SDL_muãx
 *
muãx
);

67 
	#SDL_U∆ockMuãx
(
m
Ë
	`SDL_muãxV
(m)

	)

74 
DECLSPEC
 
SDLCALL
 
SDL_muãxV
(
SDL_muãx
 *
muãx
);

77 
DECLSPEC
 
SDLCALL
 
SDL_De°royMuãx
(
SDL_muãx
 *
muãx
);

86 
	gSDL_£m≠h‹e
;

87 
SDL_£m≠h‹e
 
	tSDL_£m
;

90 
DECLSPEC
 
SDL_£m
 * 
SDLCALL
 
SDL_Cª©eSem≠h‹e
(
Uöt32
 
öôül_vÆue
);

93 
DECLSPEC
 
SDLCALL
 
SDL_De°roySem≠h‹e
(
SDL_£m
 *
£m
);

100 
DECLSPEC
 
SDLCALL
 
SDL_SemWaô
(
SDL_£m
 *
£m
);

106 
DECLSPEC
 
SDLCALL
 
SDL_SemTryWaô
(
SDL_£m
 *
£m
);

115 
DECLSPEC
 
SDLCALL
 
SDL_SemWaôTimeout
(
SDL_£m
 *
£m
, 
Uöt32
 
ms
);

120 
DECLSPEC
 
SDLCALL
 
SDL_SemPo°
(
SDL_£m
 *
£m
);

123 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_SemVÆue
(
SDL_£m
 *
£m
);

133 
	gSDL_c⁄d
;

134 
SDL_c⁄d
 
	tSDL_c⁄d
;

138 
DECLSPEC
 
SDL_c⁄d
 * 
SDLCALL
 
SDL_Cª©eC⁄d
();

141 
DECLSPEC
 
SDLCALL
 
SDL_De°royC⁄d
(
SDL_c⁄d
 *
c⁄d
);

146 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dSig«l
(
SDL_c⁄d
 *
c⁄d
);

151 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dBrﬂdˇ°
(
SDL_c⁄d
 *
c⁄d
);

158 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaô
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
mut
);

166 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaôTimeout
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
muãx
, 
Uöt32
 
ms
);

171 #ifde‡
__˝lu•lus


174 
	~"˛o£_code.h
"

	@SDL_name.h

2 #i‚de‡
_SDL«me_h_


3 
	#_SDL«me_h_


	)

5 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

6 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

9 
	#SDL_NAME
(
X
Ë
SDL_
##
	)
X

	@SDL_net.h

24 #i‚de‡
_SDL_NET_H


25 
	#_SDL_NET_H


	)

27 
	~"SDL.h
"

28 
	~"SDL_ídün.h
"

29 
	~"SDL_vîsi⁄.h
"

30 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


41 
	#SDL_NET_MAJOR_VERSION
 1

	)

42 
	#SDL_NET_MINOR_VERSION
 2

	)

43 
	#SDL_NET_PATCHLEVEL
 8

	)

48 
	#SDL_NET_VERSION
(
X
) \

50 (
X
)->
maj‹
 = 
SDL_NET_MAJOR_VERSION
; \

51 (
X
)->
mö‹
 = 
SDL_NET_MINOR_VERSION
; \

52 (
X
)->
∑tch
 = 
SDL_NET_PATCHLEVEL
; \

53 }

	)

59 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
SDLNë_Löked_Vîsi⁄
();

65 
DECLSPEC
 
SDLCALL
 
SDLNë_Inô
();

66 
DECLSPEC
 
SDLCALL
 
SDLNë_Quô
();

73 
Uöt32
 
	gho°
;

74 
Uöt16
 
	gp‹t
;

75 } 
	tIPaddªss
;

83 #i‚de‡
INADDR_ANY


84 
	#INADDR_ANY
 0x00000000

	)

86 #i‚de‡
INADDR_NONE


87 
	#INADDR_NONE
 0xFFFFFFFF

	)

89 #i‚de‡
INADDR_LOOPBACK


90 
	#INADDR_LOOPBACK
 0x7f000001

	)

92 #i‚de‡
INADDR_BROADCAST


93 
	#INADDR_BROADCAST
 0xFFFFFFFF

	)

95 
DECLSPEC
 
SDLCALL
 
SDLNë_ResﬁveHo°
(
IPaddªss
 *
addªss
, c⁄° *
ho°
, 
Uöt16
 
p‹t
);

102 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDLNë_ResﬁveIP
(c⁄° 
IPaddªss
 *
ù
);

107 
DECLSPEC
 
SDLCALL
 
SDLNë_GëLoˇlAddªs£s
(
IPaddªss
 *
addªs£s
, 
maxcou¡
);

113 
_TCPsockë
 *
	tTCPsockë
;

123 
DECLSPEC
 
TCPsockë
 
SDLCALL
 
SDLNë_TCP_O≥n
(
IPaddªss
 *
ù
);

128 
DECLSPEC
 
TCPsockë
 
SDLCALL
 
SDLNë_TCP_Ac˚±
(TCPsockë 
£rvî
);

133 
DECLSPEC
 
IPaddªss
 * 
SDLCALL
 
SDLNë_TCP_GëPìrAddªss
(
TCPsockë
 
sock
);

140 
DECLSPEC
 
SDLCALL
 
SDLNë_TCP_Síd
(
TCPsockë
 
sock
, c⁄° *
d©a
,

141 
Àn
);

149 
DECLSPEC
 
SDLCALL
 
SDLNë_TCP_Recv
(
TCPsockë
 
sock
, *
d©a
, 
maxÀn
);

152 
DECLSPEC
 
SDLCALL
 
SDLNë_TCP_Clo£
(
TCPsockë
 
sock
);

160 
	#SDLNET_MAX_UDPCHANNELS
 32

	)

162 
	#SDLNET_MAX_UDPADDRESSES
 4

	)

164 
_UDPsockë
 *
	tUDPsockë
;

166 
	gch™√l
;

167 
Uöt8
 *
	gd©a
;

168 
	gÀn
;

169 
	gmaxÀn
;

170 
	g°©us
;

171 
IPaddªss
 
	gaddªss
;

172 } 
	tUDP∑ckë
;

177 
DECLSPEC
 
UDP∑ckë
 * 
SDLCALL
 
SDLNë_AŒocPackë
(
size
);

178 
DECLSPEC
 
SDLCALL
 
SDLNë_ResizePackë
(
UDP∑ckë
 *
∑ckë
, 
√wsize
);

179 
DECLSPEC
 
SDLCALL
 
SDLNë_FªePackë
(
UDP∑ckë
 *
∑ckë
);

186 
DECLSPEC
 
UDP∑ckë
 ** 
SDLCALL
 
SDLNë_AŒocPackëV
(
howm™y
, 
size
);

187 
DECLSPEC
 
SDLCALL
 
SDLNë_FªePackëV
(
UDP∑ckë
 **
∑ckëV
);

196 
DECLSPEC
 
UDPsockë
 
SDLCALL
 
SDLNë_UDP_O≥n
(
Uöt16
 
p‹t
);

200 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_SëPackëLoss
(
UDPsockë
 
sock
, 
≥r˚¡
);

211 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_Böd
(
UDPsockë
 
sock
, 
ch™√l
, c⁄° 
IPaddªss
 *
addªss
);

214 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_Unböd
(
UDPsockë
 
sock
, 
ch™√l
);

222 
DECLSPEC
 
IPaddªss
 * 
SDLCALL
 
SDLNë_UDP_GëPìrAddªss
(
UDPsockë
 
sock
, 
ch™√l
);

231 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_SídV
(
UDPsockë
 
sock
, 
UDP∑ckë
 **
∑ckës
, 
≈ackës
);

245 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_Síd
(
UDPsockë
 
sock
, 
ch™√l
, 
UDP∑ckë
 *
∑ckë
);

257 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_RecvV
(
UDPsockë
 
sock
, 
UDP∑ckë
 **
∑ckës
);

269 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_Recv
(
UDPsockë
 
sock
, 
UDP∑ckë
 *
∑ckë
);

272 
DECLSPEC
 
SDLCALL
 
SDLNë_UDP_Clo£
(
UDPsockë
 
sock
);

279 
_SDLNë_SockëSë
 *
	tSDLNë_SockëSë
;

282 
	s_SDLNë_GíîicSockë
 {

283 
	gªady
;

284 } *
	tSDLNë_GíîicSockë
;

290 
DECLSPEC
 
SDLNë_SockëSë
 
SDLCALL
 
SDLNë_AŒocSockëSë
(
maxsockës
);

293 
	#SDLNë_TCP_AddSockë
(
£t
, 
sock
) \

294 
	`SDLNë_AddSockë
(
£t
, 
	`SDL_ªöãΩªt_ˇ°
(
SDLNë_GíîicSockë
, 
sock
))

	)

295 
	#SDLNë_UDP_AddSockë
(
£t
, 
sock
) \

296 
	`SDLNë_AddSockë
(
£t
, 
	`SDL_ªöãΩªt_ˇ°
(
SDLNë_GíîicSockë
, 
sock
))

	)

297 
DECLSPEC
 
SDLCALL
 
SDLNë_AddSockë
(
SDLNë_SockëSë
 
£t
, 
SDLNë_GíîicSockë
 
sock
);

300 
	#SDLNë_TCP_DñSockë
(
£t
, 
sock
) \

301 
	`SDLNë_DñSockë
(
£t
, 
	`SDL_ªöãΩªt_ˇ°
(
SDLNë_GíîicSockë
, 
sock
))

	)

302 
	#SDLNë_UDP_DñSockë
(
£t
, 
sock
) \

303 
	`SDLNë_DñSockë
(
£t
, 
	`SDL_ªöãΩªt_ˇ°
(
SDLNë_GíîicSockë
, 
sock
))

	)

304 
DECLSPEC
 
SDLCALL
 
SDLNë_DñSockë
(
SDLNë_SockëSë
 
£t
, 
SDLNë_GíîicSockë
 
sock
);

313 
DECLSPEC
 
SDLCALL
 
SDLNë_CheckSockës
(
SDLNë_SockëSë
 
£t
, 
Uöt32
 
timeout
);

319 
	#SDLNë_SockëRódy
(
sock
) \

320 ((
sock
 !
NULL
Ë&& 
	`SDL_ªöãΩªt_ˇ°
(
SDLNë_GíîicSockë
, sock)->
ªady
)

	)

323 
DECLSPEC
 
SDLCALL
 
SDLNë_FªeSockëSë
(
SDLNë_SockëSë
 
£t
);

331 
DECLSPEC
 
SDLCALL
 
SDLNë_Wrôe16
(
Uöt16
 
vÆue
, *
¨ó
);

332 
DECLSPEC
 
SDLCALL
 
SDLNë_Wrôe32
(
Uöt32
 
vÆue
, *
¨ó
);

335 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDLNë_Ród16
(*
¨ó
);

336 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDLNë_Ród32
(*
¨ó
);

343 
	#SDLNë_SëEº‹
 
SDL_SëEº‹


	)

344 
	#SDLNë_GëEº‹
 
SDL_GëEº‹


	)

357 #i‡
deföed
(
•¨c
Ë|| deföed(
mùs
)

358 
	#SDL_DATA_ALIGNED
 1

	)

360 #i‚de‡
SDL_DATA_ALIGNED


361 
	#SDL_DATA_ALIGNED
 0

	)

365 #i‡!
SDL_DATA_ALIGNED


366 
	#SDLNë_Wrôe16
(
vÆue
, 
¨óp
) \

367 (*
	`SDL_ªöãΩªt_ˇ°
(
Uöt16
 *, 
¨óp
Ë
	`SDL_Sw≠BE16
(
vÆue
))

	)

369 #i‡
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN


370 
	#SDLNë_Wrôe16
(
vÆue
, 
¨óp
) \

373 
Uöt8
 *
¨ó
 = 
	`SDL_ªöãΩªt_ˇ°
(Uöt8 *, 
¨óp
); \

374 
¨ó
[0] = (
vÆue
 >> 8) & 0xFF; \

375 
¨ó
[1] = 
vÆue
 & 0xFF; \

376 }  0 )

	)

378 
	#SDLNë_Wrôe16
(
vÆue
, 
¨óp
) \

381 
Uöt8
 *
¨ó
 = 
	`SDL_ªöãΩªt_ˇ°
(Uöt8 *, 
¨óp
); \

382 
¨ó
[1] = (
vÆue
 >> 8) & 0xFF; \

383 
¨ó
[0] = 
vÆue
 & 0xFF; \

384 }  0 )

	)

389 #i‡!
SDL_DATA_ALIGNED


390 
	#SDLNë_Wrôe32
(
vÆue
, 
¨óp
) \

391 *
	`SDL_ªöãΩªt_ˇ°
(
Uöt32
 *, 
¨óp
Ë
	`SDL_Sw≠BE32
(
vÆue
);

	)

393 #i‡
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN


394 
	#SDLNë_Wrôe32
(
vÆue
, 
¨óp
) \

397 
Uöt8
 *
¨ó
 = 
	`SDL_ªöãΩªt_ˇ°
(Uöt8 *, 
¨óp
); \

398 
¨ó
[0] = (
vÆue
 >> 24) & 0xFF; \

399 
¨ó
[1] = (
vÆue
 >> 16) & 0xFF; \

400 
¨ó
[2] = (
vÆue
 >> 8) & 0xFF; \

401 
¨ó
[3] = 
vÆue
 & 0xFF; \

402 }  0 )

	)

404 
	#SDLNë_Wrôe32
(
vÆue
, 
¨óp
) \

407 
Uöt8
 *
¨ó
 = 
	`SDL_ªöãΩªt_ˇ°
(Uöt8 *, 
¨óp
); \

408 
¨ó
[3] = (
vÆue
 >> 24) & 0xFF; \

409 
¨ó
[2] = (
vÆue
 >> 16) & 0xFF; \

410 
¨ó
[1] = (
vÆue
 >> 8) & 0xFF; \

411 
¨ó
[0] = 
vÆue
 & 0xFF; \

412 }  0 )

	)

417 #i‡!
SDL_DATA_ALIGNED


418 
	#SDLNë_Ród16
(
¨óp
) \

419 (
	`SDL_Sw≠BE16
(*
	`SDL_ªöãΩªt_ˇ°
(
Uöt16
 *, 
¨óp
)))

	)

421 #i‡
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN


422 
	#SDLNë_Ród16
(
¨óp
) \

423 (((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[0] << 8Ë| (SDL_ªöãΩªt_ˇ°(Uöt8 *,áª≠))[1] << 0)

	)

425 
	#SDLNë_Ród16
(
¨óp
) \

426 (((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[1] << 8Ë| (SDL_ªöãΩªt_ˇ°(Uöt8 *,áª≠))[0] << 0)

	)

431 #i‡!
SDL_DATA_ALIGNED


432 
	#SDLNë_Ród32
(
¨óp
) \

433 (
	`SDL_Sw≠BE32
(*
	`SDL_ªöãΩªt_ˇ°
(
Uöt32
 *, 
¨óp
)))

	)

435 #i‡
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN


436 
	#SDLNë_Ród32
(
¨óp
) \

437 (((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[0] << 24) | ((SDL_reinterpret_cast(Uint8 *,áreap))[1] << 16) | \

438 ((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[2] << 8Ë| (SDL_ªöãΩªt_ˇ°(Uöt8 *,áª≠))[3] << 0)

	)

440 
	#SDLNë_Ród32
(
¨óp
) \

441 (((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[3] << 24) | ((SDL_reinterpret_cast(Uint8 *,áreap))[2] << 16) | \

442 ((
	`SDL_ªöãΩªt_ˇ°
(
Uöt8
 *, 
¨óp
))[1] << 8Ë| (SDL_ªöãΩªt_ˇ°(Uöt8 *,áª≠))[0] << 0)

	)

447 #ifde‡
__˝lu•lus


450 
	~"˛o£_code.h
"

	@SDL_opengl.h

27 
	~"SDL_c⁄fig.h
"

29 #ifde‡
__WIN32__


30 
	#WIN32_LEAN_AND_MEAN


	)

31 #i‚de‡
NOMINMAX


32 
	#NOMINMAX


	)

34 
	~<wödows.h
>

36 #i‚de‡
NO_SDL_GLEXT


37 
	#__gÀxt_h_


	)

39 #i‡
deföed
(
__MACOSX__
)

40 
	~<O≥nGL/gl.h
>

41 
	~<O≥nGL/glu.h
>

42 #ñi‡
deföed
(
__MACOS__
)

43 
	~<gl.h
>

44 
	~<glu.h
>

46 
	~<GL/gl.h
>

47 
	~<GL/glu.h
>

49 #i‚de‡
NO_SDL_GLEXT


50 #unde‡
__gÀxt_h_


59 #i‚de‡
NO_SDL_GLEXT


60 #i‡!
deföed
(
__gÀxt_h_
Ë&& !deföed(
GL_GLEXT_LEGACY
)

61 
	#__gÀxt_h_


	)

63 #ifde‡
__˝lu•lus


96 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

97 
	#WIN32_LEAN_AND_MEAN
 1

	)

98 
	~<wödows.h
>

101 #i‚de‡
APIENTRY


102 
	#APIENTRY


	)

104 #i‚de‡
APIENTRYP


105 
	#APIENTRYP
 
APIENTRY
 *

	)

107 #i‚de‡
GLAPI


108 
	#GLAPI
 

	)

116 
	#GL_GLEXT_VERSION
 29

	)

118 #i‚de‡
GL_VERSION_1_2


119 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

120 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

121 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

122 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

123 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

124 
	#GL_RESCALE_NORMAL
 0x803A

	)

125 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

126 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

127 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

128 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

129 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

130 
	#GL_TEXTURE_3D
 0x806F

	)

131 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

132 
	#GL_TEXTURE_DEPTH
 0x8071

	)

133 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

134 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

135 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

136 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

137 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

138 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

139 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

140 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

141 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

142 
	#GL_BGR
 0x80E0

	)

143 
	#GL_BGRA
 0x80E1

	)

144 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

145 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

146 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

147 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

148 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

149 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

150 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

151 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

152 
	#GL_SINGLE_COLOR
 0x81F9

	)

153 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

154 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

155 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

156 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

157 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

158 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

159 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

162 #i‚de‡
GL_ARB_imagög


163 
	#GL_CONSTANT_COLOR
 0x8001

	)

164 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

165 
	#GL_CONSTANT_ALPHA
 0x8003

	)

166 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

167 
	#GL_BLEND_COLOR
 0x8005

	)

168 
	#GL_FUNC_ADD
 0x8006

	)

169 
	#GL_MIN
 0x8007

	)

170 
	#GL_MAX
 0x8008

	)

171 
	#GL_BLEND_EQUATION
 0x8009

	)

172 
	#GL_FUNC_SUBTRACT
 0x800A

	)

173 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

174 
	#GL_CONVOLUTION_1D
 0x8010

	)

175 
	#GL_CONVOLUTION_2D
 0x8011

	)

176 
	#GL_SEPARABLE_2D
 0x8012

	)

177 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

178 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

179 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

180 
	#GL_REDUCE
 0x8016

	)

181 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

182 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

183 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

184 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

185 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

186 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

187 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

188 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

189 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

190 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

191 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

192 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

193 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

194 
	#GL_HISTOGRAM
 0x8024

	)

195 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

196 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

197 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

198 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

199 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

200 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

201 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

202 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

203 
	#GL_HISTOGRAM_SINK
 0x802D

	)

204 
	#GL_MINMAX
 0x802E

	)

205 
	#GL_MINMAX_FORMAT
 0x802F

	)

206 
	#GL_MINMAX_SINK
 0x8030

	)

207 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

208 
	#GL_COLOR_MATRIX
 0x80B1

	)

209 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

210 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

211 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

212 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

213 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

214 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

215 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

216 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

217 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

218 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

219 
	#GL_COLOR_TABLE
 0x80D0

	)

220 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

221 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

222 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

223 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

224 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

225 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

226 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

227 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

228 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

229 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

230 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

231 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

232 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

233 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

234 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

235 
	#GL_CONSTANT_BORDER
 0x8151

	)

236 
	#GL_REPLICATE_BORDER
 0x8153

	)

237 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

240 #i‚de‡
GL_VERSION_1_3


241 
	#GL_TEXTURE0
 0x84C0

	)

242 
	#GL_TEXTURE1
 0x84C1

	)

243 
	#GL_TEXTURE2
 0x84C2

	)

244 
	#GL_TEXTURE3
 0x84C3

	)

245 
	#GL_TEXTURE4
 0x84C4

	)

246 
	#GL_TEXTURE5
 0x84C5

	)

247 
	#GL_TEXTURE6
 0x84C6

	)

248 
	#GL_TEXTURE7
 0x84C7

	)

249 
	#GL_TEXTURE8
 0x84C8

	)

250 
	#GL_TEXTURE9
 0x84C9

	)

251 
	#GL_TEXTURE10
 0x84CA

	)

252 
	#GL_TEXTURE11
 0x84CB

	)

253 
	#GL_TEXTURE12
 0x84CC

	)

254 
	#GL_TEXTURE13
 0x84CD

	)

255 
	#GL_TEXTURE14
 0x84CE

	)

256 
	#GL_TEXTURE15
 0x84CF

	)

257 
	#GL_TEXTURE16
 0x84D0

	)

258 
	#GL_TEXTURE17
 0x84D1

	)

259 
	#GL_TEXTURE18
 0x84D2

	)

260 
	#GL_TEXTURE19
 0x84D3

	)

261 
	#GL_TEXTURE20
 0x84D4

	)

262 
	#GL_TEXTURE21
 0x84D5

	)

263 
	#GL_TEXTURE22
 0x84D6

	)

264 
	#GL_TEXTURE23
 0x84D7

	)

265 
	#GL_TEXTURE24
 0x84D8

	)

266 
	#GL_TEXTURE25
 0x84D9

	)

267 
	#GL_TEXTURE26
 0x84DA

	)

268 
	#GL_TEXTURE27
 0x84DB

	)

269 
	#GL_TEXTURE28
 0x84DC

	)

270 
	#GL_TEXTURE29
 0x84DD

	)

271 
	#GL_TEXTURE30
 0x84DE

	)

272 
	#GL_TEXTURE31
 0x84DF

	)

273 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

274 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

275 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

276 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

277 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

278 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

279 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

280 
	#GL_MULTISAMPLE
 0x809D

	)

281 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

282 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

283 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

284 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

285 
	#GL_SAMPLES
 0x80A9

	)

286 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

287 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

288 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

289 
	#GL_NORMAL_MAP
 0x8511

	)

290 
	#GL_REFLECTION_MAP
 0x8512

	)

291 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

292 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

293 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

294 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

295 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

296 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

297 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

298 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

299 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

300 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

301 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

302 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

303 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

304 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

305 
	#GL_COMPRESSED_RGB
 0x84ED

	)

306 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

307 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

308 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

309 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

310 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

311 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

312 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

313 
	#GL_COMBINE
 0x8570

	)

314 
	#GL_COMBINE_RGB
 0x8571

	)

315 
	#GL_COMBINE_ALPHA
 0x8572

	)

316 
	#GL_SOURCE0_RGB
 0x8580

	)

317 
	#GL_SOURCE1_RGB
 0x8581

	)

318 
	#GL_SOURCE2_RGB
 0x8582

	)

319 
	#GL_SOURCE0_ALPHA
 0x8588

	)

320 
	#GL_SOURCE1_ALPHA
 0x8589

	)

321 
	#GL_SOURCE2_ALPHA
 0x858A

	)

322 
	#GL_OPERAND0_RGB
 0x8590

	)

323 
	#GL_OPERAND1_RGB
 0x8591

	)

324 
	#GL_OPERAND2_RGB
 0x8592

	)

325 
	#GL_OPERAND0_ALPHA
 0x8598

	)

326 
	#GL_OPERAND1_ALPHA
 0x8599

	)

327 
	#GL_OPERAND2_ALPHA
 0x859A

	)

328 
	#GL_RGB_SCALE
 0x8573

	)

329 
	#GL_ADD_SIGNED
 0x8574

	)

330 
	#GL_INTERPOLATE
 0x8575

	)

331 
	#GL_SUBTRACT
 0x84E7

	)

332 
	#GL_CONSTANT
 0x8576

	)

333 
	#GL_PRIMARY_COLOR
 0x8577

	)

334 
	#GL_PREVIOUS
 0x8578

	)

335 
	#GL_DOT3_RGB
 0x86AE

	)

336 
	#GL_DOT3_RGBA
 0x86AF

	)

339 #i‚de‡
GL_VERSION_1_4


340 
	#GL_BLEND_DST_RGB
 0x80C8

	)

341 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

342 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

343 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

344 
	#GL_POINT_SIZE_MIN
 0x8126

	)

345 
	#GL_POINT_SIZE_MAX
 0x8127

	)

346 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

347 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

348 
	#GL_GENERATE_MIPMAP
 0x8191

	)

349 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

350 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

351 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

352 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

353 
	#GL_MIRRORED_REPEAT
 0x8370

	)

354 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

355 
	#GL_FOG_COORDINATE
 0x8451

	)

356 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

357 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

358 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

359 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

360 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

361 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

362 
	#GL_COLOR_SUM
 0x8458

	)

363 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

364 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

365 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

366 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

367 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

368 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

369 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

370 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

371 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

372 
	#GL_INCR_WRAP
 0x8507

	)

373 
	#GL_DECR_WRAP
 0x8508

	)

374 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

375 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

376 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

377 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

378 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

381 #i‚de‡
GL_VERSION_1_5


382 
	#GL_BUFFER_SIZE
 0x8764

	)

383 
	#GL_BUFFER_USAGE
 0x8765

	)

384 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

385 
	#GL_CURRENT_QUERY
 0x8865

	)

386 
	#GL_QUERY_RESULT
 0x8866

	)

387 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

388 
	#GL_ARRAY_BUFFER
 0x8892

	)

389 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

390 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

391 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

392 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

393 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

394 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

395 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

396 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

397 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

398 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

399 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

400 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

402 
	#GL_READ_ONLY
 0x88B8

	)

403 
	#GL_WRITE_ONLY
 0x88B9

	)

404 
	#GL_READ_WRITE
 0x88BA

	)

405 
	#GL_BUFFER_ACCESS
 0x88BB

	)

406 
	#GL_BUFFER_MAPPED
 0x88BC

	)

407 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

408 
	#GL_STREAM_DRAW
 0x88E0

	)

409 
	#GL_STREAM_READ
 0x88E1

	)

410 
	#GL_STREAM_COPY
 0x88E2

	)

411 
	#GL_STATIC_DRAW
 0x88E4

	)

412 
	#GL_STATIC_READ
 0x88E5

	)

413 
	#GL_STATIC_COPY
 0x88E6

	)

414 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

415 
	#GL_DYNAMIC_READ
 0x88E9

	)

416 
	#GL_DYNAMIC_COPY
 0x88EA

	)

417 
	#GL_SAMPLES_PASSED
 0x8914

	)

418 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

419 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

420 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

421 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

422 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

423 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

424 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

425 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

426 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

427 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

428 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

429 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

430 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

431 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

434 #i‚de‡
GL_VERSION_2_0


435 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

436 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

437 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

438 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

439 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

440 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

441 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

442 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

443 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

444 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

445 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

446 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

447 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

448 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

449 
	#GL_DRAW_BUFFER0
 0x8825

	)

450 
	#GL_DRAW_BUFFER1
 0x8826

	)

451 
	#GL_DRAW_BUFFER2
 0x8827

	)

452 
	#GL_DRAW_BUFFER3
 0x8828

	)

453 
	#GL_DRAW_BUFFER4
 0x8829

	)

454 
	#GL_DRAW_BUFFER5
 0x882A

	)

455 
	#GL_DRAW_BUFFER6
 0x882B

	)

456 
	#GL_DRAW_BUFFER7
 0x882C

	)

457 
	#GL_DRAW_BUFFER8
 0x882D

	)

458 
	#GL_DRAW_BUFFER9
 0x882E

	)

459 
	#GL_DRAW_BUFFER10
 0x882F

	)

460 
	#GL_DRAW_BUFFER11
 0x8830

	)

461 
	#GL_DRAW_BUFFER12
 0x8831

	)

462 
	#GL_DRAW_BUFFER13
 0x8832

	)

463 
	#GL_DRAW_BUFFER14
 0x8833

	)

464 
	#GL_DRAW_BUFFER15
 0x8834

	)

465 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

466 
	#GL_POINT_SPRITE
 0x8861

	)

467 
	#GL_COORD_REPLACE
 0x8862

	)

468 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

469 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

470 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

471 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

472 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

473 
	#GL_VERTEX_SHADER
 0x8B31

	)

474 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

475 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

476 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

477 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

478 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

479 
	#GL_SHADER_TYPE
 0x8B4F

	)

480 
	#GL_FLOAT_VEC2
 0x8B50

	)

481 
	#GL_FLOAT_VEC3
 0x8B51

	)

482 
	#GL_FLOAT_VEC4
 0x8B52

	)

483 
	#GL_INT_VEC2
 0x8B53

	)

484 
	#GL_INT_VEC3
 0x8B54

	)

485 
	#GL_INT_VEC4
 0x8B55

	)

486 
	#GL_BOOL
 0x8B56

	)

487 
	#GL_BOOL_VEC2
 0x8B57

	)

488 
	#GL_BOOL_VEC3
 0x8B58

	)

489 
	#GL_BOOL_VEC4
 0x8B59

	)

490 
	#GL_FLOAT_MAT2
 0x8B5A

	)

491 
	#GL_FLOAT_MAT3
 0x8B5B

	)

492 
	#GL_FLOAT_MAT4
 0x8B5C

	)

493 
	#GL_SAMPLER_1D
 0x8B5D

	)

494 
	#GL_SAMPLER_2D
 0x8B5E

	)

495 
	#GL_SAMPLER_3D
 0x8B5F

	)

496 
	#GL_SAMPLER_CUBE
 0x8B60

	)

497 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

498 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

499 
	#GL_DELETE_STATUS
 0x8B80

	)

500 
	#GL_COMPILE_STATUS
 0x8B81

	)

501 
	#GL_LINK_STATUS
 0x8B82

	)

502 
	#GL_VALIDATE_STATUS
 0x8B83

	)

503 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

504 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

505 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

506 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

507 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

508 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

509 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

510 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

511 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

512 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

513 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

514 
	#GL_LOWER_LEFT
 0x8CA1

	)

515 
	#GL_UPPER_LEFT
 0x8CA2

	)

516 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

517 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

518 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

521 #i‚de‡
GL_ARB_mu…ôextuª


522 
	#GL_TEXTURE0_ARB
 0x84C0

	)

523 
	#GL_TEXTURE1_ARB
 0x84C1

	)

524 
	#GL_TEXTURE2_ARB
 0x84C2

	)

525 
	#GL_TEXTURE3_ARB
 0x84C3

	)

526 
	#GL_TEXTURE4_ARB
 0x84C4

	)

527 
	#GL_TEXTURE5_ARB
 0x84C5

	)

528 
	#GL_TEXTURE6_ARB
 0x84C6

	)

529 
	#GL_TEXTURE7_ARB
 0x84C7

	)

530 
	#GL_TEXTURE8_ARB
 0x84C8

	)

531 
	#GL_TEXTURE9_ARB
 0x84C9

	)

532 
	#GL_TEXTURE10_ARB
 0x84CA

	)

533 
	#GL_TEXTURE11_ARB
 0x84CB

	)

534 
	#GL_TEXTURE12_ARB
 0x84CC

	)

535 
	#GL_TEXTURE13_ARB
 0x84CD

	)

536 
	#GL_TEXTURE14_ARB
 0x84CE

	)

537 
	#GL_TEXTURE15_ARB
 0x84CF

	)

538 
	#GL_TEXTURE16_ARB
 0x84D0

	)

539 
	#GL_TEXTURE17_ARB
 0x84D1

	)

540 
	#GL_TEXTURE18_ARB
 0x84D2

	)

541 
	#GL_TEXTURE19_ARB
 0x84D3

	)

542 
	#GL_TEXTURE20_ARB
 0x84D4

	)

543 
	#GL_TEXTURE21_ARB
 0x84D5

	)

544 
	#GL_TEXTURE22_ARB
 0x84D6

	)

545 
	#GL_TEXTURE23_ARB
 0x84D7

	)

546 
	#GL_TEXTURE24_ARB
 0x84D8

	)

547 
	#GL_TEXTURE25_ARB
 0x84D9

	)

548 
	#GL_TEXTURE26_ARB
 0x84DA

	)

549 
	#GL_TEXTURE27_ARB
 0x84DB

	)

550 
	#GL_TEXTURE28_ARB
 0x84DC

	)

551 
	#GL_TEXTURE29_ARB
 0x84DD

	)

552 
	#GL_TEXTURE30_ARB
 0x84DE

	)

553 
	#GL_TEXTURE31_ARB
 0x84DF

	)

554 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

555 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

556 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

559 #i‚de‡
GL_ARB_å™•o£_m©rix


560 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

561 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

562 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

563 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

566 #i‚de‡
GL_ARB_mu…ißm∂e


567 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

568 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

569 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

570 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

571 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

572 
	#GL_SAMPLES_ARB
 0x80A9

	)

573 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

574 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

575 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

578 #i‚de‡
GL_ARB_ãxtuª_ív_add


581 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


582 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

583 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

584 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

585 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

586 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

587 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

588 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

589 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

590 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

591 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

592 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

593 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

596 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


597 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

598 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

599 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

600 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

601 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

602 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

603 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

604 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

605 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

606 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

607 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

610 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


611 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

614 #i‚de‡
GL_ARB_poöt_∑ømëîs


615 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

616 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

617 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

618 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

621 #i‚de‡
GL_ARB_vîãx_bÀnd


622 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

623 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

624 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

625 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

626 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

627 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

628 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

629 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

630 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

631 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

632 
	#GL_MODELVIEW0_ARB
 0x1700

	)

633 
	#GL_MODELVIEW1_ARB
 0x850A

	)

634 
	#GL_MODELVIEW2_ARB
 0x8722

	)

635 
	#GL_MODELVIEW3_ARB
 0x8723

	)

636 
	#GL_MODELVIEW4_ARB
 0x8724

	)

637 
	#GL_MODELVIEW5_ARB
 0x8725

	)

638 
	#GL_MODELVIEW6_ARB
 0x8726

	)

639 
	#GL_MODELVIEW7_ARB
 0x8727

	)

640 
	#GL_MODELVIEW8_ARB
 0x8728

	)

641 
	#GL_MODELVIEW9_ARB
 0x8729

	)

642 
	#GL_MODELVIEW10_ARB
 0x872A

	)

643 
	#GL_MODELVIEW11_ARB
 0x872B

	)

644 
	#GL_MODELVIEW12_ARB
 0x872C

	)

645 
	#GL_MODELVIEW13_ARB
 0x872D

	)

646 
	#GL_MODELVIEW14_ARB
 0x872E

	)

647 
	#GL_MODELVIEW15_ARB
 0x872F

	)

648 
	#GL_MODELVIEW16_ARB
 0x8730

	)

649 
	#GL_MODELVIEW17_ARB
 0x8731

	)

650 
	#GL_MODELVIEW18_ARB
 0x8732

	)

651 
	#GL_MODELVIEW19_ARB
 0x8733

	)

652 
	#GL_MODELVIEW20_ARB
 0x8734

	)

653 
	#GL_MODELVIEW21_ARB
 0x8735

	)

654 
	#GL_MODELVIEW22_ARB
 0x8736

	)

655 
	#GL_MODELVIEW23_ARB
 0x8737

	)

656 
	#GL_MODELVIEW24_ARB
 0x8738

	)

657 
	#GL_MODELVIEW25_ARB
 0x8739

	)

658 
	#GL_MODELVIEW26_ARB
 0x873A

	)

659 
	#GL_MODELVIEW27_ARB
 0x873B

	)

660 
	#GL_MODELVIEW28_ARB
 0x873C

	)

661 
	#GL_MODELVIEW29_ARB
 0x873D

	)

662 
	#GL_MODELVIEW30_ARB
 0x873E

	)

663 
	#GL_MODELVIEW31_ARB
 0x873F

	)

666 #i‚de‡
GL_ARB_m©rix_∑Àâe


667 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

668 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

669 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

670 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

671 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

672 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

673 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

674 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

675 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

676 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

679 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


680 
	#GL_COMBINE_ARB
 0x8570

	)

681 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

682 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

683 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

684 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

685 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

686 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

687 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

688 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

689 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

690 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

691 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

692 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

693 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

694 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

695 
	#GL_RGB_SCALE_ARB
 0x8573

	)

696 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

697 
	#GL_INTERPOLATE_ARB
 0x8575

	)

698 
	#GL_SUBTRACT_ARB
 0x84E7

	)

699 
	#GL_CONSTANT_ARB
 0x8576

	)

700 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

701 
	#GL_PREVIOUS_ARB
 0x8578

	)

704 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


707 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


708 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

709 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

712 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


713 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

716 #i‚de‡
GL_ARB_dïth_ãxtuª


717 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

718 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

719 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

720 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

721 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

724 #i‚de‡
GL_ARB_shadow


725 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

726 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

727 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

730 #i‚de‡
GL_ARB_shadow_ambõ¡


731 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

734 #i‚de‡
GL_ARB_wödow_pos


737 #i‚de‡
GL_ARB_vîãx_¥ogøm


738 
	#GL_COLOR_SUM_ARB
 0x8458

	)

739 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

740 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

741 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

742 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

743 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

744 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

745 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

746 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

747 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

748 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

749 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

750 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

751 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

752 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

753 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

754 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

755 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

756 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

757 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

758 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

759 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

760 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

761 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

762 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

763 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

764 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

765 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

766 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

767 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

768 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

769 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

770 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

771 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

772 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

773 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

774 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

775 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

776 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

777 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

778 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

779 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

780 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

781 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

782 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

783 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

784 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

785 
	#GL_MATRIX0_ARB
 0x88C0

	)

786 
	#GL_MATRIX1_ARB
 0x88C1

	)

787 
	#GL_MATRIX2_ARB
 0x88C2

	)

788 
	#GL_MATRIX3_ARB
 0x88C3

	)

789 
	#GL_MATRIX4_ARB
 0x88C4

	)

790 
	#GL_MATRIX5_ARB
 0x88C5

	)

791 
	#GL_MATRIX6_ARB
 0x88C6

	)

792 
	#GL_MATRIX7_ARB
 0x88C7

	)

793 
	#GL_MATRIX8_ARB
 0x88C8

	)

794 
	#GL_MATRIX9_ARB
 0x88C9

	)

795 
	#GL_MATRIX10_ARB
 0x88CA

	)

796 
	#GL_MATRIX11_ARB
 0x88CB

	)

797 
	#GL_MATRIX12_ARB
 0x88CC

	)

798 
	#GL_MATRIX13_ARB
 0x88CD

	)

799 
	#GL_MATRIX14_ARB
 0x88CE

	)

800 
	#GL_MATRIX15_ARB
 0x88CF

	)

801 
	#GL_MATRIX16_ARB
 0x88D0

	)

802 
	#GL_MATRIX17_ARB
 0x88D1

	)

803 
	#GL_MATRIX18_ARB
 0x88D2

	)

804 
	#GL_MATRIX19_ARB
 0x88D3

	)

805 
	#GL_MATRIX20_ARB
 0x88D4

	)

806 
	#GL_MATRIX21_ARB
 0x88D5

	)

807 
	#GL_MATRIX22_ARB
 0x88D6

	)

808 
	#GL_MATRIX23_ARB
 0x88D7

	)

809 
	#GL_MATRIX24_ARB
 0x88D8

	)

810 
	#GL_MATRIX25_ARB
 0x88D9

	)

811 
	#GL_MATRIX26_ARB
 0x88DA

	)

812 
	#GL_MATRIX27_ARB
 0x88DB

	)

813 
	#GL_MATRIX28_ARB
 0x88DC

	)

814 
	#GL_MATRIX29_ARB
 0x88DD

	)

815 
	#GL_MATRIX30_ARB
 0x88DE

	)

816 
	#GL_MATRIX31_ARB
 0x88DF

	)

819 #i‚de‡
GL_ARB_‰agmít_¥ogøm


820 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

821 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

822 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

823 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

824 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

825 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

826 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

827 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

828 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

829 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

830 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

831 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

832 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

833 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

834 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

837 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


838 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

839 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

840 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

841 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

842 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

843 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

844 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

845 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

846 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

847 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

848 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

849 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

850 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

851 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

852 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

853 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

854 
	#GL_READ_ONLY_ARB
 0x88B8

	)

855 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

856 
	#GL_READ_WRITE_ARB
 0x88BA

	)

857 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

858 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

859 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

860 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

861 
	#GL_STREAM_READ_ARB
 0x88E1

	)

862 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

863 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

864 
	#GL_STATIC_READ_ARB
 0x88E5

	)

865 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

866 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

867 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

868 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

871 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


872 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

873 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

874 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

875 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

876 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

879 #i‚de‡
GL_ARB_shadî_obje˘s


880 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

881 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

882 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

883 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

884 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

885 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

886 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

887 
	#GL_INT_VEC2_ARB
 0x8B53

	)

888 
	#GL_INT_VEC3_ARB
 0x8B54

	)

889 
	#GL_INT_VEC4_ARB
 0x8B55

	)

890 
	#GL_BOOL_ARB
 0x8B56

	)

891 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

892 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

893 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

894 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

895 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

896 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

897 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

898 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

899 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

900 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

901 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

902 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

903 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

904 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

905 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

906 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

907 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

908 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

909 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

910 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

911 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

912 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

913 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

916 #i‚de‡
GL_ARB_vîãx_shadî


917 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

918 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

919 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

920 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

921 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

922 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

923 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

926 #i‚de‡
GL_ARB_‰agmít_shadî


927 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

928 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

929 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

932 #i‚de‡
GL_ARB_shadög_œnguage_100


933 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

936 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


939 #i‚de‡
GL_ARB_poöt_•rôe


940 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

941 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

944 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


947 #i‚de‡
GL_ARB_døw_buf„rs


948 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

949 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

950 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

951 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

952 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

953 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

954 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

955 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

956 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

957 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

958 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

959 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

960 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

961 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

962 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

963 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

964 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

967 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


968 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

969 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

970 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

971 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

974 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

982 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


983 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

986 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


987 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

988 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

989 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

990 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

991 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

992 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

993 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

994 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

995 
	#GL_RGBA32F_ARB
 0x8814

	)

996 
	#GL_RGB32F_ARB
 0x8815

	)

997 
	#GL_ALPHA32F_ARB
 0x8816

	)

998 
	#GL_INTENSITY32F_ARB
 0x8817

	)

999 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1000 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1001 
	#GL_RGBA16F_ARB
 0x881A

	)

1002 
	#GL_RGB16F_ARB
 0x881B

	)

1003 
	#GL_ALPHA16F_ARB
 0x881C

	)

1004 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1005 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1006 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1009 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1010 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1011 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1012 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1013 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1016 #i‚de‡
GL_EXT_abgr


1017 
	#GL_ABGR_EXT
 0x8000

	)

1020 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


1021 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

1022 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

1023 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

1024 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

1025 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

1028 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


1029 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

1030 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

1031 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

1034 #i‚de‡
GL_EXT_ãxtuª


1035 
	#GL_ALPHA4_EXT
 0x803B

	)

1036 
	#GL_ALPHA8_EXT
 0x803C

	)

1037 
	#GL_ALPHA12_EXT
 0x803D

	)

1038 
	#GL_ALPHA16_EXT
 0x803E

	)

1039 
	#GL_LUMINANCE4_EXT
 0x803F

	)

1040 
	#GL_LUMINANCE8_EXT
 0x8040

	)

1041 
	#GL_LUMINANCE12_EXT
 0x8041

	)

1042 
	#GL_LUMINANCE16_EXT
 0x8042

	)

1043 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

1044 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

1045 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

1046 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

1047 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

1048 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

1049 
	#GL_INTENSITY_EXT
 0x8049

	)

1050 
	#GL_INTENSITY4_EXT
 0x804A

	)

1051 
	#GL_INTENSITY8_EXT
 0x804B

	)

1052 
	#GL_INTENSITY12_EXT
 0x804C

	)

1053 
	#GL_INTENSITY16_EXT
 0x804D

	)

1054 
	#GL_RGB2_EXT
 0x804E

	)

1055 
	#GL_RGB4_EXT
 0x804F

	)

1056 
	#GL_RGB5_EXT
 0x8050

	)

1057 
	#GL_RGB8_EXT
 0x8051

	)

1058 
	#GL_RGB10_EXT
 0x8052

	)

1059 
	#GL_RGB12_EXT
 0x8053

	)

1060 
	#GL_RGB16_EXT
 0x8054

	)

1061 
	#GL_RGBA2_EXT
 0x8055

	)

1062 
	#GL_RGBA4_EXT
 0x8056

	)

1063 
	#GL_RGB5_A1_EXT
 0x8057

	)

1064 
	#GL_RGBA8_EXT
 0x8058

	)

1065 
	#GL_RGB10_A2_EXT
 0x8059

	)

1066 
	#GL_RGBA12_EXT
 0x805A

	)

1067 
	#GL_RGBA16_EXT
 0x805B

	)

1068 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

1069 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

1070 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

1071 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

1072 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

1073 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

1074 
	#GL_REPLACE_EXT
 0x8062

	)

1075 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

1076 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

1077 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

1080 #i‚de‡
GL_EXT_ãxtuª3D


1081 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

1082 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

1083 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

1084 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

1085 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

1086 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

1087 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

1088 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

1089 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

1092 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


1093 
	#GL_FILTER4_SGIS
 0x8146

	)

1094 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

1097 #i‚de‡
GL_EXT_subãxtuª


1100 #i‚de‡
GL_EXT_c›y_ãxtuª


1103 #i‚de‡
GL_EXT_hi°ogøm


1104 
	#GL_HISTOGRAM_EXT
 0x8024

	)

1105 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

1106 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

1107 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

1108 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

1109 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

1110 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

1111 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

1112 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

1113 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

1114 
	#GL_MINMAX_EXT
 0x802E

	)

1115 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

1116 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

1117 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

1120 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


1121 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

1122 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

1123 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

1124 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

1125 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

1126 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

1127 
	#GL_REDUCE_EXT
 0x8016

	)

1128 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

1129 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

1130 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

1131 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

1132 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

1133 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

1134 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

1135 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

1136 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

1137 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

1138 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

1139 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

1140 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

1143 #i‚de‡
GL_SGI_cﬁ‹_m©rix


1144 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

1145 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

1146 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

1147 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

1148 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

1149 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

1150 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

1151 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

1152 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

1153 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

1154 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

1157 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


1158 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

1159 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

1160 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

1161 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

1162 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

1163 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

1164 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

1165 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

1166 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

1167 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

1168 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

1169 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

1170 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

1171 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

1172 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

1173 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

1176 #i‚de‡
GL_SGIS_pixñ_ãxtuª


1177 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

1178 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

1179 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

1180 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

1183 #i‚de‡
GL_SGIX_pixñ_ãxtuª


1184 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

1185 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

1188 #i‚de‡
GL_SGIS_ãxtuª4D


1189 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

1190 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

1191 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

1192 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

1193 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

1194 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

1195 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

1196 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

1197 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

1198 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

1201 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


1202 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

1203 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

1206 #i‚de‡
GL_EXT_cmyka


1207 
	#GL_CMYK_EXT
 0x800C

	)

1208 
	#GL_CMYKA_EXT
 0x800D

	)

1209 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

1210 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

1213 #i‚de‡
GL_EXT_ãxtuª_obje˘


1214 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

1215 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

1216 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

1217 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

1218 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

1221 #i‚de‡
GL_SGIS_dëaû_ãxtuª


1222 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

1223 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

1224 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

1225 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

1226 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

1227 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

1228 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

1229 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

1232 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


1233 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

1234 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

1235 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

1236 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

1239 #i‚de‡
GL_EXT_∑cked_pixñs


1240 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

1241 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

1242 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

1243 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

1244 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

1247 #i‚de‡
GL_SGIS_ãxtuª_lod


1248 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

1249 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

1250 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

1251 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

1254 #i‚de‡
GL_SGIS_mu…ißm∂e


1255 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

1256 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

1257 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

1258 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

1259 
	#GL_1PASS_SGIS
 0x80A1

	)

1260 
	#GL_2PASS_0_SGIS
 0x80A2

	)

1261 
	#GL_2PASS_1_SGIS
 0x80A3

	)

1262 
	#GL_4PASS_0_SGIS
 0x80A4

	)

1263 
	#GL_4PASS_1_SGIS
 0x80A5

	)

1264 
	#GL_4PASS_2_SGIS
 0x80A6

	)

1265 
	#GL_4PASS_3_SGIS
 0x80A7

	)

1266 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

1267 
	#GL_SAMPLES_SGIS
 0x80A9

	)

1268 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

1269 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

1270 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

1273 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


1274 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

1277 #i‚de‡
GL_EXT_vîãx_¨øy


1278 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

1279 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

1280 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

1281 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

1282 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

1283 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

1284 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

1285 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

1286 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

1287 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

1288 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

1289 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

1290 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

1291 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

1292 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

1293 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

1294 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

1295 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

1296 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

1297 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

1298 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

1299 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

1300 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

1301 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

1302 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

1303 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

1304 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

1305 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

1306 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

1307 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

1308 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

1309 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

1312 #i‚de‡
GL_EXT_misc_©åibuã


1315 #i‚de‡
GL_SGIS_gíî©e_mùm≠


1316 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

1317 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

1320 #i‚de‡
GL_SGIX_˛ùm≠


1321 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

1322 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

1323 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

1324 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

1325 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

1326 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

1327 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

1328 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

1329 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

1330 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

1331 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

1332 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

1335 #i‚de‡
GL_SGIX_shadow


1336 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

1337 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

1338 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

1339 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

1342 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


1343 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

1346 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


1347 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

1350 #i‚de‡
GL_EXT_bÀnd_mömax


1351 
	#GL_FUNC_ADD_EXT
 0x8006

	)

1352 
	#GL_MIN_EXT
 0x8007

	)

1353 
	#GL_MAX_EXT
 0x8008

	)

1354 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

1357 #i‚de‡
GL_EXT_bÀnd_subåa˘


1358 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

1359 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

1362 #i‚de‡
GL_EXT_bÀnd_logic_›


1365 #i‚de‡
GL_SGIX_öãæa˚


1366 
	#GL_INTERLACE_SGIX
 0x8094

	)

1369 #i‚de‡
GL_SGIX_pixñ_tûes


1370 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

1371 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

1372 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

1373 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

1374 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

1375 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

1376 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

1377 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

1380 #i‚de‡
GL_SGIS_ãxtuª_£À˘


1381 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

1382 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

1383 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

1384 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

1385 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

1386 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

1387 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

1388 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

1389 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

1390 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

1391 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

1392 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

1393 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

1394 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

1395 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

1396 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

1397 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

1398 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

1399 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

1400 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

1401 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

1402 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

1405 #i‚de‡
GL_SGIX_•rôe


1406 
	#GL_SPRITE_SGIX
 0x8148

	)

1407 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

1408 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

1409 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

1410 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

1411 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

1412 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

1415 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


1416 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

1419 #i‚de‡
GL_EXT_poöt_∑ømëîs


1420 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

1421 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

1422 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

1423 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

1426 #i‚de‡
GL_SGIS_poöt_∑ømëîs


1427 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

1428 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

1429 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

1430 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

1433 #i‚de‡
GL_SGIX_ö°rumíts


1434 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

1435 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

1438 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


1439 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

1440 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

1441 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

1442 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

1445 #i‚de‡
GL_SGIX_‰amezoom


1446 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

1447 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

1448 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

1451 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


1454 #i‚de‡
GL_FfdMaskSGIX


1455 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

1456 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

1459 #i‚de‡
GL_SGIX_pﬁynomül_ffd


1460 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

1461 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

1462 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

1463 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

1466 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


1467 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

1468 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

1471 #i‚de‡
GL_SGIX_Êush_ø°î


1474 #i‚de‡
GL_SGIX_dïth_ãxtuª


1475 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

1476 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

1477 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

1480 #i‚de‡
GL_SGIS_fog_fun˘i⁄


1481 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

1482 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

1483 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

1486 #i‚de‡
GL_SGIX_fog_off£t


1487 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

1488 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

1491 #i‚de‡
GL_HP_image_å™sf‹m


1492 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

1493 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

1494 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

1495 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

1496 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

1497 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

1498 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

1499 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

1500 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

1501 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

1502 
	#GL_CUBIC_HP
 0x815F

	)

1503 
	#GL_AVERAGE_HP
 0x8160

	)

1504 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

1505 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

1506 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

1509 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


1510 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

1511 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

1512 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

1513 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

1516 #i‚de‡
GL_INGR_∑Àâe_buf„r


1519 #i‚de‡
GL_SGIX_ãxtuª_add_ív


1520 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

1523 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


1526 #i‚de‡
GL_PGI_vîãx_höts


1527 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

1528 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

1529 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

1530 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

1531 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

1532 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

1533 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

1534 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

1535 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

1536 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

1537 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

1538 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

1539 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

1540 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

1541 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

1542 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

1543 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

1544 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

1545 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

1546 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

1547 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

1548 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

1551 #i‚de‡
GL_PGI_misc_höts


1552 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

1553 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

1554 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

1555 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

1556 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

1557 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

1558 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

1559 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

1560 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

1561 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

1562 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

1563 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

1564 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

1565 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

1566 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

1567 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

1568 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

1569 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

1570 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

1571 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

1574 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


1575 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

1576 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

1577 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

1578 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

1579 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

1580 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

1581 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

1584 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


1585 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

1588 #i‚de‡
GL_SGIX_li°_¥i‹ôy


1589 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

1592 #i‚de‡
GL_SGIX_ú_ö°rumít1


1593 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

1596 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


1597 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

1600 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


1601 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

1602 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

1603 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

1606 #i‚de‡
GL_SGIX_shadow_ambõ¡


1607 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

1610 #i‚de‡
GL_EXT_ödex_ãxtuª


1613 #i‚de‡
GL_EXT_ödex_m©îül


1614 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

1615 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

1616 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

1619 #i‚de‡
GL_EXT_ödex_func


1620 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

1621 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

1622 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

1625 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


1626 
	#GL_IUI_V2F_EXT
 0x81AD

	)

1627 
	#GL_IUI_V3F_EXT
 0x81AE

	)

1628 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

1629 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

1630 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

1631 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

1632 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

1633 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

1636 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


1637 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

1638 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

1641 #i‚de‡
GL_EXT_cuŒ_vîãx


1642 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

1643 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

1644 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

1647 #i‚de‡
GL_SGIX_y¸cb


1648 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

1649 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

1652 #i‚de‡
GL_SGIX_‰agmít_lightög


1653 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

1654 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

1655 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

1656 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

1657 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

1658 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

1659 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

1660 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

1661 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

1662 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

1663 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

1664 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

1665 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

1666 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

1667 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

1668 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

1669 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

1670 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

1671 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

1672 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

1675 #i‚de‡
GL_IBM_ø°îpos_˛ù


1676 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

1679 #i‚de‡
GL_HP_ãxtuª_lightög


1680 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

1681 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

1682 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

1685 #i‚de‡
GL_EXT_døw_ønge_ñemíts


1686 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

1687 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

1690 #i‚de‡
GL_WIN_ph⁄g_shadög


1691 
	#GL_PHONG_WIN
 0x80EA

	)

1692 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

1695 #i‚de‡
GL_WIN_•ecuœr_fog


1696 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

1699 #i‚de‡
GL_EXT_light_ãxtuª


1700 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

1701 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

1702 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

1703 
	#GL_ATTENUATION_EXT
 0x834D

	)

1704 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

1705 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

1706 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

1707 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

1708 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

1712 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


1713 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

1714 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

1717 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


1718 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

1719 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

1720 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

1721 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

1722 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

1723 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

1724 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

1727 #i‚de‡
GL_EXT_bgø


1728 
	#GL_BGR_EXT
 0x80E0

	)

1729 
	#GL_BGRA_EXT
 0x80E1

	)

1732 #i‚de‡
GL_SGIX_async


1733 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

1736 #i‚de‡
GL_SGIX_async_pixñ


1737 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

1738 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

1739 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

1740 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

1741 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

1742 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

1745 #i‚de‡
GL_SGIX_async_hi°ogøm


1746 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

1747 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

1750 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


1753 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


1754 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

1755 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

1756 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

1757 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

1758 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

1761 #i‚de‡
GL_HP_oc˛usi⁄_ã°


1762 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

1763 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

1766 #i‚de‡
GL_EXT_pixñ_å™sf‹m


1767 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

1768 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

1769 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

1770 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

1771 
	#GL_CUBIC_EXT
 0x8334

	)

1772 
	#GL_AVERAGE_EXT
 0x8335

	)

1773 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

1774 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

1775 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

1778 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


1781 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


1782 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

1785 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


1786 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

1787 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

1788 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

1791 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


1792 
	#GL_COLOR_SUM_EXT
 0x8458

	)

1793 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

1794 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

1795 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

1796 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

1797 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

1798 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

1801 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


1802 
	#GL_PERTURB_EXT
 0x85AE

	)

1803 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

1806 #i‚de‡
GL_EXT_mu…i_døw_¨øys


1809 #i‚de‡
GL_EXT_fog_co‹d


1810 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

1811 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

1812 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

1813 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

1814 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

1815 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

1816 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

1817 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

1820 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


1821 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

1822 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

1825 #i‚de‡
GL_EXT_co‹dö©e_‰ame


1826 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

1827 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

1828 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

1829 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

1830 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

1831 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

1832 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

1833 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

1834 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

1835 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

1836 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

1837 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

1838 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

1839 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

1842 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


1843 
	#GL_COMBINE_EXT
 0x8570

	)

1844 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

1845 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

1846 
	#GL_RGB_SCALE_EXT
 0x8573

	)

1847 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

1848 
	#GL_INTERPOLATE_EXT
 0x8575

	)

1849 
	#GL_CONSTANT_EXT
 0x8576

	)

1850 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

1851 
	#GL_PREVIOUS_EXT
 0x8578

	)

1852 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

1853 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

1854 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

1855 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

1856 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

1857 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

1858 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

1859 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

1860 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

1861 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

1862 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

1863 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

1866 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


1867 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

1870 #i‚de‡
GL_APPLE_å™sf‹m_höt


1871 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

1874 #i‚de‡
GL_SGIX_fog_sˇÀ


1875 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

1876 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

1879 #i‚de‡
GL_SUNX_c⁄°™t_d©a


1880 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

1881 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

1884 #i‚de‡
GL_SUN_globÆ_Æpha


1885 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

1886 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

1889 #i‚de‡
GL_SUN_åüngÀ_li°


1890 
	#GL_RESTART_SUN
 0x0001

	)

1891 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

1892 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

1893 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

1894 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

1895 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

1896 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

1897 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

1898 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

1899 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

1900 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

1901 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

1902 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

1903 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

1904 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

1905 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

1906 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

1909 #i‚de‡
GL_SUN_vîãx


1912 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


1913 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

1914 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

1915 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

1916 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

1919 #i‚de‡
GL_INGR_cﬁ‹_˛amp


1920 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

1921 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

1922 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

1923 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

1924 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

1925 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

1926 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

1927 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

1930 #i‚de‡
GL_INGR_öãæa˚_ªad


1931 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

1934 #i‚de‡
GL_EXT_°ícû_wøp


1935 
	#GL_INCR_WRAP_EXT
 0x8507

	)

1936 
	#GL_DECR_WRAP_EXT
 0x8508

	)

1939 #i‚de‡
GL_EXT_422_pixñs


1940 
	#GL_422_EXT
 0x80CC

	)

1941 
	#GL_422_REV_EXT
 0x80CD

	)

1942 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

1943 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

1946 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


1947 
	#GL_NORMAL_MAP_NV
 0x8511

	)

1948 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

1951 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


1952 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

1953 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

1954 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

1955 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

1956 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

1957 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

1958 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

1959 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

1960 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

1961 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

1962 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

1963 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

1966 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


1967 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

1970 #i‚de‡
GL_EXT_ãxtuª_ív_add


1973 #i‚de‡
GL_EXT_ãxtuª_lod_büs


1974 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

1975 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

1976 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

1979 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


1980 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

1981 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

1984 #i‚de‡
GL_EXT_vîãx_weightög


1985 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

1986 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

1987 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

1988 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

1989 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

1990 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

1991 
	#GL_MODELVIEW1_EXT
 0x850A

	)

1992 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

1993 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

1994 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

1995 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

1996 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

1997 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

2000 #i‚de‡
GL_NV_light_max_exp⁄ít


2001 
	#GL_MAX_SHININESS_NV
 0x8504

	)

2002 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

2005 #i‚de‡
GL_NV_vîãx_¨øy_ønge


2006 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

2007 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

2008 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

2009 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

2010 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

2013 #i‚de‡
GL_NV_ªgi°î_comböîs


2014 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

2015 
	#GL_VARIABLE_A_NV
 0x8523

	)

2016 
	#GL_VARIABLE_B_NV
 0x8524

	)

2017 
	#GL_VARIABLE_C_NV
 0x8525

	)

2018 
	#GL_VARIABLE_D_NV
 0x8526

	)

2019 
	#GL_VARIABLE_E_NV
 0x8527

	)

2020 
	#GL_VARIABLE_F_NV
 0x8528

	)

2021 
	#GL_VARIABLE_G_NV
 0x8529

	)

2022 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

2023 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

2024 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

2025 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

2026 
	#GL_SPARE0_NV
 0x852E

	)

2027 
	#GL_SPARE1_NV
 0x852F

	)

2028 
	#GL_DISCARD_NV
 0x8530

	)

2029 
	#GL_E_TIMES_F_NV
 0x8531

	)

2030 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

2031 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

2032 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

2033 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

2034 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

2035 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

2036 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

2037 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

2038 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

2039 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

2040 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

2041 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

2042 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

2043 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

2044 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

2045 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

2046 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

2047 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

2048 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

2049 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

2050 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

2051 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

2052 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

2053 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

2054 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

2055 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

2056 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

2057 
	#GL_COMBINER0_NV
 0x8550

	)

2058 
	#GL_COMBINER1_NV
 0x8551

	)

2059 
	#GL_COMBINER2_NV
 0x8552

	)

2060 
	#GL_COMBINER3_NV
 0x8553

	)

2061 
	#GL_COMBINER4_NV
 0x8554

	)

2062 
	#GL_COMBINER5_NV
 0x8555

	)

2063 
	#GL_COMBINER6_NV
 0x8556

	)

2064 
	#GL_COMBINER7_NV
 0x8557

	)

2072 #i‚de‡
GL_NV_fog_di°™˚


2073 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

2074 
	#GL_EYE_RADIAL_NV
 0x855B

	)

2075 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

2079 #i‚de‡
GL_NV_ãxgí_emboss


2080 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

2081 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

2082 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

2085 #i‚de‡
GL_NV_bÀnd_squ¨e


2088 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


2089 
	#GL_COMBINE4_NV
 0x8503

	)

2090 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

2091 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

2092 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

2093 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

2096 #i‚de‡
GL_MESA_ªsize_buf„rs


2099 #i‚de‡
GL_MESA_wödow_pos


2102 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


2103 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

2104 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

2105 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

2106 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

2109 #i‚de‡
GL_IBM_cuŒ_vîãx


2110 
	#GL_CULL_VERTEX_IBM
 103050

	)

2113 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


2116 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


2117 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

2118 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

2119 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

2120 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

2121 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

2122 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

2123 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

2124 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

2125 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

2126 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

2127 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

2128 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

2129 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

2130 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

2131 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

2132 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

2135 #i‚de‡
GL_SGIX_subßm∂e


2136 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

2137 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

2138 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

2139 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

2140 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

2143 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


2146 #i‚de‡
GL_SGIX_y¸cba


2147 
	#GL_YCRCB_SGIX
 0x8318

	)

2148 
	#GL_YCRCBA_SGIX
 0x8319

	)

2151 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


2152 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

2153 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

2154 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

2157 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2158 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2159 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2162 #i‚de‡
GL_3DFX_mu…ißm∂e


2163 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2164 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2165 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2166 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2169 #i‚de‡
GL_3DFX_tbuf„r


2172 #i‚de‡
GL_EXT_mu…ißm∂e


2173 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

2174 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

2175 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

2176 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

2177 
	#GL_1PASS_EXT
 0x80A1

	)

2178 
	#GL_2PASS_0_EXT
 0x80A2

	)

2179 
	#GL_2PASS_1_EXT
 0x80A3

	)

2180 
	#GL_4PASS_0_EXT
 0x80A4

	)

2181 
	#GL_4PASS_1_EXT
 0x80A5

	)

2182 
	#GL_4PASS_2_EXT
 0x80A6

	)

2183 
	#GL_4PASS_3_EXT
 0x80A7

	)

2184 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

2185 
	#GL_SAMPLES_EXT
 0x80A9

	)

2186 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

2187 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

2188 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

2189 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

2192 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


2193 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

2194 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

2197 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


2198 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

2201 #i‚de‡
GL_SGIX_ªßm∂e


2202 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

2203 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

2204 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

2205 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

2206 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

2209 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


2210 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

2211 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

2212 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

2213 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

2214 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

2215 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

2216 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

2217 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

2220 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


2221 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

2224 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


2225 
	#GL_DOT3_RGB_EXT
 0x8740

	)

2226 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

2229 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


2230 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

2231 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

2234 #i‚de‡
GL_NV_„n˚


2235 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

2236 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

2237 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

2240 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


2241 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

2244 #i‚de‡
GL_NV_evÆu©‹s


2245 
	#GL_EVAL_2D_NV
 0x86C0

	)

2246 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

2247 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

2248 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

2249 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

2250 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

2251 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

2252 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

2253 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

2254 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

2255 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

2256 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

2257 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

2258 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

2259 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

2260 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

2261 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

2262 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

2263 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

2264 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

2265 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

2266 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

2267 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

2268 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

2271 #i‚de‡
GL_NV_∑cked_dïth_°ícû


2272 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

2273 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

2276 #i‚de‡
GL_NV_ªgi°î_comböîs2


2277 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

2280 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


2283 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


2284 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

2285 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

2286 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

2287 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

2290 #i‚de‡
GL_NV_ãxtuª_shadî


2291 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

2292 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

2293 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

2294 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

2295 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

2296 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

2297 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

2298 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

2299 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

2300 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

2301 
	#GL_CULL_MODES_NV
 0x86E0

	)

2302 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

2303 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

2304 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

2305 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

2306 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

2307 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

2308 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

2309 
	#GL_CONST_EYE_NV
 0x86E5

	)

2310 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

2311 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

2312 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

2313 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

2314 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

2315 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

2316 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

2317 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

2318 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

2319 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

2320 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

2321 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

2322 
	#GL_HILO_NV
 0x86F4

	)

2323 
	#GL_DSDT_NV
 0x86F5

	)

2324 
	#GL_DSDT_MAG_NV
 0x86F6

	)

2325 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

2326 
	#GL_HILO16_NV
 0x86F8

	)

2327 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

2328 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

2329 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

2330 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

2331 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

2332 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

2333 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

2334 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

2335 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

2336 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

2337 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

2338 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

2339 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

2340 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

2341 
	#GL_DSDT8_NV
 0x8709

	)

2342 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

2343 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

2344 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

2345 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

2346 
	#GL_HI_SCALE_NV
 0x870E

	)

2347 
	#GL_LO_SCALE_NV
 0x870F

	)

2348 
	#GL_DS_SCALE_NV
 0x8710

	)

2349 
	#GL_DT_SCALE_NV
 0x8711

	)

2350 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

2351 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

2352 
	#GL_HI_BIAS_NV
 0x8714

	)

2353 
	#GL_LO_BIAS_NV
 0x8715

	)

2354 
	#GL_DS_BIAS_NV
 0x8716

	)

2355 
	#GL_DT_BIAS_NV
 0x8717

	)

2356 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

2357 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

2358 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

2359 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

2360 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

2361 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

2362 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

2363 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

2366 #i‚de‡
GL_NV_ãxtuª_shadî2


2367 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

2370 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


2371 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

2374 #i‚de‡
GL_NV_vîãx_¥ogøm


2375 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

2376 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

2377 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

2378 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

2379 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

2380 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

2381 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

2382 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

2383 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

2384 
	#GL_IDENTITY_NV
 0x862A

	)

2385 
	#GL_INVERSE_NV
 0x862B

	)

2386 
	#GL_TRANSPOSE_NV
 0x862C

	)

2387 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

2388 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

2389 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

2390 
	#GL_MATRIX0_NV
 0x8630

	)

2391 
	#GL_MATRIX1_NV
 0x8631

	)

2392 
	#GL_MATRIX2_NV
 0x8632

	)

2393 
	#GL_MATRIX3_NV
 0x8633

	)

2394 
	#GL_MATRIX4_NV
 0x8634

	)

2395 
	#GL_MATRIX5_NV
 0x8635

	)

2396 
	#GL_MATRIX6_NV
 0x8636

	)

2397 
	#GL_MATRIX7_NV
 0x8637

	)

2398 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

2399 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

2400 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

2401 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

2402 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

2403 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

2404 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

2405 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

2406 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

2407 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

2408 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

2409 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

2410 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

2411 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

2412 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

2413 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

2414 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

2415 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

2416 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

2417 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

2418 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

2419 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

2420 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

2421 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

2422 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

2423 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

2424 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

2425 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

2426 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

2427 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

2428 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

2429 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

2430 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

2431 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

2432 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

2433 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

2434 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

2435 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

2436 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

2437 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

2438 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

2439 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

2440 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

2441 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

2442 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

2443 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

2444 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

2445 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

2446 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

2447 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

2448 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

2449 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

2450 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

2451 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

2452 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

2453 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

2454 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

2455 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

2456 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

2457 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

2460 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


2461 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

2462 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

2463 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

2466 #i‚de‡
GL_SGIX_sˇÀbüs_höt


2467 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

2470 #i‚de‡
GL_OML_öãæa˚


2471 
	#GL_INTERLACE_OML
 0x8980

	)

2472 
	#GL_INTERLACE_READ_OML
 0x8981

	)

2475 #i‚de‡
GL_OML_subßm∂e


2476 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

2477 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

2480 #i‚de‡
GL_OML_ªßm∂e


2481 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

2482 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

2483 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

2484 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

2485 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

2486 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

2489 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


2490 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

2491 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

2494 #i‚de‡
GL_ATI_ívm≠_bumpm≠


2495 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

2496 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

2497 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

2498 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

2499 
	#GL_DUDV_ATI
 0x8779

	)

2500 
	#GL_DU8DV8_ATI
 0x877A

	)

2501 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

2502 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

2505 #i‚de‡
GL_ATI_‰agmít_shadî


2506 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

2507 
	#GL_REG_0_ATI
 0x8921

	)

2508 
	#GL_REG_1_ATI
 0x8922

	)

2509 
	#GL_REG_2_ATI
 0x8923

	)

2510 
	#GL_REG_3_ATI
 0x8924

	)

2511 
	#GL_REG_4_ATI
 0x8925

	)

2512 
	#GL_REG_5_ATI
 0x8926

	)

2513 
	#GL_REG_6_ATI
 0x8927

	)

2514 
	#GL_REG_7_ATI
 0x8928

	)

2515 
	#GL_REG_8_ATI
 0x8929

	)

2516 
	#GL_REG_9_ATI
 0x892A

	)

2517 
	#GL_REG_10_ATI
 0x892B

	)

2518 
	#GL_REG_11_ATI
 0x892C

	)

2519 
	#GL_REG_12_ATI
 0x892D

	)

2520 
	#GL_REG_13_ATI
 0x892E

	)

2521 
	#GL_REG_14_ATI
 0x892F

	)

2522 
	#GL_REG_15_ATI
 0x8930

	)

2523 
	#GL_REG_16_ATI
 0x8931

	)

2524 
	#GL_REG_17_ATI
 0x8932

	)

2525 
	#GL_REG_18_ATI
 0x8933

	)

2526 
	#GL_REG_19_ATI
 0x8934

	)

2527 
	#GL_REG_20_ATI
 0x8935

	)

2528 
	#GL_REG_21_ATI
 0x8936

	)

2529 
	#GL_REG_22_ATI
 0x8937

	)

2530 
	#GL_REG_23_ATI
 0x8938

	)

2531 
	#GL_REG_24_ATI
 0x8939

	)

2532 
	#GL_REG_25_ATI
 0x893A

	)

2533 
	#GL_REG_26_ATI
 0x893B

	)

2534 
	#GL_REG_27_ATI
 0x893C

	)

2535 
	#GL_REG_28_ATI
 0x893D

	)

2536 
	#GL_REG_29_ATI
 0x893E

	)

2537 
	#GL_REG_30_ATI
 0x893F

	)

2538 
	#GL_REG_31_ATI
 0x8940

	)

2539 
	#GL_CON_0_ATI
 0x8941

	)

2540 
	#GL_CON_1_ATI
 0x8942

	)

2541 
	#GL_CON_2_ATI
 0x8943

	)

2542 
	#GL_CON_3_ATI
 0x8944

	)

2543 
	#GL_CON_4_ATI
 0x8945

	)

2544 
	#GL_CON_5_ATI
 0x8946

	)

2545 
	#GL_CON_6_ATI
 0x8947

	)

2546 
	#GL_CON_7_ATI
 0x8948

	)

2547 
	#GL_CON_8_ATI
 0x8949

	)

2548 
	#GL_CON_9_ATI
 0x894A

	)

2549 
	#GL_CON_10_ATI
 0x894B

	)

2550 
	#GL_CON_11_ATI
 0x894C

	)

2551 
	#GL_CON_12_ATI
 0x894D

	)

2552 
	#GL_CON_13_ATI
 0x894E

	)

2553 
	#GL_CON_14_ATI
 0x894F

	)

2554 
	#GL_CON_15_ATI
 0x8950

	)

2555 
	#GL_CON_16_ATI
 0x8951

	)

2556 
	#GL_CON_17_ATI
 0x8952

	)

2557 
	#GL_CON_18_ATI
 0x8953

	)

2558 
	#GL_CON_19_ATI
 0x8954

	)

2559 
	#GL_CON_20_ATI
 0x8955

	)

2560 
	#GL_CON_21_ATI
 0x8956

	)

2561 
	#GL_CON_22_ATI
 0x8957

	)

2562 
	#GL_CON_23_ATI
 0x8958

	)

2563 
	#GL_CON_24_ATI
 0x8959

	)

2564 
	#GL_CON_25_ATI
 0x895A

	)

2565 
	#GL_CON_26_ATI
 0x895B

	)

2566 
	#GL_CON_27_ATI
 0x895C

	)

2567 
	#GL_CON_28_ATI
 0x895D

	)

2568 
	#GL_CON_29_ATI
 0x895E

	)

2569 
	#GL_CON_30_ATI
 0x895F

	)

2570 
	#GL_CON_31_ATI
 0x8960

	)

2571 
	#GL_MOV_ATI
 0x8961

	)

2572 
	#GL_ADD_ATI
 0x8963

	)

2573 
	#GL_MUL_ATI
 0x8964

	)

2574 
	#GL_SUB_ATI
 0x8965

	)

2575 
	#GL_DOT3_ATI
 0x8966

	)

2576 
	#GL_DOT4_ATI
 0x8967

	)

2577 
	#GL_MAD_ATI
 0x8968

	)

2578 
	#GL_LERP_ATI
 0x8969

	)

2579 
	#GL_CND_ATI
 0x896A

	)

2580 
	#GL_CND0_ATI
 0x896B

	)

2581 
	#GL_DOT2_ADD_ATI
 0x896C

	)

2582 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

2583 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

2584 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

2585 
	#GL_NUM_PASSES_ATI
 0x8970

	)

2586 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

2587 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

2588 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

2589 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

2590 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

2591 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

2592 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

2593 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

2594 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

2595 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

2596 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

2597 
	#GL_RED_BIT_ATI
 0x00000001

	)

2598 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

2599 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

2600 
	#GL_2X_BIT_ATI
 0x00000001

	)

2601 
	#GL_4X_BIT_ATI
 0x00000002

	)

2602 
	#GL_8X_BIT_ATI
 0x00000004

	)

2603 
	#GL_HALF_BIT_ATI
 0x00000008

	)

2604 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

2605 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

2606 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

2607 
	#GL_COMP_BIT_ATI
 0x00000002

	)

2608 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

2609 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

2612 #i‚de‡
GL_ATI_≤_åüngÀs


2613 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

2614 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

2615 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

2616 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

2617 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

2618 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

2619 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

2620 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

2621 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

2624 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


2625 
	#GL_STATIC_ATI
 0x8760

	)

2626 
	#GL_DYNAMIC_ATI
 0x8761

	)

2627 
	#GL_PRESERVE_ATI
 0x8762

	)

2628 
	#GL_DISCARD_ATI
 0x8763

	)

2629 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

2630 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

2631 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

2632 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

2635 #i‚de‡
GL_EXT_vîãx_shadî


2636 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

2637 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

2638 
	#GL_OP_INDEX_EXT
 0x8782

	)

2639 
	#GL_OP_NEGATE_EXT
 0x8783

	)

2640 
	#GL_OP_DOT3_EXT
 0x8784

	)

2641 
	#GL_OP_DOT4_EXT
 0x8785

	)

2642 
	#GL_OP_MUL_EXT
 0x8786

	)

2643 
	#GL_OP_ADD_EXT
 0x8787

	)

2644 
	#GL_OP_MADD_EXT
 0x8788

	)

2645 
	#GL_OP_FRAC_EXT
 0x8789

	)

2646 
	#GL_OP_MAX_EXT
 0x878A

	)

2647 
	#GL_OP_MIN_EXT
 0x878B

	)

2648 
	#GL_OP_SET_GE_EXT
 0x878C

	)

2649 
	#GL_OP_SET_LT_EXT
 0x878D

	)

2650 
	#GL_OP_CLAMP_EXT
 0x878E

	)

2651 
	#GL_OP_FLOOR_EXT
 0x878F

	)

2652 
	#GL_OP_ROUND_EXT
 0x8790

	)

2653 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

2654 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

2655 
	#GL_OP_POWER_EXT
 0x8793

	)

2656 
	#GL_OP_RECIP_EXT
 0x8794

	)

2657 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

2658 
	#GL_OP_SUB_EXT
 0x8796

	)

2659 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

2660 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

2661 
	#GL_OP_MOV_EXT
 0x8799

	)

2662 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

2663 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

2664 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

2665 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

2666 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

2667 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

2668 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

2669 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

2670 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

2671 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

2672 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

2673 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

2674 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

2675 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

2676 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

2677 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

2678 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

2679 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

2680 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

2681 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

2682 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

2683 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

2684 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

2685 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

2686 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

2687 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

2688 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

2689 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

2690 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

2691 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

2692 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

2693 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

2694 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

2695 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

2696 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

2697 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

2698 
	#GL_SCALAR_EXT
 0x87BE

	)

2699 
	#GL_VECTOR_EXT
 0x87BF

	)

2700 
	#GL_MATRIX_EXT
 0x87C0

	)

2701 
	#GL_VARIANT_EXT
 0x87C1

	)

2702 
	#GL_INVARIANT_EXT
 0x87C2

	)

2703 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

2704 
	#GL_LOCAL_EXT
 0x87C4

	)

2705 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

2706 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

2707 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

2708 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

2709 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

2710 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

2711 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

2712 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

2713 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

2714 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

2715 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

2716 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

2717 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

2718 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

2719 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

2720 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

2721 
	#GL_X_EXT
 0x87D5

	)

2722 
	#GL_Y_EXT
 0x87D6

	)

2723 
	#GL_Z_EXT
 0x87D7

	)

2724 
	#GL_W_EXT
 0x87D8

	)

2725 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

2726 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

2727 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

2728 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

2729 
	#GL_ZERO_EXT
 0x87DD

	)

2730 
	#GL_ONE_EXT
 0x87DE

	)

2731 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

2732 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

2733 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

2734 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

2735 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

2736 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

2737 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

2738 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

2739 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

2740 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

2741 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

2742 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

2743 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

2744 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

2745 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

2748 #i‚de‡
GL_ATI_vîãx_°ªams


2749 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

2750 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

2751 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

2752 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

2753 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

2754 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

2755 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

2756 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

2757 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

2758 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

2761 #i‚de‡
GL_ATI_ñemít_¨øy


2762 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

2763 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

2764 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

2767 #i‚de‡
GL_SUN_mesh_¨øy


2768 
	#GL_QUAD_MESH_SUN
 0x8614

	)

2769 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

2772 #i‚de‡
GL_SUN_¶i˚_accum


2773 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

2776 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


2777 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

2780 #i‚de‡
GL_NV_dïth_˛amp


2781 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

2784 #i‚de‡
GL_NV_oc˛usi⁄_quîy


2785 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

2786 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

2787 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

2788 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

2791 #i‚de‡
GL_NV_poöt_•rôe


2792 
	#GL_POINT_SPRITE_NV
 0x8861

	)

2793 
	#GL_COORD_REPLACE_NV
 0x8862

	)

2794 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

2797 #i‚de‡
GL_NV_ãxtuª_shadî3


2798 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

2799 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

2800 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

2801 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

2802 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

2803 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

2804 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

2805 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

2806 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

2807 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

2808 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

2809 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

2810 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

2811 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

2812 
	#GL_HILO8_NV
 0x885E

	)

2813 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

2814 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

2817 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


2820 #i‚de‡
GL_EXT_shadow_funcs


2823 #i‚de‡
GL_EXT_°ícû_two_side


2824 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

2825 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

2828 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


2829 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

2832 #i‚de‡
GL_APPLE_˛õ¡_°‹age


2833 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

2836 #i‚de‡
GL_APPLE_ñemít_¨øy


2837 
	#GL_ELEMENT_ARRAY_APPLE
 0x8768

	)

2838 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8769

	)

2839 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x876A

	)

2842 #i‚de‡
GL_APPLE_„n˚


2843 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

2844 
	#GL_FENCE_APPLE
 0x8A0B

	)

2847 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


2848 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

2851 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


2852 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

2853 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

2854 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

2855 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

2856 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

2857 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

2860 #i‚de‡
GL_APPLE_ycb¸_422


2861 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

2862 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

2863 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

2866 #i‚de‡
GL_S3_s3tc


2867 
	#GL_RGB_S3TC
 0x83A0

	)

2868 
	#GL_RGB4_S3TC
 0x83A1

	)

2869 
	#GL_RGBA_S3TC
 0x83A2

	)

2870 
	#GL_RGBA4_S3TC
 0x83A3

	)

2873 #i‚de‡
GL_ATI_døw_buf„rs


2874 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

2875 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

2876 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

2877 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

2878 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

2879 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

2880 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

2881 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

2882 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

2883 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

2884 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

2885 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

2886 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

2887 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

2888 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

2889 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

2890 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

2893 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


2894 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

2895 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

2898 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


2899 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

2900 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

2901 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

2904 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


2905 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

2906 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

2907 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

2908 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

2909 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

2910 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

2911 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

2912 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

2913 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

2914 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

2915 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

2916 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

2919 #i‚de‡
GL_NV_Êﬂt_buf„r


2920 
	#GL_FLOAT_R_NV
 0x8880

	)

2921 
	#GL_FLOAT_RG_NV
 0x8881

	)

2922 
	#GL_FLOAT_RGB_NV
 0x8882

	)

2923 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

2924 
	#GL_FLOAT_R16_NV
 0x8884

	)

2925 
	#GL_FLOAT_R32_NV
 0x8885

	)

2926 
	#GL_FLOAT_RG16_NV
 0x8886

	)

2927 
	#GL_FLOAT_RG32_NV
 0x8887

	)

2928 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

2929 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

2930 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

2931 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

2932 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

2933 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

2934 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

2937 #i‚de‡
GL_NV_‰agmít_¥ogøm


2938 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

2939 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

2940 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

2941 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

2942 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

2943 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

2946 #i‚de‡
GL_NV_hÆf_Êﬂt


2947 
	#GL_HALF_FLOAT_NV
 0x140B

	)

2950 #i‚de‡
GL_NV_pixñ_d©a_ønge


2951 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

2952 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

2953 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

2954 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

2955 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

2956 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

2959 #i‚de‡
GL_NV_¥imôive_ª°¨t


2960 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

2961 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

2964 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


2965 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

2968 #i‚de‡
GL_NV_vîãx_¥ogøm2


2971 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


2974 #i‚de‡
GL_ATI_£∑øã_°ícû


2975 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

2976 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

2977 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

2978 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

2981 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


2984 #i‚de‡
GL_OES_ªad_f‹m©


2985 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

2986 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

2989 #i‚de‡
GL_EXT_dïth_bounds_ã°


2990 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

2991 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

2994 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


2995 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

2996 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

2997 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

3000 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


3001 
	#GL_BLEND_EQUATION_RGB_EXT
 
GL_BLEND_EQUATION


	)

3002 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

3005 #i‚de‡
GL_MESA_∑ck_övît


3006 
	#GL_PACK_INVERT_MESA
 0x8758

	)

3009 #i‚de‡
GL_MESA_ycb¸_ãxtuª


3010 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

3011 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

3012 
	#GL_YCBCR_MESA
 0x8757

	)

3015 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


3016 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

3017 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

3018 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

3019 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

3022 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


3025 #i‚de‡
GL_NV_‰agmít_¥ogøm2


3026 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

3027 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

3028 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

3029 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

3030 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

3033 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


3038 #i‚de‡
GL_NV_vîãx_¥ogøm3


3042 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


3043 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

3044 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

3045 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

3046 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

3047 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

3048 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

3049 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

3050 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

3051 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

3052 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

3053 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

3054 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

3055 
	#GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
 0x8CD8

	)

3056 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

3057 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

3058 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

3059 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

3060 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

3061 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

3062 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

3063 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

3064 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

3065 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

3066 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

3067 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

3068 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

3069 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

3070 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

3071 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

3072 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

3073 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

3074 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

3075 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

3076 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

3077 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

3078 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

3079 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

3080 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

3081 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

3082 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

3083 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

3084 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

3085 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

3086 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

3087 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

3088 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

3089 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

3090 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

3091 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

3092 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

3093 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

3094 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

3097 #i‚de‡
GL_GREMEDY_°rög_m¨kî


3103 
	~<°ddef.h
>

3104 #i‚de‡
GL_VERSION_2_0


3106 
	tGLch¨
;

3109 #i‚de‡
GL_VERSION_1_5


3111 #ifde‡
__APPLE__


3112 
	tGLöçå
;

3113 
	tGLsizeùå
;

3115 
±rdiff_t
 
	tGLöçå
;

3116 
±rdiff_t
 
	tGLsizeùå
;

3120 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


3122 #ifde‡
__APPLE__


3123 
	tGLöçåARB
;

3124 
	tGLsizeùåARB
;

3126 
±rdiff_t
 
	tGLöçåARB
;

3127 
±rdiff_t
 
	tGLsizeùåARB
;

3131 #i‚de‡
GL_ARB_shadî_obje˘s


3133 
	tGLch¨ARB
;

3134 #i‡
deföed
(
__APPLE__
)

3135 *
	tGLh™dÀARB
;

3137 
	tGLh™dÀARB
;

3142 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3143 
	tGLhÆfARB
;

3146 #i‚de‡
GL_NV_hÆf_Êﬂt


3147 
	tGLhÆfNV
;

3150 #i‚de‡
GL_VERSION_1_2


3151 
	#GL_VERSION_1_2
 1

	)

3152 #ifde‡
GL_GLEXT_PROTOTYPES


3153 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

3154 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
);

3155 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

3156 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3157 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3158 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3159 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3160 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3161 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3162 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3163 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3164 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

3165 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3166 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3167 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
, GLíum, 
GLÊﬂt
);

3168 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3169 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
, GLíum, 
GLöt
);

3170 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3171 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3172 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

3173 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3174 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3175 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3176 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

3177 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

3178 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3179 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3180 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3181 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3182 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3183 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3184 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

3185 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
, GLíum, 
GLboﬁón
);

3186 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
);

3187 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
);

3188 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

3189 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3190 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

3192 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

3193 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

3194 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

3195 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

3196 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3197 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3198 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3199 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

3200 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3201 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3202 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

3203 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3204 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3205 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3206 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3207 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3208 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3209 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3210 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3211 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3212 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

3213 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3214 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3215 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

3216 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

3217 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3218 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3219 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3220 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3221 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3222 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3223 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3224 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3225 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3226 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3227 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3228 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3229 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3232 #i‚de‡
GL_VERSION_1_3


3233 
	#GL_VERSION_1_3
 1

	)

3234 #ifde‡
GL_GLEXT_PROTOTYPES


3235 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
);

3236 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
);

3237 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
, 
GLdoubÀ
);

3238 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3239 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
, 
GLÊﬂt
);

3240 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3241 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
, 
GLöt
);

3242 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
, c⁄° 
GLöt
 *);

3243 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
, 
GLsh‹t
);

3244 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3245 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3246 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3247 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3248 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3249 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
, 
GLöt
, GLint);

3250 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
, c⁄° 
GLöt
 *);

3251 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
, 
GLsh‹t
, GLshort);

3252 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3253 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3254 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3255 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3256 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3257 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
, 
GLöt
, GLint, GLint);

3258 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
, c⁄° 
GLöt
 *);

3259 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3260 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3261 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3262 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3263 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3264 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3265 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3266 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
, c⁄° 
GLöt
 *);

3267 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3268 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3269 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3270 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3271 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3272 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3273 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
, 
GLboﬁón
);

3274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3276 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3277 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3278 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3279 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3280 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3282 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3283 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3284 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3285 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3286 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3287 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3288 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3289 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3290 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3291 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3292 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3293 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3294 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3295 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3296 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3297 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3298 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3299 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3300 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3301 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3302 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3303 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3304 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3305 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3306 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3307 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3308 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3309 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3310 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3311 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3312 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3313 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3314 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3315 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3316 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3317 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3318 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3319 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3320 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3321 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3322 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3323 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3324 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3325 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3326 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3327 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3330 #i‚de‡
GL_VERSION_1_4


3331 
	#GL_VERSION_1_4
 1

	)

3332 #ifde‡
GL_GLEXT_PROTOTYPES


3333 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3334 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
);

3335 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *);

3336 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
);

3337 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *);

3338 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3339 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

3340 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

3341 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
, 
GLÊﬂt
);

3342 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3343 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
, 
GLöt
);

3344 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
, c⁄° 
GLöt
 *);

3345 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
, GLbyte, GLbyte);

3346 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *);

3347 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3348 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *);

3349 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3350 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *);

3351 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
, GLint, GLint);

3352 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *);

3353 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
, GLshort, GLshort);

3354 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *);

3355 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
, GLubyte, GLubyte);

3356 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *);

3357 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
, GLuint, GLuint);

3358 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *);

3359 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
, GLushort, GLushort);

3360 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *);

3361 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3362 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
, GLdouble);

3363 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *);

3364 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
, GLfloat);

3365 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *);

3366 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
, GLint);

3367 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *);

3368 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
, GLshort);

3369 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *);

3370 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3371 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *);

3372 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3373 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *);

3374 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
, GLint, GLint);

3375 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *);

3376 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
, GLshort, GLshort);

3377 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *);

3379 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

3380 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

3381 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

3382 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

3383 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

3384 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3385 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

3386 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3387 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3388 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3389 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3390 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

3392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

3393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

3394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

3396 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3397 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

3398 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3399 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

3400 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3401 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

3402 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

3403 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

3404 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

3405 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

3406 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

3407 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3408 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3409 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3410 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3411 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3412 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3413 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3414 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3415 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3416 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3417 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3418 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3419 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3420 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3421 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3422 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3423 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3426 #i‚de‡
GL_VERSION_1_5


3427 
	#GL_VERSION_1_5
 1

	)

3428 #ifde‡
GL_GLEXT_PROTOTYPES


3429 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
, 
GLuöt
 *);

3430 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3431 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
);

3432 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
, 
GLuöt
);

3433 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
);

3434 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
, GLíum, 
GLöt
 *);

3435 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3436 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
, 
GLíum
, GLuint *);

3437 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
, 
GLuöt
);

3438 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3439 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
, 
GLuöt
 *);

3440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
);

3441 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
, 
GLsizeùå
, c⁄° 
GLvoid
 *, GLenum);

3442 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

3443 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

3444 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
, GLenum);

3445 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
);

3446 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3447 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
, GLíum, 
GLvoid
* *);

3449 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3450 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

3452 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3453 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

3454 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3455 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3456 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3457 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

3458 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

3459 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

3460 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

3461 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

3462 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

3463 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

3464 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

3465 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

3466 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3467 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

3470 #i‚de‡
GL_VERSION_2_0


3471 
	#GL_VERSION_2_0
 1

	)

3472 #ifde‡
GL_GLEXT_PROTOTYPES


3473 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
, GLenum);

3474 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
, c⁄° 
GLíum
 *);

3475 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3476 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

3477 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
, 
GLuöt
);

3478 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
, GLuint);

3479 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

3480 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
);

3481 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

3482 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
);

3483 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
);

3484 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
);

3485 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
, GLuint);

3486 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
);

3487 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
);

3488 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3489 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3490 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
, 
GLsizei
, GLsizei *, GLuint *);

3491 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3492 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3493 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3494 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3495 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3496 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3497 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3498 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
 *);

3499 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
, 
GLöt
, GLint *);

3500 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3501 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3502 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3503 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3504 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
);

3505 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
);

3506 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
);

3507 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, c⁄° 
GLöt
 *);

3508 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
);

3509 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
, 
GLÊﬂt
);

3510 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
, 
GLÊﬂt
, GLfloat);

3511 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3512 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3513 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
, GLint);

3514 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
, GLint, GLint);

3515 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
, GLint, GLint, GLint);

3516 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
, GLint, GLint, GLint, GLint);

3517 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3518 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3519 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3520 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3521 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
, 
GLsizei
, const GLint *);

3522 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
, 
GLsizei
, const GLint *);

3523 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
, 
GLsizei
, const GLint *);

3524 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
, 
GLsizei
, const GLint *);

3525 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3526 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3527 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3528 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
);

3529 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
, 
GLdoubÀ
);

3530 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3531 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
, 
GLÊﬂt
);

3532 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3533 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
, 
GLsh‹t
);

3534 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3535 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3536 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3537 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3538 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3539 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
, 
GLsh‹t
, GLshort);

3540 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3541 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3542 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3543 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3544 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3545 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3546 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3547 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3548 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
, c⁄° 
GLöt
 *);

3549 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3550 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3551 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3552 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
, const GLuint *);

3553 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3554 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3555 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3556 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3557 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3558 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3559 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

3560 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3561 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3562 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3563 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
, const GLuint *);

3564 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3565 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3567 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3568 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3569 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

3570 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

3571 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

3572 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3573 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

3574 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3575 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

3576 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

3577 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3578 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3579 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3580 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3581 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3582 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3583 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3584 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

3585 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3586 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3587 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3588 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3589 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3590 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

3591 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3592 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

3593 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

3594 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

3595 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3596 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3597 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

3598 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3599 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3600 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3601 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

3602 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3603 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

3604 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

3605 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

3606 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

3607 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

3608 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

3609 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

3610 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

3611 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3612 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3613 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3614 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3615 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3616 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3617 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3618 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3619 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3620 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3621 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3622 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3623 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3624 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3625 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3626 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3627 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3628 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3629 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3630 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3631 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3632 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3633 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3634 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3635 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3636 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3637 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3638 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3639 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3640 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3641 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3642 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3643 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3644 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3645 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3646 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3647 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3648 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3649 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3654 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

3655 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3656 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3657 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3658 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3659 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3662 #i‚de‡
GL_ARB_mu…ôextuª


3663 
	#GL_ARB_mu…ôextuª
 1

	)

3664 #ifde‡
GL_GLEXT_PROTOTYPES


3665 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
);

3666 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
);

3667 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
, 
GLdoubÀ
);

3668 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3669 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
, 
GLÊﬂt
);

3670 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3671 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
, 
GLöt
);

3672 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3673 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
, 
GLsh‹t
);

3674 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3675 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3676 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3677 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3678 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3679 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
, 
GLöt
, GLint);

3680 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3681 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
, 
GLsh‹t
, GLshort);

3682 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3683 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3684 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3685 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3686 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3687 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
, 
GLöt
, GLint, GLint);

3688 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3689 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3690 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3691 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3692 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3693 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3694 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3695 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3696 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3697 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3698 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3700 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3701 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3702 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3703 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3704 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3705 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3706 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3707 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3708 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3709 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3710 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3711 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3712 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3713 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3714 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3715 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3716 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3717 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3718 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3719 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3720 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3721 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3722 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3723 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3724 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3725 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3726 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3727 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3728 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3736 #i‚de‡
GL_ARB_å™•o£_m©rix


3737 
	#GL_ARB_å™•o£_m©rix
 1

	)

3738 #ifde‡
GL_GLEXT_PROTOTYPES


3739 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3740 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3741 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3742 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3744 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3745 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3746 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3747 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3750 #i‚de‡
GL_ARB_mu…ißm∂e


3751 
	#GL_ARB_mu…ißm∂e
 1

	)

3752 #ifde‡
GL_GLEXT_PROTOTYPES


3753 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GL˛ampf
, 
GLboﬁón
);

3755 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3758 #i‚de‡
GL_ARB_ãxtuª_ív_add


3759 
	#GL_ARB_ãxtuª_ív_add
 1

	)

3762 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


3763 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

3766 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


3767 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

3768 #ifde‡
GL_GLEXT_PROTOTYPES


3769 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3770 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3771 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3772 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3773 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3774 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3775 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3777 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3778 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3779 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3780 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3781 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3782 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3783 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3786 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


3787 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

3790 #i‚de‡
GL_ARB_poöt_∑ømëîs


3791 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3792 #ifde‡
GL_GLEXT_PROTOTYPES


3793 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
, 
GLÊﬂt
);

3794 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3796 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3797 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3800 #i‚de‡
GL_ARB_vîãx_bÀnd


3801 
	#GL_ARB_vîãx_bÀnd
 1

	)

3802 #ifde‡
GL_GLEXT_PROTOTYPES


3803 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
, c⁄° 
GLbyã
 *);

3804 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
, c⁄° 
GLsh‹t
 *);

3805 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
, const GLint *);

3806 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
, c⁄° 
GLÊﬂt
 *);

3807 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
, c⁄° 
GLdoubÀ
 *);

3808 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3809 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3810 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3811 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3812 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
);

3814 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

3815 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

3816 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

3817 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

3818 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

3819 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

3820 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

3821 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

3822 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3823 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

3826 #i‚de‡
GL_ARB_m©rix_∑Àâe


3827 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3828 #ifde‡
GL_GLEXT_PROTOTYPES


3829 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
);

3830 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3831 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3832 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3833 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3835 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3836 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3837 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3838 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3839 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3842 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


3843 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

3846 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


3847 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

3850 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


3851 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

3854 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


3855 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

3858 #i‚de‡
GL_ARB_dïth_ãxtuª


3859 
	#GL_ARB_dïth_ãxtuª
 1

	)

3862 #i‚de‡
GL_ARB_shadow


3863 
	#GL_ARB_shadow
 1

	)

3866 #i‚de‡
GL_ARB_shadow_ambõ¡


3867 
	#GL_ARB_shadow_ambõ¡
 1

	)

3870 #i‚de‡
GL_ARB_wödow_pos


3871 
	#GL_ARB_wödow_pos
 1

	)

3872 #ifde‡
GL_GLEXT_PROTOTYPES


3873 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
, GLdouble);

3874 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *);

3875 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
, GLfloat);

3876 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *);

3877 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
, GLint);

3878 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *);

3879 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
, GLshort);

3880 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *);

3881 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
, GLdouble, GLdouble);

3882 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *);

3883 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
, GLfloat, GLfloat);

3884 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *);

3885 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
, GLint, GLint);

3886 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *);

3887 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
, GLshort, GLshort);

3888 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *);

3890 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3891 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3892 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3893 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3894 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3895 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3896 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3897 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3898 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3899 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3900 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3901 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3902 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3903 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3904 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3905 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3908 #i‚de‡
GL_ARB_vîãx_¥ogøm


3909 
	#GL_ARB_vîãx_¥ogøm
 1

	)

3910 #ifde‡
GL_GLEXT_PROTOTYPES


3911 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
, 
GLdoubÀ
);

3912 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3913 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
, 
GLÊﬂt
);

3914 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3915 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
, 
GLsh‹t
);

3916 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3917 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3918 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3919 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3920 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3921 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
, 
GLsh‹t
, GLshort);

3922 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3923 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3924 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3925 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3926 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3927 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3928 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3929 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3930 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3931 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3932 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3933 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3934 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
, const GLuint *);

3935 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3936 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3937 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3938 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3939 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3940 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3941 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3942 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3943 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3944 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3945 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
, const GLuint *);

3946 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3947 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3948 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
);

3949 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
);

3950 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

3951 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
, 
GLuöt
);

3952 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

3953 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
, 
GLuöt
 *);

3954 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3955 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3956 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3957 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3958 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3959 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3960 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3961 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3962 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3963 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3964 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3965 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3966 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
, GLíum, 
GLöt
 *);

3967 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
, GLíum, 
GLvoid
 *);

3968 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3969 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3970 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3971 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3972 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
);

3974 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3975 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3976 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3977 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3978 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3979 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3980 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3981 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3982 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3983 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3984 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3985 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3986 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3987 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3988 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3989 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3990 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3991 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3992 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3993 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3994 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3995 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3996 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3997 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3998 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3999 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4000 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4001 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4002 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4003 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4004 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4005 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4006 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4007 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4008 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4009 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4010 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4011 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4012 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4013 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

4014 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

4015 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

4016 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

4017 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4018 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4019 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4020 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4021 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4022 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4023 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4024 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4025 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4026 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4027 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4028 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4029 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4030 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

4031 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4032 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4033 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4034 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4035 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4038 #i‚de‡
GL_ARB_‰agmít_¥ogøm


4039 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

4043 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4044 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4045 #ifde‡
GL_GLEXT_PROTOTYPES


4046 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
, 
GLuöt
);

4047 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4048 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
, 
GLuöt
 *);

4049 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
);

4050 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *, GLenum);

4051 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *);

4052 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, 
GLvoid
 *);

4053 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
, GLenum);

4054 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
);

4055 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4056 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
, GLíum, 
GLvoid
* *);

4058 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4059 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4060 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4061 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4062 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4063 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4064 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4065 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4066 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4067 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4068 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4071 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4072 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4073 #ifde‡
GL_GLEXT_PROTOTYPES


4074 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
, 
GLuöt
 *);

4075 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4076 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
);

4077 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
, 
GLuöt
);

4078 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
);

4079 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4080 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4081 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
, 
GLíum
, GLuint *);

4083 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4084 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4085 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4086 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4087 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4088 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4089 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4090 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4093 #i‚de‡
GL_ARB_shadî_obje˘s


4094 
	#GL_ARB_shadî_obje˘s
 1

	)

4095 #ifde‡
GL_GLEXT_PROTOTYPES


4096 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
);

4097 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
);

4098 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4099 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
);

4100 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, c⁄° 
GLch¨ARB
* *, c⁄° 
GLöt
 *);

4101 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
);

4102 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4103 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4104 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
);

4105 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
);

4106 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
);

4107 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
, 
GLÊﬂt
);

4108 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4109 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4110 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4111 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
, GLint);

4112 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
, GLint, GLint);

4113 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
, GLint, GLint, GLint);

4114 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
, GLint, GLint, GLint, GLint);

4115 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4116 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4117 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4118 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4119 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4120 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4121 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4122 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4123 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4124 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4125 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4126 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
, 
GLíum
, 
GLÊﬂt
 *);

4127 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
, 
GLíum
, 
GLöt
 *);

4128 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4129 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizei *, GLhandleARB *);

4130 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4131 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4132 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
, 
GLöt
, 
GLÊﬂt
 *);

4133 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
, 
GLöt
, GLint *);

4134 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4136 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4137 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4138 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4139 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4140 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4141 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4142 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4143 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4144 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4145 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4146 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4147 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4148 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4149 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4150 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4151 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4152 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4153 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4154 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4155 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4156 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4157 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4158 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4159 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4160 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4161 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4162 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4163 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4164 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4165 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4166 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4167 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4168 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4169 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4170 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4171 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4172 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4173 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4174 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4177 #i‚de‡
GL_ARB_vîãx_shadî


4178 
	#GL_ARB_vîãx_shadî
 1

	)

4179 #ifde‡
GL_GLEXT_PROTOTYPES


4180 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
, 
GLuöt
, c⁄° 
GLch¨ARB
 *);

4181 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4182 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4184 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4185 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4186 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4189 #i‚de‡
GL_ARB_‰agmít_shadî


4190 
	#GL_ARB_‰agmít_shadî
 1

	)

4193 #i‚de‡
GL_ARB_shadög_œnguage_100


4194 
	#GL_ARB_shadög_œnguage_100
 1

	)

4197 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4198 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4201 #i‚de‡
GL_ARB_poöt_•rôe


4202 
	#GL_ARB_poöt_•rôe
 1

	)

4205 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


4206 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

4209 #i‚de‡
GL_ARB_døw_buf„rs


4210 
	#GL_ARB_døw_buf„rs
 1

	)

4211 #ifde‡
GL_GLEXT_PROTOTYPES


4212 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
, c⁄° 
GLíum
 *);

4214 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4217 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4218 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4221 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


4222 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

4223 #ifde‡
GL_GLEXT_PROTOTYPES


4224 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
, GLenum);

4226 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

4229 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4230 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

4233 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4234 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4237 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4238 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4241 #i‚de‡
GL_EXT_abgr


4242 
	#GL_EXT_abgr
 1

	)

4245 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


4246 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

4247 #ifde‡
GL_GLEXT_PROTOTYPES


4248 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

4250 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

4253 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


4254 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

4255 #ifde‡
GL_GLEXT_PROTOTYPES


4256 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
, GLfloat);

4258 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

4261 #i‚de‡
GL_EXT_ãxtuª


4262 
	#GL_EXT_ãxtuª
 1

	)

4265 #i‚de‡
GL_EXT_ãxtuª3D


4266 
	#GL_EXT_ãxtuª3D
 1

	)

4267 #ifde‡
GL_GLEXT_PROTOTYPES


4268 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4269 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4271 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4272 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4275 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


4276 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

4277 #ifde‡
GL_GLEXT_PROTOTYPES


4278 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4279 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4281 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

4282 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4285 #i‚de‡
GL_EXT_subãxtuª


4286 
	#GL_EXT_subãxtuª
 1

	)

4287 #ifde‡
GL_GLEXT_PROTOTYPES


4288 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4289 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4291 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4292 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4295 #i‚de‡
GL_EXT_c›y_ãxtuª


4296 
	#GL_EXT_c›y_ãxtuª
 1

	)

4297 #ifde‡
GL_GLEXT_PROTOTYPES


4298 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

4299 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

4300 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

4301 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4302 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4304 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

4305 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

4306 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4307 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4308 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4311 #i‚de‡
GL_EXT_hi°ogøm


4312 
	#GL_EXT_hi°ogøm
 1

	)

4313 #ifde‡
GL_GLEXT_PROTOTYPES


4314 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4315 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4316 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4317 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4318 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4319 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4320 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

4321 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
, GLíum, 
GLboﬁón
);

4322 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
);

4323 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
);

4325 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4326 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4327 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4328 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4329 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4330 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4331 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4332 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4333 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4334 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4337 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


4338 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

4339 #ifde‡
GL_GLEXT_PROTOTYPES


4340 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4341 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4342 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4343 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4344 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4345 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4346 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4347 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

4348 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4349 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4350 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4351 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

4352 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

4354 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4355 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4356 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4357 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4358 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4359 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4360 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4361 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4362 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4363 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4364 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4365 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4366 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4369 #i‚de‡
GL_EXT_cﬁ‹_m©rix


4370 
	#GL_EXT_cﬁ‹_m©rix
 1

	)

4373 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


4374 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

4375 #ifde‡
GL_GLEXT_PROTOTYPES


4376 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4377 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4378 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4379 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4380 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4381 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4382 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, 
GLöt
 *);

4384 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4385 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4386 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4387 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4388 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4389 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4390 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4393 #i‚de‡
GL_SGIX_pixñ_ãxtuª


4394 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

4395 #ifde‡
GL_GLEXT_PROTOTYPES


4396 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
);

4398 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

4401 #i‚de‡
GL_SGIS_pixñ_ãxtuª


4402 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

4403 #ifde‡
GL_GLEXT_PROTOTYPES


4404 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
, 
GLöt
);

4405 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
, c⁄° 
GLöt
 *);

4406 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4407 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4408 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
, 
GLöt
 *);

4409 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4411 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4412 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4413 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4414 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4415 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4416 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4419 #i‚de‡
GL_SGIS_ãxtuª4D


4420 
	#GL_SGIS_ãxtuª4D
 1

	)

4421 #ifde‡
GL_GLEXT_PROTOTYPES


4422 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4423 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4425 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4426 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4429 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


4430 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

4433 #i‚de‡
GL_EXT_cmyka


4434 
	#GL_EXT_cmyka
 1

	)

4437 #i‚de‡
GL_EXT_ãxtuª_obje˘


4438 
	#GL_EXT_ãxtuª_obje˘
 1

	)

4439 #ifde‡
GL_GLEXT_PROTOTYPES


4440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

4441 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
, 
GLuöt
);

4442 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

4443 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
, 
GLuöt
 *);

4444 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
);

4445 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, c⁄° 
GL˛ampf
 *);

4447 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

4448 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

4449 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

4450 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

4451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

4452 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

4455 #i‚de‡
GL_SGIS_dëaû_ãxtuª


4456 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

4457 #ifde‡
GL_GLEXT_PROTOTYPES


4458 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4459 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4461 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4462 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4465 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


4466 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

4467 #ifde‡
GL_GLEXT_PROTOTYPES


4468 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4469 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4471 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4472 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4475 #i‚de‡
GL_EXT_∑cked_pixñs


4476 
	#GL_EXT_∑cked_pixñs
 1

	)

4479 #i‚de‡
GL_SGIS_ãxtuª_lod


4480 
	#GL_SGIS_ãxtuª_lod
 1

	)

4483 #i‚de‡
GL_SGIS_mu…ißm∂e


4484 
	#GL_SGIS_mu…ißm∂e
 1

	)

4485 #ifde‡
GL_GLEXT_PROTOTYPES


4486 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
, 
GLboﬁón
);

4487 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
);

4489 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4490 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

4493 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


4494 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

4497 #i‚de‡
GL_EXT_vîãx_¨øy


4498 
	#GL_EXT_vîãx_¨øy
 1

	)

4499 #ifde‡
GL_GLEXT_PROTOTYPES


4500 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
);

4501 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4502 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
, 
GLöt
, 
GLsizei
);

4503 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
, GLsizei, c⁄° 
GLboﬁón
 *);

4504 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
, 
GLvoid
* *);

4505 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4506 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4507 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4508 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4510 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

4511 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4512 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4513 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

4514 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4515 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4516 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4517 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4518 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4521 #i‚de‡
GL_EXT_misc_©åibuã


4522 
	#GL_EXT_misc_©åibuã
 1

	)

4525 #i‚de‡
GL_SGIS_gíî©e_mùm≠


4526 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

4529 #i‚de‡
GL_SGIX_˛ùm≠


4530 
	#GL_SGIX_˛ùm≠
 1

	)

4533 #i‚de‡
GL_SGIX_shadow


4534 
	#GL_SGIX_shadow
 1

	)

4537 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


4538 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

4541 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


4542 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

4545 #i‚de‡
GL_EXT_bÀnd_mömax


4546 
	#GL_EXT_bÀnd_mömax
 1

	)

4547 #ifde‡
GL_GLEXT_PROTOTYPES


4548 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
);

4550 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

4553 #i‚de‡
GL_EXT_bÀnd_subåa˘


4554 
	#GL_EXT_bÀnd_subåa˘
 1

	)

4557 #i‚de‡
GL_EXT_bÀnd_logic_›


4558 
	#GL_EXT_bÀnd_logic_›
 1

	)

4561 #i‚de‡
GL_SGIX_öãæa˚


4562 
	#GL_SGIX_öãæa˚
 1

	)

4565 #i‚de‡
GL_SGIX_pixñ_tûes


4566 
	#GL_SGIX_pixñ_tûes
 1

	)

4569 #i‚de‡
GL_SGIX_ãxtuª_£À˘


4570 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

4573 #i‚de‡
GL_SGIX_•rôe


4574 
	#GL_SGIX_•rôe
 1

	)

4575 #ifde‡
GL_GLEXT_PROTOTYPES


4576 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
, 
GLÊﬂt
);

4577 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4578 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
, 
GLöt
);

4579 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4581 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4582 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4583 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4584 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4587 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


4588 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

4591 #i‚de‡
GL_EXT_poöt_∑ømëîs


4592 
	#GL_EXT_poöt_∑ømëîs
 1

	)

4593 #ifde‡
GL_GLEXT_PROTOTYPES


4594 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
, 
GLÊﬂt
);

4595 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4597 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4598 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4601 #i‚de‡
GL_SGIS_poöt_∑ømëîs


4602 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

4603 #ifde‡
GL_GLEXT_PROTOTYPES


4604 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4605 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4607 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4608 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4611 #i‚de‡
GL_SGIX_ö°rumíts


4612 
	#GL_SGIX_ö°rumíts
 1

	)

4613 #ifde‡
GL_GLEXT_PROTOTYPES


4614 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

4615 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
, 
GLöt
 *);

4616 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLint *);

4617 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
);

4618 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

4619 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
);

4621 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

4622 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

4623 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

4624 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4625 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

4626 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4629 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


4630 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

4633 #i‚de‡
GL_SGIX_‰amezoom


4634 
	#GL_SGIX_‰amezoom
 1

	)

4635 #ifde‡
GL_GLEXT_PROTOTYPES


4636 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
);

4638 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

4641 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


4642 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

4643 #ifde‡
GL_GLEXT_PROTOTYPES


4644 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

4646 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

4649 #i‚de‡
GL_SGIX_pﬁynomül_ffd


4650 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

4651 #ifde‡
GL_GLEXT_PROTOTYPES


4652 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

4653 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

4654 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
);

4655 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
);

4657 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

4658 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

4659 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4660 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4663 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


4664 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

4665 #ifde‡
GL_GLEXT_PROTOTYPES


4666 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *);

4668 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

4671 #i‚de‡
GL_SGIX_Êush_ø°î


4672 
	#GL_SGIX_Êush_ø°î
 1

	)

4673 #ifde‡
GL_GLEXT_PROTOTYPES


4674 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

4676 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

4679 #i‚de‡
GL_SGIX_dïth_ãxtuª


4680 
	#GL_SGIX_dïth_ãxtuª
 1

	)

4683 #i‚de‡
GL_SGIS_fog_fun˘i⁄


4684 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

4685 #ifde‡
GL_GLEXT_PROTOTYPES


4686 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
, c⁄° 
GLÊﬂt
 *);

4687 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *);

4689 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4690 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

4693 #i‚de‡
GL_SGIX_fog_off£t


4694 
	#GL_SGIX_fog_off£t
 1

	)

4697 #i‚de‡
GL_HP_image_å™sf‹m


4698 
	#GL_HP_image_å™sf‹m
 1

	)

4699 #ifde‡
GL_GLEXT_PROTOTYPES


4700 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
, GLíum, 
GLöt
);

4701 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
, GLíum, 
GLÊﬂt
);

4702 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4703 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4704 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, 
GLöt
 *);

4705 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4707 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4708 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4709 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4710 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4711 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4712 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4715 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


4716 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

4719 #i‚de‡
GL_SGIX_ãxtuª_add_ív


4720 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

4723 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


4724 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

4725 #ifde‡
GL_GLEXT_PROTOTYPES


4726 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4727 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

4729 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4730 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4733 #i‚de‡
GL_PGI_vîãx_höts


4734 
	#GL_PGI_vîãx_höts
 1

	)

4737 #i‚de‡
GL_PGI_misc_höts


4738 
	#GL_PGI_misc_höts
 1

	)

4739 #ifde‡
GL_GLEXT_PROTOTYPES


4740 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
, 
GLöt
);

4742 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

4745 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


4746 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

4747 #ifde‡
GL_GLEXT_PROTOTYPES


4748 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4749 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4750 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4751 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4753 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4754 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

4755 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4756 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4759 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


4760 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

4763 #i‚de‡
GL_SGIX_li°_¥i‹ôy


4764 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

4765 #ifde‡
GL_GLEXT_PROTOTYPES


4766 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4767 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4768 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
);

4769 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLÊﬂt
 *);

4770 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
);

4771 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLöt
 *);

4773 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4774 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4775 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4776 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4777 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4778 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4781 #i‚de‡
GL_SGIX_ú_ö°rumít1


4782 
	#GL_SGIX_ú_ö°rumít1
 1

	)

4785 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


4786 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

4789 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


4790 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

4793 #i‚de‡
GL_SGIX_shadow_ambõ¡


4794 
	#GL_SGIX_shadow_ambõ¡
 1

	)

4797 #i‚de‡
GL_EXT_ödex_ãxtuª


4798 
	#GL_EXT_ödex_ãxtuª
 1

	)

4801 #i‚de‡
GL_EXT_ödex_m©îül


4802 
	#GL_EXT_ödex_m©îül
 1

	)

4803 #ifde‡
GL_GLEXT_PROTOTYPES


4804 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
, GLenum);

4806 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4809 #i‚de‡
GL_EXT_ödex_func


4810 
	#GL_EXT_ödex_func
 1

	)

4811 #ifde‡
GL_GLEXT_PROTOTYPES


4812 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
, 
GL˛ampf
);

4814 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

4817 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


4818 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

4821 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


4822 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

4823 #ifde‡
GL_GLEXT_PROTOTYPES


4824 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
, 
GLsizei
);

4825 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

4827 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4828 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

4831 #i‚de‡
GL_EXT_cuŒ_vîãx


4832 
	#GL_EXT_cuŒ_vîãx
 1

	)

4833 #ifde‡
GL_GLEXT_PROTOTYPES


4834 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
, 
GLdoubÀ
 *);

4835 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
, 
GLÊﬂt
 *);

4837 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4838 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4841 #i‚de‡
GL_SGIX_y¸cb


4842 
	#GL_SGIX_y¸cb
 1

	)

4845 #i‚de‡
GL_SGIX_‰agmít_lightög


4846 
	#GL_SGIX_‰agmít_lightög
 1

	)

4847 #ifde‡
GL_GLEXT_PROTOTYPES


4848 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
, GLenum);

4849 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4850 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4851 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
, GLíum, 
GLöt
);

4852 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4853 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
, 
GLÊﬂt
);

4854 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4855 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
, 
GLöt
);

4856 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4857 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4858 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4859 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
, GLíum, 
GLöt
);

4860 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4861 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4862 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4863 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4864 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4865 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
, 
GLöt
);

4867 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4868 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4869 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4870 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4871 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4872 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4873 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4874 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4875 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4876 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4877 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4878 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4879 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4880 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4881 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4882 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4883 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4884 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4887 #i‚de‡
GL_IBM_ø°îpos_˛ù


4888 
	#GL_IBM_ø°îpos_˛ù
 1

	)

4891 #i‚de‡
GL_HP_ãxtuª_lightög


4892 
	#GL_HP_ãxtuª_lightög
 1

	)

4895 #i‚de‡
GL_EXT_døw_ønge_ñemíts


4896 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

4897 #ifde‡
GL_GLEXT_PROTOTYPES


4898 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

4900 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

4903 #i‚de‡
GL_WIN_ph⁄g_shadög


4904 
	#GL_WIN_ph⁄g_shadög
 1

	)

4907 #i‚de‡
GL_WIN_•ecuœr_fog


4908 
	#GL_WIN_•ecuœr_fog
 1

	)

4911 #i‚de‡
GL_EXT_light_ãxtuª


4912 
	#GL_EXT_light_ãxtuª
 1

	)

4913 #ifde‡
GL_GLEXT_PROTOTYPES


4914 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
);

4915 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
);

4916 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
, GLenum);

4918 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

4919 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

4920 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4923 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


4924 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

4927 #i‚de‡
GL_EXT_bgø


4928 
	#GL_EXT_bgø
 1

	)

4931 #i‚de‡
GL_SGIX_async


4932 
	#GL_SGIX_async
 1

	)

4933 #ifde‡
GL_GLEXT_PROTOTYPES


4934 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
);

4935 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *);

4936 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *);

4937 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
);

4938 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
, 
GLsizei
);

4939 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
);

4941 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4942 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4943 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4944 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

4945 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

4946 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4949 #i‚de‡
GL_SGIX_async_pixñ


4950 
	#GL_SGIX_async_pixñ
 1

	)

4953 #i‚de‡
GL_SGIX_async_hi°ogøm


4954 
	#GL_SGIX_async_hi°ogøm
 1

	)

4957 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


4958 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

4959 #ifde‡
GL_GLEXT_PROTOTYPES


4960 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4961 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
, c⁄° 
GLvoid
* *);

4962 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4963 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4965 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4966 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4967 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4968 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4971 #i‚de‡
GL_HP_oc˛usi⁄_ã°


4972 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

4975 #i‚de‡
GL_EXT_pixñ_å™sf‹m


4976 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

4977 #ifde‡
GL_GLEXT_PROTOTYPES


4978 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4979 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4980 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4981 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4983 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4984 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4985 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4986 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4989 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


4990 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

4993 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


4994 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

4997 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


4998 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

5001 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


5002 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

5003 #ifde‡
GL_GLEXT_PROTOTYPES


5004 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5005 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *);

5006 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5007 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5008 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5009 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5010 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
, GLint, GLint);

5011 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *);

5012 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5013 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *);

5014 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
, GLubyte, GLubyte);

5015 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *);

5016 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
, GLuint, GLuint);

5017 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *);

5018 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
, GLushort, GLushort);

5019 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *);

5020 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5022 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

5023 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5024 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

5025 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5026 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

5027 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5028 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

5029 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5030 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

5031 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5032 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

5033 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

5034 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

5035 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

5036 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

5037 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

5038 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5041 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


5042 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

5043 #ifde‡
GL_GLEXT_PROTOTYPES


5044 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
);

5046 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

5049 #i‚de‡
GL_EXT_mu…i_døw_¨øys


5050 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

5051 #ifde‡
GL_GLEXT_PROTOTYPES


5052 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

5053 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

5055 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5056 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5059 #i‚de‡
GL_EXT_fog_co‹d


5060 
	#GL_EXT_fog_co‹d
 1

	)

5061 #ifde‡
GL_GLEXT_PROTOTYPES


5062 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
);

5063 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *);

5064 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
);

5065 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *);

5066 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5068 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

5069 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

5070 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

5071 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

5072 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5075 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


5076 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

5079 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5080 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5081 #ifde‡
GL_GLEXT_PROTOTYPES


5082 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5083 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *);

5084 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5085 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5086 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5087 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5088 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
, GLint, GLint);

5089 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *);

5090 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5091 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *);

5092 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5093 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *);

5094 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5095 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5096 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5097 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5098 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
, GLint, GLint);

5099 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *);

5100 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5101 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *);

5102 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5103 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5105 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5106 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5107 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5108 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5109 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5110 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5111 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5112 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5113 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5114 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5115 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5116 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5117 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5118 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5119 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5120 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5121 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5122 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5123 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5124 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5125 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5126 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5129 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


5130 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

5133 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5134 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5137 #i‚de‡
GL_APPLE_å™sf‹m_höt


5138 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5141 #i‚de‡
GL_SGIX_fog_sˇÀ


5142 
	#GL_SGIX_fog_sˇÀ
 1

	)

5145 #i‚de‡
GL_SUNX_c⁄°™t_d©a


5146 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

5147 #ifde‡
GL_GLEXT_PROTOTYPES


5148 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

5150 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

5153 #i‚de‡
GL_SUN_globÆ_Æpha


5154 
	#GL_SUN_globÆ_Æpha
 1

	)

5155 #ifde‡
GL_GLEXT_PROTOTYPES


5156 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
);

5157 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
);

5158 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
);

5159 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
);

5160 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
);

5161 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
);

5162 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
);

5163 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
);

5165 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

5166 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

5167 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

5168 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5169 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

5170 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

5171 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

5172 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

5175 #i‚de‡
GL_SUN_åüngÀ_li°


5176 
	#GL_SUN_åüngÀ_li°
 1

	)

5177 #ifde‡
GL_GLEXT_PROTOTYPES


5178 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
);

5179 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
);

5180 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
);

5181 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *);

5182 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *);

5183 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *);

5184 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
* *);

5186 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

5187 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

5188 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

5189 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

5190 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

5191 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

5192 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5195 #i‚de‡
GL_SUN_vîãx


5196 
	#GL_SUN_vîãx
 1

	)

5197 #ifde‡
GL_GLEXT_PROTOTYPES


5198 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat);

5199 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5200 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5201 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5204 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5205 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5206 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5207 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5208 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5209 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5210 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5211 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5212 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
, GLÊﬂt, 
GLubyã
, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);

5213 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, c⁄° 
GLubyã
 *, const GLfloat *);

5214 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5215 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5216 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5217 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5218 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5219 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5220 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5221 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5222 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5223 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *);

5224 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
, 
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5225 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5226 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5227 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5228 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5229 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5230 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5231 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5232 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5233 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5234 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5235 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5236 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5237 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5239 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5240 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5241 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5242 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5243 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5244 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5245 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5246 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5247 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5248 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5249 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5250 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5251 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5252 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5253 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5254 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5255 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5256 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

5257 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5258 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5259 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5260 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5261 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5262 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5263 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5264 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5265 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5266 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5267 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5268 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5269 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5270 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5271 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5272 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5273 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5274 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5275 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5276 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5277 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5278 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5281 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5282 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5283 #ifde‡
GL_GLEXT_PROTOTYPES


5284 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
, GLenum, GLenum, GLenum);

5286 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5289 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


5290 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
, GLenum, GLenum, GLenum);

5294 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5297 #i‚de‡
GL_INGR_cﬁ‹_˛amp


5298 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

5301 #i‚de‡
GL_INGR_öãæa˚_ªad


5302 
	#GL_INGR_öãæa˚_ªad
 1

	)

5305 #i‚de‡
GL_EXT_°ícû_wøp


5306 
	#GL_EXT_°ícû_wøp
 1

	)

5309 #i‚de‡
GL_EXT_422_pixñs


5310 
	#GL_EXT_422_pixñs
 1

	)

5313 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


5314 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

5317 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


5318 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

5321 #i‚de‡
GL_EXT_ãxtuª_ív_add


5322 
	#GL_EXT_ãxtuª_ív_add
 1

	)

5325 #i‚de‡
GL_EXT_ãxtuª_lod_büs


5326 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

5329 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


5330 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

5333 #i‚de‡
GL_EXT_vîãx_weightög


5334 
	#GL_EXT_vîãx_weightög
 1

	)

5335 #ifde‡
GL_GLEXT_PROTOTYPES


5336 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
);

5337 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *);

5338 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
, 
GLíum
, GLsizei, c⁄° 
GLvoid
 *);

5340 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

5341 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

5342 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5345 #i‚de‡
GL_NV_light_max_exp⁄ít


5346 
	#GL_NV_light_max_exp⁄ít
 1

	)

5349 #i‚de‡
GL_NV_vîãx_¨øy_ønge


5350 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

5351 #ifde‡
GL_GLEXT_PROTOTYPES


5352 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

5353 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
, c⁄° 
GLvoid
 *);

5355 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

5356 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5359 #i‚de‡
GL_NV_ªgi°î_comböîs


5360 
	#GL_NV_ªgi°î_comböîs
 1

	)

5361 #ifde‡
GL_GLEXT_PROTOTYPES


5362 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5363 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
, 
GLÊﬂt
);

5364 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

5365 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
, 
GLöt
);

5366 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum, GLenum, GLenum);

5367 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
, GLíum, GLíum, GLíum, GLíum, GLíum, GLíum, 
GLboﬁón
, GLboolean, GLboolean);

5368 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum);

5369 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLÊﬂt
 *);

5370 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLöt
 *);

5371 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

5372 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

5373 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5374 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5376 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5377 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5378 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5379 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5380 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5381 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

5382 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5383 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5384 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5385 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5386 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5387 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5388 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5391 #i‚de‡
GL_NV_fog_di°™˚


5392 
	#GL_NV_fog_di°™˚
 1

	)

5395 #i‚de‡
GL_NV_ãxgí_emboss


5396 
	#GL_NV_ãxgí_emboss
 1

	)

5399 #i‚de‡
GL_NV_bÀnd_squ¨e


5400 
	#GL_NV_bÀnd_squ¨e
 1

	)

5403 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


5404 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

5407 #i‚de‡
GL_MESA_ªsize_buf„rs


5408 
	#GL_MESA_ªsize_buf„rs
 1

	)

5409 #ifde‡
GL_GLEXT_PROTOTYPES


5410 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

5412 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

5415 #i‚de‡
GL_MESA_wödow_pos


5416 
	#GL_MESA_wödow_pos
 1

	)

5417 #ifde‡
GL_GLEXT_PROTOTYPES


5418 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
, GLdouble);

5419 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *);

5420 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
, GLfloat);

5421 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *);

5422 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
, GLint);

5423 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *);

5424 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
, GLshort);

5425 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *);

5426 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
, GLdouble, GLdouble);

5427 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *);

5428 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
, GLfloat, GLfloat);

5429 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *);

5430 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
, GLint, GLint);

5431 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *);

5432 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
, GLshort, GLshort);

5433 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *);

5434 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5435 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *);

5436 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5437 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *);

5438 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
, GLint, GLint, GLint);

5439 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *);

5440 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
, GLshort, GLshort, GLshort);

5441 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *);

5443 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5444 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5445 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5446 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5447 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

5448 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5449 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5450 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5451 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5452 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5453 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5454 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5455 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5456 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5457 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5458 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5459 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5460 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5461 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5462 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5463 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5464 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5465 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5466 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5469 #i‚de‡
GL_IBM_cuŒ_vîãx


5470 
	#GL_IBM_cuŒ_vîãx
 1

	)

5473 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


5474 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

5475 #ifde‡
GL_GLEXT_PROTOTYPES


5476 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei, GLint);

5477 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* c⁄° *, GLsizei, 
GLöt
);

5479 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

5480 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

5483 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


5484 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

5485 #ifde‡
GL_GLEXT_PROTOTYPES


5486 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5487 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5488 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
, c⁄° 
GLboﬁón
* *, GLint);

5489 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5490 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5491 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5492 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5493 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5495 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5496 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5497 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

5498 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5499 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5500 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5501 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5502 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5505 #i‚de‡
GL_SGIX_subßm∂e


5506 
	#GL_SGIX_subßm∂e
 1

	)

5509 #i‚de‡
GL_SGIX_y¸cba


5510 
	#GL_SGIX_y¸cba
 1

	)

5513 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


5514 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

5517 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


5518 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

5521 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5522 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5525 #i‚de‡
GL_3DFX_mu…ißm∂e


5526 
	#GL_3DFX_mu…ißm∂e
 1

	)

5529 #i‚de‡
GL_3DFX_tbuf„r


5530 
	#GL_3DFX_tbuf„r
 1

	)

5531 #ifde‡
GL_GLEXT_PROTOTYPES


5532 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
);

5534 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5537 #i‚de‡
GL_EXT_mu…ißm∂e


5538 
	#GL_EXT_mu…ißm∂e
 1

	)

5539 #ifde‡
GL_GLEXT_PROTOTYPES


5540 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
, 
GLboﬁón
);

5541 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
);

5543 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

5544 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

5547 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


5548 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

5551 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


5552 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

5555 #i‚de‡
GL_SGIX_ªßm∂e


5556 
	#GL_SGIX_ªßm∂e
 1

	)

5559 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


5560 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

5563 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


5564 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

5565 #ifde‡
GL_GLEXT_PROTOTYPES


5566 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
, GLboolean, GLboolean, GLboolean);

5568 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

5571 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


5572 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

5573 #ifde‡
GL_GLEXT_PROTOTYPES


5574 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
, c⁄° 
GLvoid
 *);

5576 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

5579 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


5580 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

5583 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


5584 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

5587 #i‚de‡
GL_NV_„n˚


5588 
	#GL_NV_„n˚
 1

	)

5589 #ifde‡
GL_GLEXT_PROTOTYPES


5590 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5591 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

5592 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
);

5593 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
);

5594 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5595 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
);

5596 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
, 
GLíum
);

5598 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5599 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5600 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5601 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5602 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5603 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5604 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

5607 #i‚de‡
GL_NV_evÆu©‹s


5608 
	#GL_NV_evÆu©‹s
 1

	)

5609 #ifde‡
GL_GLEXT_PROTOTYPES


5610 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLöt
, GLöt, 
GLboﬁón
, c⁄° 
GLvoid
 *);

5611 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5612 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5613 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLboﬁón
, 
GLvoid
 *);

5614 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5615 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5616 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5617 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5618 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
, GLenum);

5620 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

5621 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5622 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5623 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

5624 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5625 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5626 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5627 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5628 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

5631 #i‚de‡
GL_NV_∑cked_dïth_°ícû


5632 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

5635 #i‚de‡
GL_NV_ªgi°î_comböîs2


5636 
	#GL_NV_ªgi°î_comböîs2
 1

	)

5637 #ifde‡
GL_GLEXT_PROTOTYPES


5638 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5639 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5641 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5642 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5645 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


5646 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

5649 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


5650 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

5653 #i‚de‡
GL_NV_ãxtuª_shadî


5654 
	#GL_NV_ãxtuª_shadî
 1

	)

5657 #i‚de‡
GL_NV_ãxtuª_shadî2


5658 
	#GL_NV_ãxtuª_shadî2
 1

	)

5661 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


5662 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

5665 #i‚de‡
GL_NV_vîãx_¥ogøm


5666 
	#GL_NV_vîãx_¥ogøm
 1

	)

5667 #ifde‡
GL_GLEXT_PROTOTYPES


5668 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

5669 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
, 
GLuöt
);

5670 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5671 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5672 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
, 
GLuöt
 *);

5673 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLdoubÀ
 *);

5674 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5675 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5676 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
, 
GLíum
, 
GLubyã
 *);

5677 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5678 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

5679 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5680 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5681 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5682 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
);

5683 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5684 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5685 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

5686 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5687 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5688 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLdoubÀ
 *);

5689 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLÊﬂt
 *);

5690 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5691 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
, 
GLuöt
, GLenum, GLenum);

5692 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5693 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
, 
GLdoubÀ
);

5694 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5695 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
, 
GLÊﬂt
);

5696 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5697 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
, 
GLsh‹t
);

5698 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5699 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

5700 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5701 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

5702 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5703 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
, 
GLsh‹t
, GLshort);

5704 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5705 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

5706 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5707 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5708 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5709 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

5710 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5711 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5712 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5713 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5714 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5715 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

5716 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5717 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

5718 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
, c⁄° 
GLubyã
 *);

5719 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5720 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5721 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5722 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5723 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5724 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5725 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5726 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5727 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5728 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5729 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5730 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5731 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5733 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

5734 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

5735 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5736 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5737 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

5738 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5739 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5740 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5741 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

5742 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5743 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5744 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5745 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5746 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

5747 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

5748 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

5749 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5750 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5751 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5752 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5753 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5754 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5755 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5756 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

5757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

5759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

5761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

5763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5779 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5780 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5781 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5782 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

5783 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5784 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5785 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5788 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5789 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5790 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5791 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5792 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5793 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5794 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5795 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5796 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

5799 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


5800 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

5803 #i‚de‡
GL_SGIX_sˇÀbüs_höt


5804 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

5807 #i‚de‡
GL_OML_öãæa˚


5808 
	#GL_OML_öãæa˚
 1

	)

5811 #i‚de‡
GL_OML_subßm∂e


5812 
	#GL_OML_subßm∂e
 1

	)

5815 #i‚de‡
GL_OML_ªßm∂e


5816 
	#GL_OML_ªßm∂e
 1

	)

5819 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


5820 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

5823 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5824 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5825 #ifde‡
GL_GLEXT_PROTOTYPES


5826 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
, c⁄° 
GLöt
 *);

5827 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5828 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
, 
GLöt
 *);

5829 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
, 
GLÊﬂt
 *);

5831 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5832 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5833 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5834 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5837 #i‚de‡
GL_ATI_‰agmít_shadî


5838 
	#GL_ATI_‰agmít_shadî
 1

	)

5839 #ifde‡
GL_GLEXT_PROTOTYPES


5840 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuint);

5841 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
);

5842 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
);

5843 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

5844 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

5845 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
, GLuöt, 
GLíum
);

5846 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
, GLuöt, 
GLíum
);

5847 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint);

5848 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5849 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5850 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

5851 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5852 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5853 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5855 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

5856 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5857 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5858 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

5859 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

5860 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

5861 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

5862 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5863 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5864 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5865 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5866 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5867 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5868 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5871 #i‚de‡
GL_ATI_≤_åüngÀs


5872 
	#GL_ATI_≤_åüngÀs
 1

	)

5873 #ifde‡
GL_GLEXT_PROTOTYPES


5874 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
, 
GLöt
);

5875 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
, 
GLÊﬂt
);

5877 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5878 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5881 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


5882 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

5883 #ifde‡
GL_GLEXT_PROTOTYPES


5884 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5885 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
);

5886 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5887 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5888 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5889 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
);

5890 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, 
GLuöt
, GLuint);

5891 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5892 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
, GLíum, 
GLöt
 *);

5893 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuint, GLuint);

5894 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5895 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5897 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

5898 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5899 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

5900 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5901 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5902 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5903 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

5904 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5905 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5906 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5907 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5908 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5911 #i‚de‡
GL_EXT_vîãx_shadî


5912 
	#GL_EXT_vîãx_shadî
 1

	)

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

5915 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

5916 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
);

5917 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuint);

5918 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
);

5919 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
, 
GLuöt
, GLuint);

5920 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint);

5921 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint);

5922 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5923 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5924 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5925 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5926 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
, GLenum, GLenum, GLuint);

5927 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5928 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5929 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

5930 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5931 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

5932 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5933 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5934 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

5935 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5936 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
, const GLuint *);

5937 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLvoid
 *);

5938 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5939 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5940 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
, GLenum);

5941 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
, GLenum);

5942 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
, GLenum, GLenum);

5943 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
, GLenum);

5944 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
);

5945 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
, 
GLíum
);

5946 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5947 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5948 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5949 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5950 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5951 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5952 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5953 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5954 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5955 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5957 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

5958 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

5959 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5960 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

5961 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5962 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

5963 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

5964 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

5965 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5966 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5967 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5968 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5969 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

5970 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5971 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5972 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

5973 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

5974 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

5975 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

5976 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

5977 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

5978 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

5979 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

5980 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

5981 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5982 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5983 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

5984 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

5985 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

5986 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

5987 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

5988 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

5989 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5990 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5991 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5992 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

5993 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5994 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5995 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5996 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5997 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5998 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6001 #i‚de‡
GL_ATI_vîãx_°ªams


6002 
	#GL_ATI_vîãx_°ªams
 1

	)

6003 #ifde‡
GL_GLEXT_PROTOTYPES


6004 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
, 
GLsh‹t
);

6005 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6006 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
, 
GLöt
);

6007 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6008 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
, 
GLÊﬂt
);

6009 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6010 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
, 
GLdoubÀ
);

6011 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6012 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
, 
GLsh‹t
, GLshort);

6013 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6014 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
, 
GLöt
, GLint);

6015 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6016 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat);

6017 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6018 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble);

6019 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6020 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6021 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6022 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6023 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6024 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6025 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6026 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6027 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6028 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

6029 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6030 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

6031 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6032 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6033 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6034 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6035 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6036 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
, 
GLbyã
, GLbyte, GLbyte);

6037 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
, c⁄° 
GLbyã
 *);

6038 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6039 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6040 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6041 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6042 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6043 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6044 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6045 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6046 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
);

6047 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
, 
GLöt
);

6048 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
, 
GLÊﬂt
);

6050 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6051 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6052 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6053 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6054 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6055 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6056 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6057 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6058 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6059 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6060 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6061 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6062 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6063 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6064 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6065 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6066 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6067 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6068 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6069 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6070 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6071 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6072 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6073 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6074 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6075 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6076 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6077 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6078 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6079 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6080 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6081 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6082 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6083 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6084 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6085 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6086 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6087 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6088 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6089 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6090 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6091 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6092 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6093 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6094 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6097 #i‚de‡
GL_ATI_ñemít_¨øy


6098 
	#GL_ATI_ñemít_¨øy
 1

	)

6099 #ifde‡
GL_GLEXT_PROTOTYPES


6100 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
, c⁄° 
GLvoid
 *);

6101 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
, 
GLsizei
);

6102 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
);

6104 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6105 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

6106 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

6109 #i‚de‡
GL_SUN_mesh_¨øy


6110 
	#GL_SUN_mesh_¨øy
 1

	)

6111 #ifde‡
GL_GLEXT_PROTOTYPES


6112 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

6114 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

6117 #i‚de‡
GL_SUN_¶i˚_accum


6118 
	#GL_SUN_¶i˚_accum
 1

	)

6121 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


6122 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

6125 #i‚de‡
GL_NV_dïth_˛amp


6126 
	#GL_NV_dïth_˛amp
 1

	)

6129 #i‚de‡
GL_NV_oc˛usi⁄_quîy


6130 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

6131 #ifde‡
GL_GLEXT_PROTOTYPES


6132 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
, 
GLuöt
 *);

6133 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6134 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
);

6135 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
);

6136 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

6137 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6138 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
, 
GLíum
, GLuint *);

6140 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6141 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6142 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6143 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6144 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

6145 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6146 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6149 #i‚de‡
GL_NV_poöt_•rôe


6150 
	#GL_NV_poöt_•rôe
 1

	)

6151 #ifde‡
GL_GLEXT_PROTOTYPES


6152 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
, 
GLöt
);

6153 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

6155 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6156 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6159 #i‚de‡
GL_NV_ãxtuª_shadî3


6160 
	#GL_NV_ãxtuª_shadî3
 1

	)

6163 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


6164 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

6167 #i‚de‡
GL_EXT_shadow_funcs


6168 
	#GL_EXT_shadow_funcs
 1

	)

6171 #i‚de‡
GL_EXT_°ícû_two_side


6172 
	#GL_EXT_°ícû_two_side
 1

	)

6173 #ifde‡
GL_GLEXT_PROTOTYPES


6174 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
);

6176 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

6179 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6180 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6183 #i‚de‡
GL_APPLE_˛õ¡_°‹age


6184 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

6187 #i‚de‡
GL_APPLE_ñemít_¨øy


6188 
	#GL_APPLE_ñemít_¨øy
 1

	)

6189 #ifde‡
GL_GLEXT_PROTOTYPES


6190 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
, c⁄° 
GLvoid
 *);

6191 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
, 
GLöt
, 
GLsizei
);

6192 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöt
, 
GLsizei
);

6193 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6194 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6196 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6197 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6198 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6199 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6200 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6203 #i‚de‡
GL_APPLE_„n˚


6204 
	#GL_APPLE_„n˚
 1

	)

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
, 
GLuöt
 *);

6207 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6208 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
);

6209 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
);

6210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
);

6211 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
);

6212 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
, 
GLuöt
);

6213 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
, 
GLöt
);

6215 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

6216 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

6217 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6218 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6219 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6220 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6221 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

6222 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

6225 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


6226 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

6227 #ifde‡
GL_GLEXT_PROTOTYPES


6228 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
);

6229 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6230 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6231 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
);

6233 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6234 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6235 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6236 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6239 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


6240 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

6241 #ifde‡
GL_GLEXT_PROTOTYPES


6242 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6243 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6244 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
, 
GLöt
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6247 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6251 #i‚de‡
GL_APPLE_ycb¸_422


6252 
	#GL_APPLE_ycb¸_422
 1

	)

6255 #i‚de‡
GL_S3_s3tc


6256 
	#GL_S3_s3tc
 1

	)

6259 #i‚de‡
GL_ATI_døw_buf„rs


6260 
	#GL_ATI_døw_buf„rs
 1

	)

6261 #ifde‡
GL_GLEXT_PROTOTYPES


6262 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
, c⁄° 
GLíum
 *);

6264 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6267 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6268 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6274 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6275 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6278 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6279 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6282 #i‚de‡
GL_NV_Êﬂt_buf„r


6283 
	#GL_NV_Êﬂt_buf„r
 1

	)

6286 #i‚de‡
GL_NV_‰agmít_¥ogøm


6287 
	#GL_NV_‰agmít_¥ogøm
 1

	)

6289 #ifde‡
GL_GLEXT_PROTOTYPES


6290 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6291 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6292 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

6293 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLdoubÀ
 *);

6294 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
 *);

6295 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
 *);

6297 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6298 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6299 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6300 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6301 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

6302 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

6305 #i‚de‡
GL_NV_hÆf_Êﬂt


6306 
	#GL_NV_hÆf_Êﬂt
 1

	)

6307 #ifde‡
GL_GLEXT_PROTOTYPES


6308 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
, GLhalfNV);

6309 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *);

6310 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6311 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *);

6312 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6313 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *);

6314 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6315 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *);

6316 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6317 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6318 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6319 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *);

6320 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
);

6321 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *);

6322 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
, GLhalfNV);

6323 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *);

6324 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6325 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *);

6326 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6327 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *);

6328 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
, 
GLhÆfNV
);

6329 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6330 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV);

6331 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6332 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6333 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6334 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6335 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6336 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
);

6337 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *);

6338 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6339 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6340 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
);

6341 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *);

6342 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
, 
GLhÆfNV
);

6343 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6344 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV);

6345 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6346 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6347 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6348 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6349 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6350 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6351 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6352 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6353 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6355 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6356 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6357 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6358 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6359 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6360 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6361 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

6362 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6363 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6364 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6365 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

6366 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6367 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

6368 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6369 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6370 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6371 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6372 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6373 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6374 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6375 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

6376 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6377 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6378 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6379 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6380 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6381 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6382 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6383 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

6384 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

6385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6387 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

6388 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

6389 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

6390 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6391 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6392 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6393 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6394 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6395 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6396 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6397 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6398 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6403 #i‚de‡
GL_NV_pixñ_d©a_ønge


6404 
	#GL_NV_pixñ_d©a_ønge
 1

	)

6405 #ifde‡
GL_GLEXT_PROTOTYPES


6406 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
, 
GLsizei
, 
GLvoid
 *);

6407 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
);

6409 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6410 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

6413 #i‚de‡
GL_NV_¥imôive_ª°¨t


6414 
	#GL_NV_¥imôive_ª°¨t
 1

	)

6415 #ifde‡
GL_GLEXT_PROTOTYPES


6416 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

6417 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
);

6419 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

6420 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

6423 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


6424 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

6427 #i‚de‡
GL_NV_vîãx_¥ogøm2


6428 
	#GL_NV_vîãx_¥ogøm2
 1

	)

6431 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6432 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6433 #ifde‡
GL_GLEXT_PROTOTYPES


6434 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
);

6435 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
);

6437 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6438 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6441 #i‚de‡
GL_ATI_£∑øã_°ícû


6442 
	#GL_ATI_£∑øã_°ícû
 1

	)

6443 #ifde‡
GL_GLEXT_PROTOTYPES


6444 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
, GLenum, GLenum, GLenum);

6445 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

6447 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6448 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6451 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6452 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6453 #ifde‡
GL_GLEXT_PROTOTYPES


6454 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, GLuint, GLuint);

6455 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6456 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6458 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6459 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6460 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6463 #i‚de‡
GL_OES_ªad_f‹m©


6464 
	#GL_OES_ªad_f‹m©
 1

	)

6467 #i‚de‡
GL_EXT_dïth_bounds_ã°


6468 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6469 #ifde‡
GL_GLEXT_PROTOTYPES


6470 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
, GLclampd);

6472 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6475 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


6476 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

6479 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6480 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6481 #ifde‡
GL_GLEXT_PROTOTYPES


6482 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
, GLenum);

6484 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6487 #i‚de‡
GL_MESA_∑ck_övît


6488 
	#GL_MESA_∑ck_övît
 1

	)

6491 #i‚de‡
GL_MESA_ycb¸_ãxtuª


6492 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

6495 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


6496 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

6499 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


6500 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

6503 #i‚de‡
GL_NV_‰agmít_¥ogøm2


6504 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

6507 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


6508 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

6511 #i‚de‡
GL_NV_vîãx_¥ogøm3


6512 
	#GL_NV_vîãx_¥ogøm3
 1

	)

6515 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


6516 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

6517 #ifde‡
GL_GLEXT_PROTOTYPES


6518 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
);

6519 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
, 
GLuöt
);

6520 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6521 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6522 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

6523 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6524 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
);

6525 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
, 
GLuöt
);

6526 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6527 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6528 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLenum);

6529 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6530 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6531 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

6532 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

6533 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

6534 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
);

6536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

6537 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6538 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

6539 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

6540 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6541 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6542 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

6543 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

6544 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

6545 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

6546 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6547 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6548 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6549 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6550 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

6551 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6552 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6555 #i‚de‡
GL_GREMEDY_°rög_m¨kî


6556 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

6557 #ifde‡
GL_GLEXT_PROTOTYPES


6558 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
, c⁄° 
GLvoid
 *);

6560 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

6564 #ifde‡
__˝lu•lus


	@SDL_platform.h

27 #i‚de‡
_SDL_∂©f‹m_h


28 
	#_SDL_∂©f‹m_h


	)

30 #i‡
deföed
(
_AIX
)

31 #unde‡
__AIX__


32 
	#__AIX__
 1

	)

34 #i‡
deföed
(
__BEOS__
)

35 #unde‡
__BEOS__


36 
	#__BEOS__
 1

	)

38 #i‡
deföed
(
__HAIKU__
)

39 #unde‡
__HAIKU__


40 
	#__HAIKU__
 1

	)

42 #i‡
deföed
(
bsdi
Ë|| deföed(
__bsdi
Ë|| deföed(
__bsdi__
)

43 #unde‡
__BSDI__


44 
	#__BSDI__
 1

	)

46 #i‡
deföed
(
_¨ch_dªamˇ°
)

47 #unde‡
__DREAMCAST__


48 
	#__DREAMCAST__
 1

	)

50 #i‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

51 #unde‡
__FREEBSD__


52 
	#__FREEBSD__
 1

	)

54 #i‡
deföed
(
__HAIKU__
)

55 #unde‡
__HAIKU__


56 
	#__HAIKU__
 1

	)

58 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__hpux__
)

59 #unde‡
__HPUX__


60 
	#__HPUX__
 1

	)

62 #i‡
deföed
(
sgi
Ë|| deföed(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI_SOURCE
)

63 #unde‡
__IRIX__


64 
	#__IRIX__
 1

	)

66 #i‡
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
)

67 #unde‡
__LINUX__


68 
	#__LINUX__
 1

	)

70 #i‡
deföed
(
__APPLE__
)

71 #unde‡
__MACOSX__


72 
	#__MACOSX__
 1

	)

73 #ñi‡
deföed
(
macötosh
)

74 #unde‡
__MACOS__


75 
	#__MACOS__
 1

	)

77 #i‡
deföed
(
__NëBSD__
)

78 #unde‡
__NETBSD__


79 
	#__NETBSD__
 1

	)

81 #i‡
deföed
(
__O≥nBSD__
)

82 #unde‡
__OPENBSD__


83 
	#__OPENBSD__
 1

	)

85 #i‡
deföed
(
__OS2__
)

86 #unde‡
__OS2__


87 
	#__OS2__
 1

	)

89 #i‡
deföed
(
osf
Ë|| deföed(
__osf
Ë|| deföed(
__osf__
Ë|| deföed(
_OSF_SOURCE
)

90 #unde‡
__OSF__


91 
	#__OSF__
 1

	)

93 #i‡
deföed
(
__QNXNTO__
)

94 #unde‡
__QNXNTO__


95 
	#__QNXNTO__
 1

	)

97 #i‡
deföed
(
riscos
Ë|| deföed(
__riscos
Ë|| deföed(
__riscos__
)

98 #unde‡
__RISCOS__


99 
	#__RISCOS__
 1

	)

101 #i‡
deföed
(
__SVR4
)

102 #unde‡
__SOLARIS__


103 
	#__SOLARIS__
 1

	)

105 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
)

106 #unde‡
__WIN32__


107 
	#__WIN32__
 1

	)

	@SDL_quit.h

27 #i‚de‡
_SDL_quô_h


28 
	#_SDL_quô_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

52 
	#SDL_QuôReque°ed
() \

53 (
	`SDL_PumpEvíts
(), 
	`SDL_PìpEvíts
(
NULL
,0,
SDL_PEEKEVENT
,
SDL_QUITMASK
))

	)

	@SDL_rotozoom.h

10 #i‚de‡
_SDL_rŸozoom_h


11 
	#_SDL_rŸozoom_h


	)

13 
	~<m©h.h
>

16 #ifde‡
__˝lu•lus


20 #i‚de‡
M_PI


21 
	#M_PI
 3.141592654

	)

24 
	~"SDL.h
"

31 
	#SMOOTHING_OFF
 0

	)

36 
	#SMOOTHING_ON
 1

	)

40 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

41 #i‡
deföed
(
DLL_EXPORT
Ë&& !deföed(
LIBSDL_GFX_DLL_IMPORT
)

42 
	#SDL_ROTOZOOM_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

44 #ifde‡
LIBSDL_GFX_DLL_IMPORT


45 
	#SDL_ROTOZOOM_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 #i‚de‡
SDL_ROTOZOOM_SCOPE


50 
	#SDL_ROTOZOOM_SCOPE
 

	)

59 
SDL_ROTOZOOM_SCOPE
 
SDL_SurÁ˚
 *
rŸozoomSurÁ˚
(SDL_SurÁ˚ * 
§c
, 
™gÀ
, 
zoom
, 
smoŸh
);

61 
SDL_ROTOZOOM_SCOPE
 
SDL_SurÁ˚
 *
	grŸozoomSurÁ˚XY


62 (
SDL_SurÁ˚
 * 
	g§c
, 
	g™gÀ
, 
	gzoomx
, 
	gzoomy
, 
	gsmoŸh
);

65 
SDL_ROTOZOOM_SCOPE
 
rŸozoomSurÁ˚Size
(
width
, 
height
, 
™gÀ
, 
zoom
, *
d°width
,

66 *
d°height
);

68 
SDL_ROTOZOOM_SCOPE
 
	grŸozoomSurÁ˚SizeXY


69 (
	gwidth
, 
	gheight
, 
	g™gÀ
, 
	gzoomx
, 
	gzoomy
,

70 *
	gd°width
, *
	gd°height
);

78 
SDL_ROTOZOOM_SCOPE
 
SDL_SurÁ˚
 *
zoomSurÁ˚
(SDL_SurÁ˚ * 
§c
, 
zoomx
, 
zoomy
, 
smoŸh
);

80 
SDL_ROTOZOOM_SCOPE
 
zoomSurÁ˚Size
(
width
, 
height
, 
zoomx
, 
zoomy
, *
d°width
, *
d°height
);

88 
SDL_ROTOZOOM_SCOPE
 
SDL_SurÁ˚
 *
shrökSurÁ˚
(SDL_SurÁ˚ * 
§c
, 
Á˘‹x
, 
Á˘‹y
);

96 
SDL_ROTOZOOM_SCOPE
 
SDL_SurÁ˚
* 
rŸ©eSurÁ˚90Degªes
(SDL_SurÁ˚* 
§c
, 
numClockwi£Tu∫s
);

99 #ifde‡
__˝lu•lus


	@SDL_rwops.h

28 #i‚de‡
_SDL_rw›s_h


29 
	#_SDL_rw›s_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	sSDL_RW›s
 {

47 (
SDLCALL
 *
£ek
)(
SDL_RW›s
 *
c⁄ãxt
, 
off£t
, 
whí˚
);

53 (
SDLCALL
 *
ªad
)(
SDL_RW›s
 *
c⁄ãxt
, *
±r
, 
size
, 
maxnum
);

59 (
SDLCALL
 *
wrôe
)(
SDL_RW›s
 *
c⁄ãxt
, c⁄° *
±r
, 
size
, 
num
);

62 (
SDLCALL
 *
˛o£
)(
SDL_RW›s
 *
c⁄ãxt
);

64 
Uöt32
 
ty≥
;

66 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__SYMBIAN32__
)

68 
≠≥nd
;

69 *
h
;

71 *
d©a
;

72 
size
;

73 
À·
;

74 } 
buf„r
;

75 } 
wö32io
;

77 #ifde‡
HAVE_STDIO_H


79 
auto˛o£
;

80 
FILE
 *
Â
;

81 } 
°dio
;

84 
Uöt8
 *
ba£
;

85 
Uöt8
 *
hîe
;

86 
Uöt8
 *
°›
;

87 } 
mem
;

89 *
d©a1
;

90 } 
unknown
;

91 } 
hiddí
;

93 } 
	tSDL_RW›s
;

99 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFûe
(c⁄° *
fûe
, c⁄° *
mode
);

101 #ifde‡
HAVE_STDIO_H


102 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFP
(
FILE
 *
Â
, 
auto˛o£
);

105 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromMem
(*
mem
, 
size
);

106 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromC⁄°Mem
(c⁄° *
mem
, 
size
);

108 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_AŒocRW
();

109 
DECLSPEC
 
SDLCALL
 
SDL_FªeRW
(
SDL_RW›s
 *
¨ó
);

115 
	#RW_SEEK_SET
 0

	)

116 
	#RW_SEEK_CUR
 1

	)

117 
	#RW_SEEK_END
 2

	)

122 
	#SDL_RW£ek
(
˘x
, 
off£t
, 
whí˚
Ë(˘x)->
	`£ek
(˘x, off£t, whí˚)

	)

123 
	#SDL_RWãŒ
(
˘x
Ë(˘x)->
	`£ek
(˘x, 0, 
RW_SEEK_CUR
)

	)

124 
	#SDL_RWªad
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`ªad
(˘x,Öå, size,Ç)

	)

125 
	#SDL_RWwrôe
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`wrôe
(˘x,Öå, size,Ç)

	)

126 
	#SDL_RW˛o£
(
˘x
Ë(˘x)->
	`˛o£
(˘x)

	)

131 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódLE16
(
SDL_RW›s
 *
§c
);

132 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódBE16
(
SDL_RW›s
 *
§c
);

133 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódLE32
(
SDL_RW›s
 *
§c
);

134 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódBE32
(
SDL_RW›s
 *
§c
);

135 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódLE64
(
SDL_RW›s
 *
§c
);

136 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódBE64
(
SDL_RW›s
 *
§c
);

141 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

142 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

143 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

144 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

145 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

146 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

150 #ifde‡
__˝lu•lus


153 
	~"˛o£_code.h
"

	@SDL_sound.h

64 #i‚de‡
_INCLUDE_SDL_SOUND_H_


65 
	#_INCLUDE_SDL_SOUND_H_


	)

67 
	~"SDL.h
"

68 
	~"SDL_ídün.h
"

70 #ifde‡
__˝lu•lus


74 #i‚de‡
DOXYGEN_SHOULD_IGNORE_THIS


76 #i‚de‡
SDLCALL


77 
	#SDLCALL


	)

80 #ifde‡
SDL_SOUND_DLL_EXPORTS


81 
	#SNDDECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

83 
	#SNDDECLSPEC


	)

86 
	#SOUND_VER_MAJOR
 1

	)

87 
	#SOUND_VER_MINOR
 0

	)

88 
	#SOUND_VER_PATCH
 3

	)

109 
SOUND_SAMPLEFLAG_NONE
 = 0,

112 
SOUND_SAMPLEFLAG_CANSEEK
 = 1,

115 
SOUND_SAMPLEFLAG_EOF
 = 1 << 29,

116 
SOUND_SAMPLEFLAG_ERROR
 = 1 << 30,

117 
SOUND_SAMPLEFLAG_EAGAIN
 = 1 << 31

118 } 
	tSound_Sam∂eFœgs
;

135 
Uöt16
 
f‹m©
;

136 
Uöt8
 
ch™√ls
;

137 
Uöt32
 
øã
;

138 } 
	tSound_AudioInfo
;

162 c⁄° **
exãnsi⁄s
;

163 c⁄° *
des¸ùti⁄
;

164 c⁄° *
auth‹
;

165 c⁄° *
uæ
;

166 } 
	tSound_DecodîInfo
;

181 *
›aque
;

182 c⁄° 
Sound_DecodîInfo
 *
decodî
;

183 
Sound_AudioInfo
 
desúed
;

184 
Sound_AudioInfo
 
a˘uÆ
;

185 *
buf„r
;

186 
Uöt32
 
buf„r_size
;

187 
Sound_Sam∂eFœgs
 
Êags
;

188 } 
	tSound_Sam∂e
;

206 
maj‹
;

207 
mö‹
;

208 
∑tch
;

209 } 
	tSound_Vîsi⁄
;

230 
	#SOUND_VERSION
(
x
) \

232 (
x
)->
maj‹
 = 
SOUND_VER_MAJOR
; \

233 (
x
)->
mö‹
 = 
SOUND_VER_MINOR
; \

234 (
x
)->
∑tch
 = 
SOUND_VER_PATCH
; \

235 }

	)

267 
SNDDECLSPEC
 
SDLCALL
 
Sound_GëLökedVîsi⁄
(
Sound_Vîsi⁄
 *
vî
);

285 
SNDDECLSPEC
 
SDLCALL
 
Sound_Inô
();

310 
SNDDECLSPEC
 
SDLCALL
 
Sound_Quô
();

345 
SNDDECLSPEC
 c⁄° 
Sound_DecodîInfo
 ** 
SDLCALL
 
Sound_AvaûabÀDecodîs
();

363 
SNDDECLSPEC
 c⁄° * 
SDLCALL
 
Sound_GëEº‹
();

374 
SNDDECLSPEC
 
SDLCALL
 
Sound_CÀ¨Eº‹
();

449 
SNDDECLSPEC
 
Sound_Sam∂e
 * 
SDLCALL
 
Sound_NewSam∂e
(
SDL_RW›s
 *
rw
,

450 c⁄° *
ext
,

451 
Sound_AudioInfo
 *
desúed
,

452 
Uöt32
 
buf„rSize
);

481 
SNDDECLSPEC
 
Sound_Sam∂e
 * 
SDLCALL
 
Sound_NewSam∂eFromFûe
(c⁄° *
‚ame
,

482 
Sound_AudioInfo
 *
desúed
,

483 
Uöt32
 
buf„rSize
);

499 
SNDDECLSPEC
 
SDLCALL
 
Sound_FªeSam∂e
(
Sound_Sam∂e
 *
ßm∂e
);

527 
SNDDECLSPEC
 
SDLCALL
 
Sound_SëBuf„rSize
(
Sound_Sam∂e
 *
ßm∂e
,

528 
Uöt32
 
√w_size
);

550 
SNDDECLSPEC
 
Uöt32
 
SDLCALL
 
Sound_Decode
(
Sound_Sam∂e
 *
ßm∂e
);

586 
SNDDECLSPEC
 
Uöt32
 
SDLCALL
 
Sound_DecodeAŒ
(
Sound_Sam∂e
 *
ßm∂e
);

620 
SNDDECLSPEC
 
SDLCALL
 
Sound_Rewöd
(
Sound_Sam∂e
 *
ßm∂e
);

665 
SNDDECLSPEC
 
SDLCALL
 
Sound_Sìk
(
Sound_Sam∂e
 *
ßm∂e
, 
Uöt32
 
ms
);

667 #ifde‡
__˝lu•lus


	@SDL_start/lesson11/lesson11.cpp

5 
	~"SDL/SDL.h
"

6 
	~"SDL/SDL_image.h
"

7 
	~"SDL/SDL_âf.h
"

8 
	~"SDL/SDL_mixî.h
"

9 
	~<°rög
>

12 c⁄° 
	gSCREEN_WIDTH
 = 640;

13 c⁄° 
	gSCREEN_HEIGHT
 = 480;

14 c⁄° 
	gSCREEN_BPP
 = 32;

17 
SDL_SurÁ˚
 *
	gbackground
 = 
NULL
;

18 
SDL_SurÁ˚
 *
	gmesßge
 = 
NULL
;

19 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

22 
SDL_Evít
 
	gevít
;

25 
TTF_F⁄t
 *
	gf⁄t
 = 
NULL
;

28 
SDL_Cﬁ‹
 
	gãxtCﬁ‹
 = { 0, 0, 0 };

31 
Mix_Music
 *
	gmusic
 = 
NULL
;

34 
Mix_Chunk
 *
	gs¸©ch
 = 
NULL
;

35 
Mix_Chunk
 *
	ghigh
 = 
NULL
;

36 
Mix_Chunk
 *
	gmed
 = 
NULL
;

37 
Mix_Chunk
 *
	glow
 = 
NULL
;

39 
SDL_SurÁ˚
 *
	$lﬂd_image
–
°d
::
°rög
 
fûíame
 )

42 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

45 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

48 
lﬂdedImage
 = 
	`IMG_Lﬂd
–
fûíame
.
	`c_°r
() );

51 if–
lﬂdedImage
 !
NULL
 )

54 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
–
lﬂdedImage
 );

57 
	`SDL_FªeSurÁ˚
–
lﬂdedImage
 );

60 if–
›timizedImage
 !
NULL
 )

63 
	`SDL_SëCﬁ‹Key
–
›timizedImage
, 
SDL_SRCCOLORKEY
, 
	`SDL_M≠RGB
–›timizedImage->
f‹m©
, 0, 0xFF, 0xFF ) );

68  
›timizedImage
;

69 
	}
}

71 
	$≠∂y_surÁ˚
–
x
, 
y
, 
SDL_SurÁ˚
* 
sour˚
, SDL_SurÁ˚* 
de°ö©i⁄
, 
SDL_Re˘
* 
˛ù
 = 
NULL
 )

74 
SDL_Re˘
 
off£t
;

77 
off£t
.
x
 = x;

78 
off£t
.
y
 = y;

81 
	`SDL_BlôSurÁ˚
–
sour˚
, 
˛ù
, 
de°ö©i⁄
, &
off£t
 );

82 
	}
}

84 
boﬁ
 
	$öô
()

87 if–
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 ) == -1 )

89  
Ál£
;

93 
s¸ìn
 = 
	`SDL_SëVideoMode
–
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
 );

96 if–
s¸ìn
 =
NULL
 )

98  
Ál£
;

102 if–
	`TTF_Inô
() == -1 )

104  
Ál£
;

108 if–
	`Mix_O≥nAudio
–22050, 
MIX_DEFAULT_FORMAT
, 2, 4096 ) == -1 )

110  
Ál£
;

114 
	`SDL_WM_SëC≠ti⁄
–"M⁄ô‹ Music", 
NULL
 );

117  
åue
;

118 
	}
}

120 
boﬁ
 
	$lﬂd_fûes
()

123 
background
 = 
	`lﬂd_image
( "background.png" );

126 
f⁄t
 = 
	`TTF_O≥nF⁄t
( "lazy.ttf", 30 );

129 if–
background
 =
NULL
 )

131  
Ál£
;

135 if–
f⁄t
 =
NULL
 )

137  
Ál£
;

141 
music
 = 
	`Mix_LﬂdMUS
( "beat.wav" );

144 if–
music
 =
NULL
 )

146  
Ál£
;

150 
s¸©ch
 = 
	`Mix_LﬂdWAV
( "scratch.wav" );

151 
high
 = 
	`Mix_LﬂdWAV
( "high.wav" );

152 
med
 = 
	`Mix_LﬂdWAV
( "medium.wav" );

153 
low
 = 
	`Mix_LﬂdWAV
( "low.wav" );

156 if––
s¸©ch
 =
NULL
 ) || ( 
high
 =NULL ) || ( 
med
 =NULL ) || ( 
low
 == NULL ) )

158  
Ál£
;

162  
åue
;

163 
	}
}

165 
	$˛ón_up
()

168 
	`SDL_FªeSurÁ˚
–
background
 );

171 
	`Mix_FªeChunk
–
s¸©ch
 );

172 
	`Mix_FªeChunk
–
high
 );

173 
	`Mix_FªeChunk
–
med
 );

174 
	`Mix_FªeChunk
–
low
 );

177 
	`Mix_FªeMusic
–
music
 );

180 
	`TTF_Clo£F⁄t
–
f⁄t
 );

183 
	`Mix_Clo£Audio
();

186 
	`TTF_Quô
();

189 
	`SDL_Quô
();

190 
	}
}

192 
	$maö
–
¨gc
, * 
¨gs
[] )

195 
boﬁ
 
quô
 = 
Ál£
;

198 if–
	`öô
(Ë=
Ál£
 )

204 if–
	`lﬂd_fûes
(Ë=
Ál£
 )

210 
	`≠∂y_surÁ˚
–0, 0, 
background
, 
s¸ìn
 );

213 
mesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Pªs†1, 2, 3, o∏4Åÿ∂ayá soundÉf„˘", 
ãxtCﬁ‹
 );

216 if–
mesßge
 =
NULL
 )

222 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
mesßge
->
w
 ) / 2, 100, mesßge, 
s¸ìn
 );

225 
	`SDL_FªeSurÁ˚
–
mesßge
 );

228 
mesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Pªs†9Åÿ∂ay o∏∑u£Åhêmusic", 
ãxtCﬁ‹
 );

231 if–
mesßge
 =
NULL
 )

237 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
mesßge
->
w
 ) / 2, 200, mesßge, 
s¸ìn
 );

240 
	`SDL_FªeSurÁ˚
–
mesßge
 );

243 
mesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Pªs†0Åÿ°›Åhêmusic", 
ãxtCﬁ‹
 );

246 if–
mesßge
 =
NULL
 )

252 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
mesßge
->
w
 ) / 2, 300, mesßge, 
s¸ìn
 );

255 
	`SDL_FªeSurÁ˚
–
mesßge
 );

258 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

264  
quô
 =
Ál£
 )

267  
	`SDL_PﬁlEvít
–&
evít
 ) )

270 if–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

273 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_1
 )

276 if–
	`Mix_PœyCh™√l
–-1, 
s¸©ch
, 0 ) == -1 )

282 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_2
 )

285 if–
	`Mix_PœyCh™√l
–-1, 
high
, 0 ) == -1 )

291 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_3
 )

294 if–
	`Mix_PœyCh™√l
–-1, 
med
, 0 ) == -1 )

300 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_4
 )

303 if–
	`Mix_PœyCh™√l
–-1, 
low
, 0 ) == -1 )

309 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_9
 )

312 if–
	`Mix_PœyögMusic
() == 0 )

315 if–
	`Mix_PœyMusic
–
music
, -1 ) == -1 )

324 if–
	`Mix_Pau£dMusic
() == 1 )

327 
	`Mix_ResumeMusic
();

333 
	`Mix_Pau£Music
();

338 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_0
 )

341 
	`Mix_HÆtMusic
();

345 if–
evít
.
ty≥
 =
SDL_QUIT
 )

348 
quô
 = 
åue
;

355 
	`˛ón_up
();

358 
	}
}

	@SDL_start/lesson12/lesson12.cpp

5 
	~"SDL/SDL.h
"

6 
	~"SDL/SDL_image.h
"

7 
	~"SDL/SDL_âf.h
"

8 
	~<°rög
>

9 
	~<s°ªam
>

12 c⁄° 
	gSCREEN_WIDTH
 = 640;

13 c⁄° 
	gSCREEN_HEIGHT
 = 480;

14 c⁄° 
	gSCREEN_BPP
 = 32;

17 
SDL_SurÁ˚
 *
	gbackground
 = 
NULL
;

18 
SDL_SurÁ˚
 *
	g°¨tSt›
 = 
NULL
;

19 
SDL_SurÁ˚
 *
	g£c⁄ds
 = 
NULL
;

20 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

23 
SDL_Evít
 
	gevít
;

26 
TTF_F⁄t
 *
	gf⁄t
 = 
NULL
;

29 
SDL_Cﬁ‹
 
	gãxtCﬁ‹
 = { 0xF0, 0xFF, 0xF0 };

31 
SDL_SurÁ˚
 *
	$lﬂd_image
–
°d
::
°rög
 
fûíame
 )

34 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

37 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

40 
lﬂdedImage
 = 
	`IMG_Lﬂd
–
fûíame
.
	`c_°r
() );

43 if–
lﬂdedImage
 !
NULL
 )

46 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
–
lﬂdedImage
 );

49 
	`SDL_FªeSurÁ˚
–
lﬂdedImage
 );

52 if–
›timizedImage
 !
NULL
 )

55 
	`SDL_SëCﬁ‹Key
–
›timizedImage
, 
SDL_SRCCOLORKEY
, 
	`SDL_M≠RGB
–›timizedImage->
f‹m©
, 0, 0xFF, 0xFF ) );

60  
›timizedImage
;

61 
	}
}

63 
	$≠∂y_surÁ˚
–
x
, 
y
, 
SDL_SurÁ˚
* 
sour˚
, SDL_SurÁ˚* 
de°ö©i⁄
, 
SDL_Re˘
* 
˛ù
 = 
NULL
 )

66 
SDL_Re˘
 
off£t
;

69 
off£t
.
x
 = x;

70 
off£t
.
y
 = y;

73 
	`SDL_BlôSurÁ˚
–
sour˚
, 
˛ù
, 
de°ö©i⁄
, &
off£t
 );

74 
	}
}

76 
boﬁ
 
	$öô
()

79 if–
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 ) == -1 )

81  
Ál£
;

85 
s¸ìn
 = 
	`SDL_SëVideoMode
–
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
 );

88 if–
s¸ìn
 =
NULL
 )

90  
Ál£
;

94 if–
	`TTF_Inô
() == -1 )

96  
Ál£
;

100 
	`SDL_WM_SëC≠ti⁄
–"Timî Te°", 
NULL
 );

103  
åue
;

104 
	}
}

106 
boﬁ
 
	$lﬂd_fûes
()

109 
background
 = 
	`lﬂd_image
( "background.png" );

112 
f⁄t
 = 
	`TTF_O≥nF⁄t
( "lazy.ttf", 36 );

115 if–
background
 =
NULL
 )

117  
Ál£
;

121 if–
f⁄t
 =
NULL
 )

123  
Ál£
;

127  
åue
;

128 
	}
}

130 
	$˛ón_up
()

133 
	`SDL_FªeSurÁ˚
–
background
 );

134 
	`SDL_FªeSurÁ˚
–
°¨tSt›
 );

137 
	`TTF_Clo£F⁄t
–
f⁄t
 );

140 
	`TTF_Quô
();

143 
	`SDL_Quô
();

144 
	}
}

146 
	$maö
–
¨gc
, * 
¨gs
[] )

149 
boﬁ
 
quô
 = 
Ál£
;

152 
Uöt32
 
°¨t
 = 0;

155 
boﬁ
 
ru¬ög
 = 
åue
;

158 if–
	`öô
(Ë=
Ál£
 )

164 if–
	`lﬂd_fûes
(Ë=
Ál£
 )

170 
°¨tSt›
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Pªs†SÅÿ°¨à‹ st›Åhêtimî", 
ãxtCﬁ‹
 );

173 
°¨t
 = 
	`SDL_GëTicks
();

176  
quô
 =
Ál£
 )

179  
	`SDL_PﬁlEvít
–&
evít
 ) )

182 if–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

185 if–
evít
.
key
.
keysym
.
sym
 =
SDLK_s
 )

188 if–
ru¬ög
 =
åue
 )

191 
ru¬ög
 = 
Ál£
;

192 
°¨t
 = 0;

197 
ru¬ög
 = 
åue
;

198 
°¨t
 = 
	`SDL_GëTicks
();

204 if–
evít
.
ty≥
 =
SDL_QUIT
 )

207 
quô
 = 
åue
;

212 
	`≠∂y_surÁ˚
–0, 0, 
background
, 
s¸ìn
 );

215 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
°¨tSt›
->
w
 ) / 2, 200, sèπSt›, 
s¸ìn
 );

218 if–
ru¬ög
 =
åue
 )

221 
°d
::
°rög°ªam
 
time
;

224 
time
 << "Timî: " << 
	`SDL_GëTicks
(Ë- 
°¨t
;

227 
£c⁄ds
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, 
time
.
	`°r
().
	`c_°r
(), 
ãxtCﬁ‹
 );

230 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
£c⁄ds
->
w
 ) / 2, 50, sec⁄ds, 
s¸ìn
 );

233 
	`SDL_FªeSurÁ˚
–
£c⁄ds
 );

237 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

244 
	`˛ón_up
();

247 
	}
}

	@SDL_stdinc.h

27 #i‚de‡
_SDL_°döc_h


28 
	#_SDL_°döc_h


	)

30 
	~"SDL_c⁄fig.h
"

33 #ifde‡
HAVE_SYS_TYPES_H


34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_STDIO_H


37 
	~<°dio.h
>

39 #i‡
deföed
(
STDC_HEADERS
)

40 
	~<°dlib.h
>

41 
	~<°ddef.h
>

42 
	~<°d¨g.h
>

44 #i‡
deföed
(
HAVE_STDLIB_H
)

45 
	~<°dlib.h
>

46 #ñi‡
deföed
(
HAVE_MALLOC_H
)

47 
	~<mÆloc.h
>

49 #i‡
deföed
(
HAVE_STDDEF_H
)

50 
	~<°ddef.h
>

52 #i‡
deföed
(
HAVE_STDARG_H
)

53 
	~<°d¨g.h
>

56 #ifde‡
HAVE_STRING_H


57 #i‡!
deföed
(
STDC_HEADERS
Ë&& deföed(
HAVE_MEMORY_H
)

58 
	~<mem‹y.h
>

60 
	~<°rög.h
>

62 #ifde‡
HAVE_STRINGS_H


63 
	~<°rögs.h
>

65 #i‡
deföed
(
HAVE_INTTYPES_H
)

66 
	~<öây≥s.h
>

67 #ñi‡
deföed
(
HAVE_STDINT_H
)

68 
	~<°döt.h
>

70 #ifde‡
HAVE_CTYPE_H


71 
	~<˘y≥.h
>

73 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

74 
	~<ic⁄v.h
>

78 
	#SDL_¨øysize
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

79 
	#SDL_TABLESIZE
(
èbÀ
Ë
	`SDL_¨øysize
—abÀ)

	)

83 #ifde‡
__˝lu•lus


84 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
ªöãΩªt_ˇ°
<ty≥>”x¥essi⁄)

	)

85 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
°©ic_ˇ°
<ty≥>”x¥essi⁄)

	)

87 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

88 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

94 
	mSDL_FALSE
 = 0,

95 
	mSDL_TRUE
 = 1

96 } 
	tSDL_boﬁ
;

98 
öt8_t
 
	tSöt8
;

99 
uöt8_t
 
	tUöt8
;

100 
öt16_t
 
	tSöt16
;

101 
uöt16_t
 
	tUöt16
;

102 
öt32_t
 
	tSöt32
;

103 
uöt32_t
 
	tUöt32
;

105 #ifde‡
SDL_HAS_64BIT_TYPE


106 
öt64_t
 
	tSöt64
;

107 #i‚de‡
SYMBIAN32_GCCE


108 
uöt64_t
 
	tUöt64
;

113 
Uöt32
 
	mhi
;

114 
Uöt32
 
	mlo
;

115 } 
	tUöt64
, 
	tSöt64
;

122 
	#SDL_COMPILE_TIME_ASSERT
(
«me
, 
x
) \

123 
	tSDL_dummy_
 ## 
	t«me
[(
x
Ë* 2 - 1]

	)

125 
	tSDL_COMPILE_TIME_ASSERT
(
	tuöt8
, (
	tUöt8
) == 1);

126 
SDL_COMPILE_TIME_ASSERT
(
söt8
, (
Söt8
) == 1);

127 
SDL_COMPILE_TIME_ASSERT
(
uöt16
, (
Uöt16
) == 2);

128 
SDL_COMPILE_TIME_ASSERT
(
söt16
, (
Söt16
) == 2);

129 
SDL_COMPILE_TIME_ASSERT
(
uöt32
, (
Uöt32
) == 4);

130 
SDL_COMPILE_TIME_ASSERT
(
söt32
, (
Söt32
) == 4);

131 
SDL_COMPILE_TIME_ASSERT
(
uöt64
, (
Uöt64
) == 8);

132 
SDL_COMPILE_TIME_ASSERT
(
söt64
, (
Söt64
) == 8);

142 #ifde‡
__MWERKS__


143 #¥agm®
íumßlwaysöt
 
⁄


147 
	mDUMMY_ENUM_VALUE


148 } 
	tSDL_DUMMY_ENUM
;

150 #i‚de‡
__NDS__


151 
SDL_COMPILE_TIME_ASSERT
(, (
SDL_DUMMY_ENUM
) == ());

155 
	~"begö_code.h
"

157 #ifde‡
__˝lu•lus


161 #ifde‡
HAVE_MALLOC


162 
	#SDL_mÆloc
 
mÆloc


	)

164 
DECLSPEC
 * 
SDLCALL
 
SDL_mÆloc
(
size_t
 
size
);

167 #ifde‡
HAVE_CALLOC


168 
	#SDL_ˇŒoc
 
ˇŒoc


	)

170 
DECLSPEC
 * 
SDLCALL
 
SDL_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

173 #ifde‡
HAVE_REALLOC


174 
	#SDL_ªÆloc
 
ªÆloc


	)

176 
DECLSPEC
 * 
SDLCALL
 
SDL_ªÆloc
(*
mem
, 
size_t
 
size
);

179 #ifde‡
HAVE_FREE


180 
	#SDL_‰ì
 
‰ì


	)

182 
DECLSPEC
 
SDLCALL
 
SDL_‰ì
(*
mem
);

185 #i‡
deföed
(
HAVE_ALLOCA
Ë&& !deföed(
Æloˇ
)

186 #i‡
deföed
(
HAVE_ALLOCA_H
)

187 
	~<Æloˇ.h
>

188 #ñi‡
deföed
(
__GNUC__
)

189 
	#Æloˇ
 
__buûtö_Æloˇ


	)

190 #ñi‡
deföed
(
_MSC_VER
)

191 
	~<mÆloc.h
>

192 
	#Æloˇ
 
_Æloˇ


	)

193 #ñi‡
deföed
(
__WATCOMC__
)

194 
	~<mÆloc.h
>

195 #ñi‡
deföed
(
__BORLANDC__
)

196 
	~<mÆloc.h
>

197 #ñi‡
deföed
(
__DMC__
)

198 
	~<°dlib.h
>

199 #ñi‡
deföed
(
__AIX__
)

200 #¥agm®
Æloˇ


201 #ñi‡
deföed
(
__MRC__
)

202 *
Æloˇ
 ();

204 *
Æloˇ
 ();

207 #ifde‡
HAVE_ALLOCA


208 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`Æloˇ
(—y≥)*(cou¡))

	)

209 
	#SDL_°ack_‰ì
(
d©a
)

	)

211 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`SDL_mÆloc
(—y≥)*(cou¡))

	)

212 
	#SDL_°ack_‰ì
(
d©a
Ë
	`SDL_‰ì
(d©a)

	)

215 #ifde‡
HAVE_GETENV


216 
	#SDL_gëív
 
gëív


	)

218 
DECLSPEC
 * 
SDLCALL
 
SDL_gëív
(c⁄° *
«me
);

221 #ifde‡
HAVE_PUTENV


222 
	#SDL_puãnv
 
puãnv


	)

224 
DECLSPEC
 
SDLCALL
 
SDL_puãnv
(c⁄° *
v¨übÀ
);

227 #ifde‡
HAVE_QSORT


228 
	#SDL_qs‹t
 
qs‹t


	)

230 
DECLSPEC
 
SDLCALL
 
SDL_qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

231 (*
com∑ª
)(const *, const *));

234 #ifde‡
HAVE_ABS


235 
	#SDL_abs
 
abs


	)

237 
	#SDL_abs
(
X
Ë((XË< 0 ? -(XË: (X))

	)

240 
	#SDL_mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

241 
	#SDL_max
(
x
, 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

243 #ifde‡
HAVE_CTYPE_H


244 
	#SDL_isdigô
(
X
Ë
	`isdigô
(X)

	)

245 
	#SDL_is•a˚
(
X
Ë
	`is•a˚
(X)

	)

246 
	#SDL_touµî
(
X
Ë
	`touµî
(X)

	)

247 
	#SDL_tﬁowî
(
X
Ë
	`tﬁowî
(X)

	)

249 
	#SDL_isdigô
(
X
Ë(((XË>'0'Ë&& ((XË<'9'))

	)

250 
	#SDL_is•a˚
(
X
Ë(((XË=' 'Ë|| ((XË='\t'Ë|| ((XË='\r'Ë|| ((XË='\n'))

	)

251 
	#SDL_touµî
(
X
Ë(((XË>'a'Ë&& ((XË<'z'Ë? ('A'+((X)-'a')Ë: (X))

	)

252 
	#SDL_tﬁowî
(
X
Ë(((XË>'A'Ë&& ((XË<'Z'Ë? ('a'+((X)-'A')Ë: (X))

	)

255 #ifde‡
HAVE_MEMSET


256 
	#SDL_mem£t
 
mem£t


	)

258 
DECLSPEC
 * 
SDLCALL
 
SDL_mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

261 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

262 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

264 
u0
, 
u1
, 
u2
; \

265 
__asm__
 
	`__vﬁ©ûe__
 ( \

268 : "=&D" (
u0
), "=&a" (
u1
), "=&c" (
u2
) \

269 : "0" (
d°
), "1" (
vÆ
), "2" (
	`SDL_°©ic_ˇ°
(
Uöt32
, 
Àn
)) \

271 } 0)

	)

273 #i‚de‡
SDL_mem£t4


274 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

276 
_cou¡
 = (
Àn
); \

277 
_n
 = (
_cou¡
 + 3) / 4; \

278 
Uöt32
 *
_p
 = 
	`SDL_°©ic_ˇ°
(Uöt32 *, 
d°
); \

279 
Uöt32
 
_vÆ
 = (
vÆ
); \

280 i‡(
Àn
 == 0) ; \

281 
_cou¡
 % 4) { \

282 0: dÿ{ *
_p
++ = 
_vÆ
; \

283 3: *
_p
++ = 
_vÆ
; \

284 2: *
_p
++ = 
_vÆ
; \

285 1: *
_p
++ = 
_vÆ
; \

286 }  --
_n
 ); \

288 } 0)

	)

292 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

293 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src,Üí)

	)

294 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

295 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
) \

297 
u0
, 
u1
, 
u2
; \

298 
__asm__
 
	`__vﬁ©ûe__
 ( \

308 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

309 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)/4), "q" (Àn), "1" (
d°
),"2" (
§c
) \

311 } 0)

	)

313 #i‚de‡
SDL_mem˝y


314 #ifde‡
HAVE_MEMCPY


315 
	#SDL_mem˝y
 
mem˝y


	)

316 #ñi‡
deföed
(
HAVE_BCOPY
)

317 
	#SDL_mem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

319 
DECLSPEC
 * 
SDLCALL
 
SDL_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

324 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

325 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src, (Àn)*4)

	)

326 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

327 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
) \

329 
ecx
, 
edi
, 
esi
; \

330 
__asm__
 
	`__vﬁ©ûe__
 ( \

333 : "=&c" (
ecx
), "=&D" (
edi
), "=&S" (
esi
) \

334 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)), "1" (
d°
), "2" (
§c
) \

336 } 0)

	)

338 #i‚de‡
SDL_mem˝y4


339 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`SDL_mem˝y
(d°, src, (ÀnË<< 2)

	)

342 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

343 
	#SDL_ªv˝y
(
d°
, 
§c
, 
Àn
) \

345 
u0
, 
u1
, 
u2
; \

346 *
d°p
 = 
	`SDL_°©ic_ˇ°
(*, 
d°
); \

347 *
§˝
 = 
	`SDL_°©ic_ˇ°
(*, 
§c
); \

348 
n
 = (
Àn
); \

349 i‡–
n
 >= 4 ) { \

350 
__asm__
 
	`__vﬁ©ûe__
 ( \

354 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

355 : "0" (
n
 >> 2), \

356 "1" (
d°p
+(
n
-4)), "2" (
§˝
+(n-4)) \

359 
n
 & 3) { \

360 3: 
d°p
[2] = 
§˝
[2]; \

361 2: 
d°p
[1] = 
§˝
[1]; \

362 1: 
d°p
[0] = 
§˝
[0]; \

367 } 0)

	)

369 #i‚de‡
SDL_ªv˝y


370 
DECLSPEC
 * 
SDLCALL
 
SDL_ªv˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

373 #ifde‡
HAVE_MEMMOVE


374 
	#SDL_memmove
 
memmove


	)

375 #ñi‡
deföed
(
HAVE_BCOPY
)

376 
	#SDL_memmove
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

378 
	#SDL_memmove
(
d°
, 
§c
, 
Àn
) \

380 i‡–
d°
 < 
§c
 ) { \

381 
	`SDL_mem˝y
(
d°
, 
§c
, 
Àn
); \

383 
	`SDL_ªv˝y
(
d°
, 
§c
, 
Àn
); \

385 } 0)

	)

388 #ifde‡
HAVE_MEMCMP


389 
	#SDL_memcmp
 
memcmp


	)

391 
DECLSPEC
 
SDLCALL
 
SDL_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

394 #ifde‡
HAVE_STRLEN


395 
	#SDL_°æí
 
°æí


	)

397 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æí
(c⁄° *
°rög
);

400 #ifde‡
HAVE_STRLCPY


401 
	#SDL_°æ˝y
 
°æ˝y


	)

403 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

406 #ifde‡
HAVE_STRLCAT


407 
	#SDL_°æˇt
 
°æˇt


	)

409 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

412 #ifde‡
HAVE_STRDUP


413 
	#SDL_°rdup
 
°rdup


	)

415 
DECLSPEC
 * 
SDLCALL
 
SDL_°rdup
(c⁄° *
°rög
);

418 #ifde‡
HAVE__STRREV


419 
	#SDL_°ºev
 
_°ºev


	)

421 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºev
(*
°rög
);

424 #ifde‡
HAVE__STRUPR


425 
	#SDL_°ru¥
 
_°ru¥


	)

427 
DECLSPEC
 * 
SDLCALL
 
SDL_°ru¥
(*
°rög
);

430 #ifde‡
HAVE__STRLWR


431 
	#SDL_°æwr
 
_°æwr


	)

433 
DECLSPEC
 * 
SDLCALL
 
SDL_°æwr
(*
°rög
);

436 #ifde‡
HAVE_STRCHR


437 
	#SDL_°rchr
 
°rchr


	)

438 #ñi‡
deföed
(
HAVE_INDEX
)

439 
	#SDL_°rchr
 
ödex


	)

441 
DECLSPEC
 * 
SDLCALL
 
SDL_°rchr
(c⁄° *
°rög
, 
c
);

444 #ifde‡
HAVE_STRRCHR


445 
	#SDL_°ºchr
 
°ºchr


	)

446 #ñi‡
deföed
(
HAVE_RINDEX
)

447 
	#SDL_°ºchr
 
rödex


	)

449 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºchr
(c⁄° *
°rög
, 
c
);

452 #ifde‡
HAVE_STRSTR


453 
	#SDL_°r°r
 
°r°r


	)

455 
DECLSPEC
 * 
SDLCALL
 
SDL_°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

458 #ifde‡
HAVE_ITOA


459 
	#SDL_ôﬂ
 
ôﬂ


	)

461 
	#SDL_ôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_…ﬂ
(()vÆue, såög,Ñadix)

	)

464 #ifde‡
HAVE__LTOA


465 
	#SDL_…ﬂ
 
_…ﬂ


	)

467 
DECLSPEC
 * 
SDLCALL
 
SDL_…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

470 #ifde‡
HAVE__UITOA


471 
	#SDL_uôﬂ
 
_uôﬂ


	)

473 
	#SDL_uôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_u…ﬂ
(()vÆue, såög,Ñadix)

	)

476 #ifde‡
HAVE__ULTOA


477 
	#SDL_u…ﬂ
 
_u…ﬂ


	)

479 
DECLSPEC
 * 
SDLCALL
 
SDL_u…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

482 #ifde‡
HAVE_STRTOL


483 
	#SDL_°πﬁ
 
°πﬁ


	)

485 
DECLSPEC
 
SDLCALL
 
SDL_°πﬁ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

488 #ifde‡
HAVE_STRTOUL


489 
	#SDL_°πoul
 
°πoul


	)

491 
DECLSPEC
 
SDLCALL
 
SDL_°πoul
(c⁄° *
°rög
, **
ídp
, 
ba£
);

494 #ifde‡
SDL_HAS_64BIT_TYPE


496 #ifde‡
HAVE__I64TOA


497 
	#SDL_Œtﬂ
 
_i64tﬂ


	)

499 
DECLSPEC
 * 
SDLCALL
 
SDL_Œtﬂ
(
Söt64
 
vÆue
, *
°rög
, 
ødix
);

502 #ifde‡
HAVE__UI64TOA


503 
	#SDL_uŒtﬂ
 
_ui64tﬂ


	)

505 
DECLSPEC
 * 
SDLCALL
 
SDL_uŒtﬂ
(
Uöt64
 
vÆue
, *
°rög
, 
ødix
);

508 #ifde‡
HAVE_STRTOLL


509 
	#SDL_°πﬁl
 
°πﬁl


	)

511 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_°πﬁl
(c⁄° *
°rög
, **
ídp
, 
ba£
);

514 #ifde‡
HAVE_STRTOULL


515 
	#SDL_°πouŒ
 
°πouŒ


	)

517 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_°πouŒ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

522 #ifde‡
HAVE_STRTOD


523 
	#SDL_°πod
 
°πod


	)

525 
DECLSPEC
 
SDLCALL
 
SDL_°πod
(c⁄° *
°rög
, **
ídp
);

528 #ifde‡
HAVE_ATOI


529 
	#SDL_©oi
 
©oi


	)

531 
	#SDL_©oi
(
X
Ë
	`SDL_°πﬁ
(X, 
NULL
, 0)

	)

534 #ifde‡
HAVE_ATOF


535 
	#SDL_©of
 
©of


	)

537 
	#SDL_©of
(
X
Ë
	`SDL_°πod
(X, 
NULL
)

	)

540 #ifde‡
HAVE_STRCMP


541 
	#SDL_°rcmp
 
°rcmp


	)

543 
DECLSPEC
 
SDLCALL
 
SDL_°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

546 #ifde‡
HAVE_STRNCMP


547 
	#SDL_°∫cmp
 
°∫cmp


	)

549 
DECLSPEC
 
SDLCALL
 
SDL_°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

552 #ifde‡
HAVE_STRCASECMP


553 
	#SDL_°rˇ£cmp
 
°rˇ£cmp


	)

554 #ñi‡
deföed
(
HAVE__STRICMP
)

555 
	#SDL_°rˇ£cmp
 
_°ricmp


	)

557 
DECLSPEC
 
SDLCALL
 
SDL_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

560 #ifde‡
HAVE_STRNCASECMP


561 
	#SDL_°∫ˇ£cmp
 
°∫ˇ£cmp


	)

562 #ñi‡
deföed
(
HAVE__STRNICMP
)

563 
	#SDL_°∫ˇ£cmp
 
_°∫icmp


	)

565 
DECLSPEC
 
SDLCALL
 
SDL_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

568 #ifde‡
HAVE_SSCANF


569 
	#SDL_ssˇnf
 
ssˇnf


	)

571 
DECLSPEC
 
SDLCALL
 
SDL_ssˇnf
(c⁄° *
ãxt
, c⁄° *
fmt
, ...);

574 #ifde‡
HAVE_SNPRINTF


575 
	#SDL_¢¥ötf
 
¢¥ötf


	)

577 
DECLSPEC
 
SDLCALL
 
SDL_¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...);

580 #ifde‡
HAVE_VSNPRINTF


581 
	#SDL_v¢¥ötf
 
v¢¥ötf


	)

583 
DECLSPEC
 
SDLCALL
 
SDL_v¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
);

590 
	#SDL_ICONV_ERROR
 (
size_t
)-1

	)

591 
	#SDL_ICONV_E2BIG
 (
size_t
)-2

	)

592 
	#SDL_ICONV_EILSEQ
 (
size_t
)-3

	)

593 
	#SDL_ICONV_EINVAL
 (
size_t
)-4

	)

596 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

597 
	#SDL_ic⁄v_t
 
ic⁄v_t


	)

598 
	#SDL_ic⁄v_›í
 
ic⁄v_›í


	)

599 
	#SDL_ic⁄v_˛o£
 
ic⁄v_˛o£


	)

601 
_SDL_ic⁄v_t
 *
	tSDL_ic⁄v_t
;

602 
DECLSPEC
 
SDL_ic⁄v_t
 
SDLCALL
 
SDL_ic⁄v_›í
(c⁄° *
tocode
, c⁄° *
‰omcode
);

603 
DECLSPEC
 
SDLCALL
 
SDL_ic⁄v_˛o£
(
SDL_ic⁄v_t
 
cd
);

605 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_ic⁄v
(
SDL_ic⁄v_t
 
cd
, c⁄° **
öbuf
, size_à*
öbyã¶e·
, **
outbuf
, size_à*
outbyã¶e·
);

609 
DECLSPEC
 * 
SDLCALL
 
SDL_ic⁄v_°rög
(c⁄° *
tocode
, c⁄° *
‰omcode
, c⁄° *
öbuf
, 
size_t
 
öbyã¶e·
);

610 
	#SDL_ic⁄v_utf8_loˇÀ
(
S
Ë
	`SDL_ic⁄v_°rög
("", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

611 
	#SDL_ic⁄v_utf8_ucs2
(
S
Ë(
Uöt16
 *)
	`SDL_ic⁄v_°rög
("UCS-2", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

612 
	#SDL_ic⁄v_utf8_ucs4
(
S
Ë(
Uöt32
 *)
	`SDL_ic⁄v_°rög
("UCS-4", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

615 #ifde‡
__˝lu•lus


618 
	~"˛o£_code.h
"

	@SDL_syswm.h

27 #i‚de‡
_SDL_syswm_h


28 
	#_SDL_syswm_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_vîsi⁄.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


46 #ifde‡
SDL_PROTOTYPES_ONLY


47 
SDL_SysWMöfo
;

48 
SDL_SysWMöfo
 
	tSDL_SysWMöfo
;

52 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

53 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

55 
	#Curs‹
 
X11Curs‹


	)

58 
	~<X11/Xlib.h
>

59 
	~<X11/X©om.h
>

61 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

63 #unde‡
Curs‹


68 
	mSDL_SYSWM_X11


69 } 
	tSDL_SYSWM_TYPE
;

72 
	sSDL_SysWMmsg
 {

73 
SDL_vîsi⁄
 
	mvîsi⁄
;

74 
SDL_SYSWM_TYPE
 
	msubsy°em
;

76 
XEvít
 
	mxevít
;

77 } 
	mevít
;

84 
	sSDL_SysWMöfo
 {

85 
SDL_vîsi⁄
 
	mvîsi⁄
;

86 
SDL_SYSWM_TYPE
 
	msubsy°em
;

89 
Di•œy
 *
	mdi•œy
;

90 
Wödow
 
	mwödow
;

98 (*
	mlock_func
)();

99 (*
	mu∆ock_func
)();

104 
Wödow
 
	mfswödow
;

105 
Wödow
 
	mwmwödow
;

110 
Di•œy
 *
	mgfxdi•œy
;

112 } 
	mx11
;

113 } 
	möfo
;

114 } 
	tSDL_SysWMöfo
;

116 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_NANOX
)

117 
	~<mi¸owö/«no-X.h
>

120 
	sSDL_SysWMmsg
 {

121 
SDL_vîsi⁄
 
	mvîsi⁄
;

122 
	md©a
;

126 
	sSDL_SysWMöfo
 {

127 
SDL_vîsi⁄
 
	mvîsi⁄
 ;

128 
GR_WINDOW_ID
 
	mwödow
 ;

129 } 
	tSDL_SysWMöfo
;

131 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_WINDIB
Ë|| deföed(
SDL_VIDEO_DRIVER_DDRAW
Ë|| deföed(
SDL_VIDEO_DRIVER_GAPI
)

132 
	#WIN32_LEAN_AND_MEAN


	)

133 
	~<wödows.h
>

136 
	sSDL_SysWMmsg
 {

137 
SDL_vîsi⁄
 
	mvîsi⁄
;

138 
HWND
 
	mhwnd
;

139 
UINT
 
	mmsg
;

140 
WPARAM
 
	mwP¨am
;

141 
LPARAM
 
	mlP¨am
;

145 
	sSDL_SysWMöfo
 {

146 
SDL_vîsi⁄
 
	mvîsi⁄
;

147 
HWND
 
	mwödow
;

148 
HGLRC
 
	mhgÃc
;

149 } 
	tSDL_SysWMöfo
;

151 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_RISCOS
)

154 
	sSDL_SysWMmsg
 {

155 
SDL_vîsi⁄
 
	mvîsi⁄
;

156 
	mevítCode
;

157 
	mpﬁlBlock
[64];

161 
	sSDL_SysWMöfo
 {

162 
SDL_vîsi⁄
 
	mvîsi⁄
;

163 
	mwimpVîsi⁄
;

164 
	mèskH™dÀ
;

165 
	mwödow
;

166 } 
	tSDL_SysWMöfo
;

168 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_PHOTON
)

169 
	~<sys/√uåöo.h
>

170 
	~<Ph.h
>

173 
	sSDL_SysWMmsg
 {

174 
SDL_vîsi⁄
 
	mvîsi⁄
;

175 
	md©a
;

179 
	sSDL_SysWMöfo
 {

180 
SDL_vîsi⁄
 
	mvîsi⁄
;

181 
	md©a
;

182 } 
	tSDL_SysWMöfo
;

187 
	sSDL_SysWMmsg
 {

188 
SDL_vîsi⁄
 
	mvîsi⁄
;

189 
	md©a
;

193 
	sSDL_SysWMöfo
 {

194 
SDL_vîsi⁄
 
	mvîsi⁄
;

195 
	md©a
;

196 } 
	tSDL_SysWMöfo
;

217 
DECLSPEC
 
SDLCALL
 
SDL_GëWMInfo
(
SDL_SysWMöfo
 *
öfo
);

221 #ifde‡
__˝lu•lus


224 
	~"˛o£_code.h
"

	@SDL_thread.h

23 #i‚de‡
_SDL_thªad_h


24 
	#_SDL_thªad_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

36 
	~"SDL_muãx.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


45 
SDL_Thªad
;

46 
SDL_Thªad
 
	tSDL_Thªad
;

49 #i‡((
deföed
(
__WIN32__
Ë&& !deföed(
HAVE_LIBC
)Ë|| deföed(
__OS2__
)Ë&& !deföed(
__SYMBIAN32__
)

63 
	#SDL_PASSED_BEGINTHREAD_ENDTHREAD


	)

64 #i‚de‡
_WIN32_WCE


65 
	~<¥o˚ss.h
>

68 #ifde‡
__OS2__


69 (*
p‚SDL_CuºítBegöThªad
)((*
	tfunc
)(*), *, , *
	t¨g
);

70 (*
p‚SDL_CuºítEndThªad
)();

72 
uöçå_t
 (
	t__cde˛
 *
	tp‚SDL_CuºítBegöThªad
) (*, ,

73 (
	t__°dˇŒ
 *
	tfunc
)(*), *
	t¨g
,

74 , *
	tthªadID
);

75 (
__cde˛
 *
	tp‚SDL_CuºítEndThªad
)(
	tcode
);

78 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
, 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
, 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

80 #ifde‡
__OS2__


81 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªad
, 
_ídthªad
)

	)

82 #ñi‡
deföed
(
_WIN32_WCE
)

83 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
NULL
, NULL)

	)

85 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªadex
, 
_ídthªadex
)

	)

88 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
);

92 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_ThªadID
();

97 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëThªadID
(
SDL_Thªad
 *
thªad
);

103 
DECLSPEC
 
SDLCALL
 
SDL_WaôThªad
(
SDL_Thªad
 *
thªad
, *
°©us
);

106 
DECLSPEC
 
SDLCALL
 
SDL_KûlThªad
(
SDL_Thªad
 *
thªad
);

110 #ifde‡
__˝lu•lus


113 
	~"˛o£_code.h
"

	@SDL_timer.h

23 #i‚de‡
_SDL_timî_h


24 
	#_SDL_timî_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
	#SDL_TIMESLICE
 10

	)

43 
	#TIMER_RESOLUTION
 10

	)

49 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëTicks
();

52 
DECLSPEC
 
SDLCALL
 
SDL_Dñay
(
Uöt32
 
ms
);

55 
Uöt32
 (
	tSDLCALL
 *
	tSDL_TimîCÆlback
)(
	tUöt32
 
	töãrvÆ
);

86 
DECLSPEC
 
SDLCALL
 
SDL_SëTimî
(
Uöt32
 
öãrvÆ
, 
SDL_TimîCÆlback
 
ˇŒback
);

101 
Uöt32
 (
	tSDLCALL
 *
	tSDL_NewTimîCÆlback
)(
	tUöt32
 
	töãrvÆ
, *
	t∑øm
);

104 
_SDL_TimîID
 *
	tSDL_TimîID
;

109 
DECLSPEC
 
SDL_TimîID
 
SDLCALL
 
SDL_AddTimî
(
Uöt32
 
öãrvÆ
, 
SDL_NewTimîCÆlback
 
ˇŒback
, *
∑øm
);

115 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RemoveTimî
(
SDL_TimîID
 
t
);

120 #ifde‡
__˝lu•lus


123 
	~"˛o£_code.h
"

	@SDL_ttf.h

27 #i‚de‡
_SDL_TTF_H


28 
	#_SDL_TTF_H


	)

30 
	~"SDL.h
"

31 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


40 
	#SDL_TTF_MAJOR_VERSION
 2

	)

41 
	#SDL_TTF_MINOR_VERSION
 0

	)

42 
	#SDL_TTF_PATCHLEVEL
 11

	)

47 
	#SDL_TTF_VERSION
(
X
) \

49 (
X
)->
maj‹
 = 
SDL_TTF_MAJOR_VERSION
; \

50 (
X
)->
mö‹
 = 
SDL_TTF_MINOR_VERSION
; \

51 (
X
)->
∑tch
 = 
SDL_TTF_PATCHLEVEL
; \

52 }

	)

55 
	#TTF_MAJOR_VERSION
 
SDL_TTF_MAJOR_VERSION


	)

56 
	#TTF_MINOR_VERSION
 
SDL_TTF_MINOR_VERSION


	)

57 
	#TTF_PATCHLEVEL
 
SDL_TTF_PATCHLEVEL


	)

58 
	#TTF_VERSION
(
X
Ë
	`SDL_TTF_VERSION
(X)

	)

64 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
TTF_Löked_Vîsi⁄
();

67 
	#UNICODE_BOM_NATIVE
 0xFEFF

	)

68 
	#UNICODE_BOM_SWAPPED
 0xFFFE

	)

74 
DECLSPEC
 
SDLCALL
 
TTF_ByãSw≠≥dUNICODE
(
sw≠≥d
);

77 
_TTF_F⁄t
 
	tTTF_F⁄t
;

80 
DECLSPEC
 
SDLCALL
 
TTF_Inô
();

86 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄t
(c⁄° *
fûe
, 
±size
);

87 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndex
(c⁄° *
fûe
, 
±size
, 
ödex
);

88 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
);

89 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndexRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
, 
ödex
);

92 
	#TTF_STYLE_NORMAL
 0x00

	)

93 
	#TTF_STYLE_BOLD
 0x01

	)

94 
	#TTF_STYLE_ITALIC
 0x02

	)

95 
	#TTF_STYLE_UNDERLINE
 0x04

	)

96 
	#TTF_STYLE_STRIKETHROUGH
 0x08

	)

97 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tStyÀ
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

98 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tStyÀ
(
TTF_F⁄t
 *
f⁄t
, 
°yÀ
);

99 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tOuéöe
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

100 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tOuéöe
(
TTF_F⁄t
 *
f⁄t
, 
ouéöe
);

103 
	#TTF_HINTING_NORMAL
 0

	)

104 
	#TTF_HINTING_LIGHT
 1

	)

105 
	#TTF_HINTING_MONO
 2

	)

106 
	#TTF_HINTING_NONE
 3

	)

107 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tHötög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

108 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tHötög
(
TTF_F⁄t
 *
f⁄t
, 
hötög
);

111 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tHeight
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

116 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tAs˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

121 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tDes˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

124 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tLöeSkù
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

127 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tKînög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

128 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tKînög
(
TTF_F⁄t
 *
f⁄t
, 
Ælowed
);

131 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚s
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

134 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚IsFixedWidth
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

135 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚FamûyName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

136 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚StyÀName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

139 
DECLSPEC
 
SDLCALL
 
TTF_GlyphIsProvided
(c⁄° 
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
);

145 
DECLSPEC
 
SDLCALL
 
TTF_GlyphMërics
(
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
,

146 *
möx
, *
maxx
,

147 *
möy
, *
maxy
, *
adv™˚
);

150 
DECLSPEC
 
SDLCALL
 
TTF_SizeText
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

151 
DECLSPEC
 
SDLCALL
 
TTF_SizeUTF8
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

152 
DECLSPEC
 
SDLCALL
 
TTF_SizeUNICODE
(
TTF_F⁄t
 *
f⁄t
, c⁄° 
Uöt16
 *
ãxt
, *
w
, *
h
);

160 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

161 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

162 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

163 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

164 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

165 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

174 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

175 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

182 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Shaded
(
TTF_F⁄t
 *
f⁄t
,

183 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

184 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Shaded
(
TTF_F⁄t
 *
f⁄t
,

185 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

186 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Shaded
(
TTF_F⁄t
 *
f⁄t
,

187 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

196 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Shaded
(
TTF_F⁄t
 *
f⁄t
,

197 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

203 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

204 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

205 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

206 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

207 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

208 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

216 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

217 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

220 
	#TTF_RídîText
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

221 
	`TTF_RídîText_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

222 
	#TTF_RídîUTF8
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

223 
	`TTF_RídîUTF8_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

224 
	#TTF_RídîUNICODE
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

225 
	`TTF_RídîUNICODE_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

228 
DECLSPEC
 
SDLCALL
 
TTF_Clo£F⁄t
(
TTF_F⁄t
 *
f⁄t
);

231 
DECLSPEC
 
SDLCALL
 
TTF_Quô
();

234 
DECLSPEC
 
SDLCALL
 
TTF_WasInô
();

237 
DECLSPEC
 
TTF_GëF⁄tKînögSize
(
TTF_F⁄t
 *
f⁄t
, 
¥ev_ödex
, 
ödex
);

240 
	#TTF_SëEº‹
 
SDL_SëEº‹


	)

241 
	#TTF_GëEº‹
 
SDL_GëEº‹


	)

244 #ifde‡
__˝lu•lus


247 
	~"˛o£_code.h
"

	@SDL_types.h

28 
	~"SDL_°döc.h
"

	@SDL_version.h

27 #i‚de‡
_SDL_vîsi⁄_h


28 
	#_SDL_vîsi⁄_h


	)

30 
	~"SDL_°döc.h
"

32 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


42 
	#SDL_MAJOR_VERSION
 1

	)

43 
	#SDL_MINOR_VERSION
 2

	)

44 
	#SDL_PATCHLEVEL
 15

	)

47 
	sSDL_vîsi⁄
 {

48 
Uöt8
 
maj‹
;

49 
Uöt8
 
mö‹
;

50 
Uöt8
 
∑tch
;

51 } 
	tSDL_vîsi⁄
;

57 
	#SDL_VERSION
(
X
) \

59 (
X
)->
maj‹
 = 
SDL_MAJOR_VERSION
; \

60 (
X
)->
mö‹
 = 
SDL_MINOR_VERSION
; \

61 (
X
)->
∑tch
 = 
SDL_PATCHLEVEL
; \

62 }

	)

68 
	#SDL_VERSIONNUM
(
X
, 
Y
, 
Z
) \

69 ((
X
)*1000 + (
Y
)*100 + (
Z
))

	)

72 
	#SDL_COMPILEDVERSION
 \

73 
	`SDL_VERSIONNUM
(
SDL_MAJOR_VERSION
, 
SDL_MINOR_VERSION
, 
SDL_PATCHLEVEL
)

	)

76 
	#SDL_VERSION_ATLEAST
(
X
, 
Y
, 
Z
) \

77 (
SDL_COMPILEDVERSION
 >
	`SDL_VERSIONNUM
(
X
, 
Y
, 
Z
))

	)

83 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
SDL_Löked_Vîsi⁄
();

86 #ifde‡
__˝lu•lus


89 
	~"˛o£_code.h
"

	@SDL_video.h

27 #i‚de‡
_SDL_video_h


28 
	#_SDL_video_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_rw›s.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


44 
	#SDL_ALPHA_OPAQUE
 255

	)

45 
	#SDL_ALPHA_TRANSPARENT
 0

	)

50 
	sSDL_Re˘
 {

51 
Söt16
 
x
, 
y
;

52 
Uöt16
 
w
, 
h
;

53 } 
	tSDL_Re˘
;

55 
	sSDL_Cﬁ‹
 {

56 
Uöt8
 
r
;

57 
Uöt8
 
g
;

58 
Uöt8
 
b
;

59 
Uöt8
 
unu£d
;

60 } 
	tSDL_Cﬁ‹
;

61 
	#SDL_Cﬁour
 
SDL_Cﬁ‹


	)

63 
	sSDL_PÆëã
 {

64 
ncﬁ‹s
;

65 
SDL_Cﬁ‹
 *
cﬁ‹s
;

66 } 
	tSDL_PÆëã
;

70 
	sSDL_PixñF‹m©
 {

71 
SDL_PÆëã
 *
∑Àâe
;

72 
Uöt8
 
BôsPîPixñ
;

73 
Uöt8
 
ByãsPîPixñ
;

74 
Uöt8
 
Rloss
;

75 
Uöt8
 
Gloss
;

76 
Uöt8
 
Bloss
;

77 
Uöt8
 
Aloss
;

78 
Uöt8
 
Rshi·
;

79 
Uöt8
 
Gshi·
;

80 
Uöt8
 
Bshi·
;

81 
Uöt8
 
Ashi·
;

82 
Uöt32
 
Rmask
;

83 
Uöt32
 
Gmask
;

84 
Uöt32
 
Bmask
;

85 
Uöt32
 
Amask
;

88 
Uöt32
 
cﬁ‹key
;

90 
Uöt8
 
Æpha
;

91 } 
	tSDL_PixñF‹m©
;

96 
	sSDL_SurÁ˚
 {

97 
Uöt32
 
Êags
;

98 
SDL_PixñF‹m©
 *
f‹m©
;

99 
w
, 
h
;

100 
Uöt16
 
pôch
;

101 *
pixñs
;

102 
off£t
;

105 
¥iv©e_hwd©a
 *
hwd©a
;

108 
SDL_Re˘
 
˛ù_ª˘
;

109 
Uöt32
 
unu£d1
;

112 
Uöt32
 
locked
;

115 
SDL_BlôM≠
 *
m≠
;

118 
f‹m©_vîsi⁄
;

121 
ªfcou¡
;

122 } 
	tSDL_SurÁ˚
;

131 
	#SDL_SWSURFACE
 0x00000000

	)

132 
	#SDL_HWSURFACE
 0x00000001

	)

133 
	#SDL_ASYNCBLIT
 0x00000004

	)

138 
	#SDL_ANYFORMAT
 0x10000000

	)

139 
	#SDL_HWPALETTE
 0x20000000

	)

140 
	#SDL_DOUBLEBUF
 0x40000000

	)

141 
	#SDL_FULLSCREEN
 0x80000000

	)

142 
	#SDL_OPENGL
 0x00000002

	)

143 
	#SDL_OPENGLBLIT
 0x0000000A

	)

144 
	#SDL_RESIZABLE
 0x00000010

	)

145 
	#SDL_NOFRAME
 0x00000020

	)

150 
	#SDL_HWACCEL
 0x00000100

	)

151 
	#SDL_SRCCOLORKEY
 0x00001000

	)

152 
	#SDL_RLEACCELOK
 0x00002000

	)

153 
	#SDL_RLEACCEL
 0x00004000

	)

154 
	#SDL_SRCALPHA
 0x00010000

	)

155 
	#SDL_PREALLOC
 0x01000000

	)

161 
	#SDL_MUSTLOCK
(
surÁ˚
) \

162 (
surÁ˚
->
off£t
 || \

163 ((
surÁ˚
->
Êags
 & (
SDL_HWSURFACE
|
SDL_ASYNCBLIT
|
SDL_RLEACCEL
)Ë!0))

	)

166 (*
SDL_blô
)(
	tSDL_SurÁ˚
 *
	t§c
, 
	tSDL_Re˘
 *
	t§¸e˘
,

167 
	tSDL_SurÁ˚
 *
	td°
, 
	tSDL_Re˘
 *
	td°ª˘
);

171 
	sSDL_VideoInfo
 {

172 
Uöt32
 
hw_avaûabÀ
 :1;

173 
Uöt32
 
wm_avaûabÀ
 :1;

174 
Uöt32
 
Unu£dBôs1
 :6;

175 
Uöt32
 
Unu£dBôs2
 :1;

176 
Uöt32
 
blô_hw
 :1;

177 
Uöt32
 
blô_hw_CC
 :1;

178 
Uöt32
 
blô_hw_A
 :1;

179 
Uöt32
 
blô_sw
 :1;

180 
Uöt32
 
blô_sw_CC
 :1;

181 
Uöt32
 
blô_sw_A
 :1;

182 
Uöt32
 
blô_fûl
 :1;

183 
Uöt32
 
Unu£dBôs3
 :16;

184 
Uöt32
 
video_mem
;

185 
SDL_PixñF‹m©
 *
vfmt
;

186 
cuºít_w
;

187 
cuºít_h
;

188 } 
	tSDL_VideoInfo
;

200 
	#SDL_YV12_OVERLAY
 0x32315659

	)

201 
	#SDL_IYUV_OVERLAY
 0x56555949

	)

202 
	#SDL_YUY2_OVERLAY
 0x32595559

	)

203 
	#SDL_UYVY_OVERLAY
 0x59565955

	)

204 
	#SDL_YVYU_OVERLAY
 0x55595659

	)

208 
	sSDL_Ovîœy
 {

209 
Uöt32
 
f‹m©
;

210 
w
, 
h
;

211 
∂™es
;

212 
Uöt16
 *
pôches
;

213 
Uöt8
 **
pixñs
;

217 
¥iv©e_yuvhwfuncs
 *
hwfuncs
;

218 
¥iv©e_yuvhwd©a
 *
hwd©a
;

223 
Uöt32
 
hw_ovîœy
 :1;

224 
Uöt32
 
Unu£dBôs
 :31;

226 } 
	tSDL_Ovîœy
;

231 
SDL_GL_RED_SIZE
,

232 
SDL_GL_GREEN_SIZE
,

233 
SDL_GL_BLUE_SIZE
,

234 
SDL_GL_ALPHA_SIZE
,

235 
SDL_GL_BUFFER_SIZE
,

236 
SDL_GL_DOUBLEBUFFER
,

237 
SDL_GL_DEPTH_SIZE
,

238 
SDL_GL_STENCIL_SIZE
,

239 
SDL_GL_ACCUM_RED_SIZE
,

240 
SDL_GL_ACCUM_GREEN_SIZE
,

241 
SDL_GL_ACCUM_BLUE_SIZE
,

242 
SDL_GL_ACCUM_ALPHA_SIZE
,

243 
SDL_GL_STEREO
,

244 
SDL_GL_MULTISAMPLEBUFFERS
,

245 
SDL_GL_MULTISAMPLESAMPLES
,

246 
SDL_GL_ACCELERATED_VISUAL
,

247 
SDL_GL_SWAP_CONTROL


248 } 
	tSDL_GL©å
;

252 
	#SDL_LOGPAL
 0x01

	)

253 
	#SDL_PHYSPAL
 0x02

	)

275 
DECLSPEC
 
SDLCALL
 
SDL_VideoInô
(c⁄° *
drivî_«me
, 
Uöt32
 
Êags
);

276 
DECLSPEC
 
SDLCALL
 
SDL_VideoQuô
();

284 
DECLSPEC
 * 
SDLCALL
 
SDL_VideoDrivîName
(*
«mebuf
, 
maxÀn
);

292 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_GëVideoSurÁ˚
();

300 
DECLSPEC
 c⁄° 
SDL_VideoInfo
 * 
SDLCALL
 
SDL_GëVideoInfo
();

313 
DECLSPEC
 
SDLCALL
 
SDL_VideoModeOK
(
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

324 
DECLSPEC
 
SDL_Re˘
 ** 
SDLCALL
 
SDL_Li°Modes
(
SDL_PixñF‹m©
 *
f‹m©
, 
Uöt32
 
Êags
);

384 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_SëVideoMode


385 (
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

394 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘s


395 (
SDL_SurÁ˚
 *
s¸ìn
, 
numª˘s
, 
SDL_Re˘
 *
ª˘s
);

400 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘


401 (
SDL_SurÁ˚
 *
s¸ìn
, 
Söt32
 
x
, Söt32 
y
, 
Uöt32
 
w
, Uöt32 
h
);

414 
DECLSPEC
 
SDLCALL
 
SDL_Flù
(
SDL_SurÁ˚
 *
s¸ìn
);

424 
DECLSPEC
 
SDLCALL
 
SDL_SëGamma
(
ªd
, 
gªí
, 
blue
);

438 
DECLSPEC
 
SDLCALL
 
SDL_SëGammaRamp
(c⁄° 
Uöt16
 *
ªd
, c⁄° Uöt16 *
gªí
, c⁄° Uöt16 *
blue
);

449 
DECLSPEC
 
SDLCALL
 
SDL_GëGammaRamp
(
Uöt16
 *
ªd
, Uöt16 *
gªí
, Uöt16 *
blue
);

466 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹s
(
SDL_SurÁ˚
 *
surÁ˚
,

467 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
, 
ncﬁ‹s
);

485 
DECLSPEC
 
SDLCALL
 
SDL_SëPÆëã
(
SDL_SurÁ˚
 *
surÁ˚
, 
Êags
,

486 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
,

487 
ncﬁ‹s
);

492 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGB


493 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

494 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
);

499 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGBA


500 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

501 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
, c⁄° Uöt8 
a
);

506 
DECLSPEC
 
SDLCALL
 
SDL_GëRGB
(
Uöt32
 
pixñ
,

507 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

508 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
);

513 
DECLSPEC
 
SDLCALL
 
SDL_GëRGBA
(
Uöt32
 
pixñ
,

514 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

515 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
, Uöt8 *
a
);

518 
	#SDL_AŒocSurÁ˚
 
SDL_Cª©eRGBSurÁ˚


	)

553 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚


554 (
Uöt32
 
Êags
, 
width
, 
height
, 
dïth
,

555 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

557 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚From
(*
pixñs
,

558 
width
, 
height
, 
dïth
, 
pôch
,

559 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

560 
DECLSPEC
 
SDLCALL
 
SDL_FªeSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

580 
DECLSPEC
 
SDLCALL
 
SDL_LockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

581 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

589 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

592 
	#SDL_LﬂdBMP
(
fûe
Ë
	`SDL_LﬂdBMP_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

599 
DECLSPEC
 
SDLCALL
 
SDL_SaveBMP_RW


600 (
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_RW›s
 *
d°
, 
‰ìd°
);

603 
	#SDL_SaveBMP
(
surÁ˚
, 
fûe
) \

604 
	`SDL_SaveBMP_RW
(
surÁ˚
, 
	`SDL_RWFromFûe
(
fûe
, "wb"), 1)

	)

615 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹Key


616 (
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, Uöt32 
key
);

633 
DECLSPEC
 
SDLCALL
 
SDL_SëAÕha
(
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, 
Uöt8
 
Æpha
);

647 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, c⁄° 
SDL_Re˘
 *
ª˘
);

654 
DECLSPEC
 
SDLCALL
 
SDL_GëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_Re˘
 *
ª˘
);

668 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_C⁄vîtSurÁ˚


669 (
SDL_SurÁ˚
 *
§c
, 
SDL_PixñF‹m©
 *
fmt
, 
Uöt32
 
Êags
);

743 
	#SDL_BlôSurÁ˚
 
SDL_UµîBlô


	)

748 
DECLSPEC
 
SDLCALL
 
SDL_UµîBlô


749 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

750 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

754 
DECLSPEC
 
SDLCALL
 
SDL_LowîBlô


755 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

756 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

767 
DECLSPEC
 
SDLCALL
 
SDL_FûlRe˘


768 (
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
, 
Uöt32
 
cﬁ‹
);

781 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©
(SDL_SurÁ˚ *
surÁ˚
);

795 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©AÕha
(SDL_SurÁ˚ *
surÁ˚
);

807 
DECLSPEC
 
SDL_Ovîœy
 * 
SDLCALL
 
SDL_Cª©eYUVOvîœy
(
width
, 
height
,

808 
Uöt32
 
f‹m©
, 
SDL_SurÁ˚
 *
di•œy
);

811 
DECLSPEC
 
SDLCALL
 
SDL_LockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

812 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

820 
DECLSPEC
 
SDLCALL
 
SDL_Di•œyYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
, 
SDL_Re˘
 *
d°ª˘
);

823 
DECLSPEC
 
SDLCALL
 
SDL_FªeYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

837 
DECLSPEC
 
SDLCALL
 
SDL_GL_LﬂdLibøry
(c⁄° *
∑th
);

842 
DECLSPEC
 * 
SDLCALL
 
SDL_GL_GëProcAddªss
(c⁄° * 
¥oc
);

847 
DECLSPEC
 
SDLCALL
 
SDL_GL_SëAâribuã
(
SDL_GL©å
 
©å
, 
vÆue
);

858 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëAâribuã
(
SDL_GL©å
 
©å
, * 
vÆue
);

863 
DECLSPEC
 
SDLCALL
 
SDL_GL_Sw≠Buf„rs
();

870 
DECLSPEC
 
SDLCALL
 
SDL_GL_Upd©eRe˘s
(
numª˘s
, 
SDL_Re˘
* 
ª˘s
);

871 
DECLSPEC
 
SDLCALL
 
SDL_GL_Lock
();

872 
DECLSPEC
 
SDLCALL
 
SDL_GL_U∆ock
();

885 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëC≠ti⁄
(c⁄° *
tôÀ
, c⁄° *
ic⁄
);

889 
DECLSPEC
 
SDLCALL
 
SDL_WM_GëC≠ti⁄
(**
tôÀ
, **
ic⁄
);

897 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëIc⁄
(
SDL_SurÁ˚
 *
ic⁄
, 
Uöt8
 *
mask
);

904 
DECLSPEC
 
SDLCALL
 
SDL_WM_Ic⁄ifyWödow
();

921 
DECLSPEC
 
SDLCALL
 
SDL_WM_ToggÀFuŒS¸ìn
(
SDL_SurÁ˚
 *
surÁ˚
);

924 
	gSDL_GRAB_QUERY
 = -1,

925 
	gSDL_GRAB_OFF
 = 0,

926 
	gSDL_GRAB_ON
 = 1,

927 
	gSDL_GRAB_FULLSCREEN


928 } 
	tSDL_GøbMode
;

937 
DECLSPEC
 
SDL_GøbMode
 
SDLCALL
 
SDL_WM_GøbI≈ut
(SDL_GøbModê
mode
);

942 
DECLSPEC
 
SDLCALL
 
SDL_So·Såëch
(
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

943 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

946 #ifde‡
__˝lu•lus


949 
	~"˛o£_code.h
"

	@background.cpp

7 
	~"SDL/SDL.h
"

8 
	~"SDL/SDL_image.h
"

9 
	~<°rög
>

10 
	~"mylib
"

13 
SDL_SurÁ˚
 *
	gimage
 = 
NULL
;

19 
SDL_SurÁ˚
 *
	$lﬂd_image
–
°d
::
°rög
 
fûíame
 )

22 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

25 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

28 
lﬂdedImage
 = 
	`IMG_Lﬂd
–
fûíame
.
	`c_°r
() );

31 if–
lﬂdedImage
 !
NULL
 )

34 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
–
lﬂdedImage
 );

37 
	`SDL_FªeSurÁ˚
–
lﬂdedImage
 );

40 if–
›timizedImage
 !
NULL
 )

43 
Uöt32
 
cﬁ‹key
 = 
	`SDL_M≠RGB
–
›timizedImage
->
f‹m©
, 0xFF, 0xFF, 0xFF );

46 
	`SDL_SëCﬁ‹Key
–
›timizedImage
, 
SDL_SRCCOLORKEY
, 
cﬁ‹key
 );

49  
›timizedImage
;

50 
	}
}

52 
	$≠∂y_surÁ˚
–
x
, 
y
, 
SDL_SurÁ˚
* 
sour˚
, SDL_SurÁ˚* 
de°ö©i⁄
 )

55 
SDL_Re˘
 
off£t
;

58 
off£t
.
x
 = x;

59 
off£t
.
y
 = y;

62 
	`SDL_BlôSurÁ˚
–
sour˚
, 
NULL
, 
de°ö©i⁄
, &
off£t
 );

63 
	}
}

65 
boﬁ
 
	$öô
()

68 if–
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 ) == -1 )

70  
Ál£
;

74 
s¸ìn
 = 
	`SDL_SëVideoMode
–
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
 );

77 if–
s¸ìn
 =
NULL
 )

79  
Ál£
;

83 
	`SDL_WM_SëC≠ti⁄
–"Evíàã°", 
NULL
 );

86  
åue
;

87 
	}
}

89 
boﬁ
 
	$lﬂd_fûes
()

92 
image
 = 
	`lﬂd_image
( "libpic/area.xcf" );

95 if–
image
 =
NULL
 )

97  
Ál£
;

99 
bﬂt
 = 
	`lﬂd_image
( "libpic/n_boat.xcf" );

100 if–
bﬂt
 =
NULL
 )

102  
Ál£
;

106  
åue
;

107 
	}
}

109 
	$˛ón_up
()

112 
	`SDL_FªeSurÁ˚
–
image
 );

113 
	`SDL_FªeSurÁ˚
–
bﬂt
 );

116 
	`SDL_Quô
();

117 
	}
}

	@begin_code.h

34 #ifde‡
_begö_code_h


35 #îr‹ 
Ne°ed
 
ö˛usi⁄
 
of
 
begö_code
.
h


37 
	#_begö_code_h


	)

43 #i‚de‡
DECLSPEC


44 #i‡
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

45 #i‡
deföed
(
__GNUC__
)

46 
	#DECLSPEC


	)

48 
	#DECLSPEC
 
	`__de˛•ec
(
exp‹t
)

	)

50 #ñi‡
deföed
(
__WIN32__
)

51 #ifde‡
__BORLANDC__


52 #ifde‡
BUILD_SDL


53 
	#DECLSPEC


	)

55 
	#DECLSPEC
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

60 #ñi‡
deföed
(
__OS2__
)

61 #ifde‡
__WATCOMC__


62 #ifde‡
BUILD_SDL


63 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

65 
	#DECLSPEC


	)

67 #ñi‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

68 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

69 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

70 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

71 #ifde‡
BUILD_SDL


72 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

74 
	#DECLSPEC


	)

77 
	#DECLSPEC


	)

80 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

81 
	#DECLSPEC
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

83 
	#DECLSPEC


	)

92 #i‚de‡
SDLCALL


93 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__GNUC__
)

94 
	#SDLCALL
 
__cde˛


	)

95 #ñi‡
deföed
(
__OS2__
)

96 #i‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

97 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

98 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

99 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

100 
	#SDLCALL
 
_cde˛


	)

102 #/* 
On
 
Ÿhî
 
compûîs
 
⁄
 
OS
/2, 
we
 
u£
 
the
 
_Sy°em
 
ˇŒög
 
c⁄víti⁄
 */

103 #/* 
to
 
be
 
com∑tibÀ
 
wôh
 
evîy
 
compûî
 */

104 
	#SDLCALL
 
_Sy°em


	)

107 
	#SDLCALL


	)

111 #ifde‡
__SYMBIAN32__


112 #i‚de‡
EKA2


113 #unde‡
DECLSPEC


114 
	#DECLSPEC


	)

115 #ñi‡!
deföed
(
__WINS__
)

116 #unde‡
DECLSPEC


117 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

128 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__BORLANDC__
)

129 #ifde‡
_MSC_VER


130 #¥agm®
w¨nög
(
dißbÀ
: 4103)

132 #ifde‡
__BORLANDC__


133 #¥agm®
n›ackw¨nög


135 #ifde‡
_M_X64


137 #¥agm®
∑ck
(
push
,8)

139 #¥agm®
∑ck
(
push
,4)

141 #ñi‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

142 #¥agm®
›ti⁄s
 
Æign
=
mac68k4byã


143 #¥agm®
íumßlwaysöt
 
⁄


150 #i‚de‡
SDL_INLINE_OKAY


151 #ifde‡
__GNUC__


152 
	#SDL_INLINE_OKAY


	)

155 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
) || \

156 
deföed
(
__DMC__
Ë|| deföed(
__SC__
) || \

157 
deföed
(
__WATCOMC__
Ë|| deföed(
__LCC__
) || \

158 
deföed
(
__DECC
Ë|| 
	$deföed
(
__EABI__
)

159 #i‚de‡
__ölöe__


160 
	#__ölöe__
 
__ölöe


	)

162 
	#SDL_INLINE_OKAY


	)

164 #i‡!
	`deföed
(
__MRC__
Ë&& !deföed(
_SGI_SOURCE
)

165 #i‚de‡
__ölöe__


166 
	#__ölöe__
 
ölöe


	)

168 
	#SDL_INLINE_OKAY


	)

180 #i‚de‡
SDL_INLINE_OKAY


181 
	#__ölöe__


	)

188 #i‡!
	`deföed
(
__MACH__
)

189 #i‚de‡
NULL


190 #ifde‡
__˝lu•lus


191 
	#NULL
 0

	)

193 
	#NULL
 ((*)0)

	)

	@close_code.h

29 #unde‡
_begö_code_h


35 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__WATCOMC__
Ë|| deföed(
__BORLANDC__
)

36 #ifde‡
__BORLANDC__


37 #¥agm®
n›ackw¨nög


39 #i‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

40 #¥agm®
›ti⁄s
 
Æign
=
ª£t


41 #¥agm®
íumßlwaysöt
 
ª£t


43 #¥agm®
∑ck
(
p›
)

	@defisland.c

1 
	$puçixñ
(
SDL_SurÁ˚
 *
surÁ˚
,
x
,
y
,
Uöt32
 
pixñ
)

3 
bµ
=
surÁ˚
->
f‹m©
->
ByãsPîPixñ
;

4 
Uöt8
 *
p
 =(
Uöt
 8 *)
surÁ˚
 ->
pixñs
 +
y
*surÁ˚ ->
pôch
 +
x
*
bµ
;

5 
bµ
)

8 *
p
=(
Uöt8
)
pixñ
;;

10 *(
Uöt16
 *)
p
=(
Uöt8
)
pixñ
;;

12 if(
SDL_BYTEORDER
==
SDL_BIG_ENDIAN
)

14 
p
[0]=(
Uöt8
)
pixñ
&0xff;

15 
p
[1]=((
Uöt8
)
pixñ
>>8)&0xff;

16 
p
[2]=((
Uöt8
)
pixñ
>>16)&
oxff
;

19 
ˇ£4
 :

20 *(
Uöt32
 *)
p
=
pixñ
;;

22 
	}
}

24 
	$putcc16
(
SDL_SurÁ˚
 *
surÁ˚
,
x
,
y
,
wid
,
xt
,
yt
,
unsighed
 
b
,
g
,
r
,
backb
,
backg
,
backr
, *
°r
)

26 
zcode
,
bcode
;

27 
i
,
j
,
k
,
ªc
;

28 
Àn
;

29 
buf
[32];

31 *
°r
)

33 if((*
°r
&0x80)&&(*(str+1)&0x80))

35 
zcode
=(*
°r
-0xa1)&07f;

36 
bcode
=(*(
°r
+1)-0xa1)&0x07f;

37 
ªc
=
zcode
*94+
bcode
;

38 
Àn
=
ªc
*32L;

39 
	`f£ek
(
hzk16Â
,
Àn
,
SEEK_SET
);

40 
	`‰ód
(
buf
,1,32,
hzk16Â
);

41 
i
=0;i<16;i++)

42 
j
=0;j<2;j++)

43 
k
=0;k<8;k++)

44 if(
buf
[
i
*2+
j
]>>(7-
k
)&1)

45 
	`puçixñ
(
surÁ˚
,
x
+()((
j
*8+
k
)*
xt
),
y
+()(
i
*
yt
),(
Uöt32
)(
b
<<0)+(Uöt32)(
g
<<8)+(Uöt32)(
r
<<16));

47 
	`puçixñ
(
surÁ˚
,
x
+()(
j
*8+
k
)*
xt
),
y
+()(
i
*
yt
),(
Uöt32
)(
backb
<<0)+(Uöt32)(
backg
<<8)+(Uöt32)(
backr
<<16));

48 
x
=x+()(16*
xt
)+
wid
;

49 
°r
+=2;

53 
	`f£ek
(
a£16Â
,(*
°r
)*16,
SEEK_SET
);

54 
	`‰ód
(
buf
,1,16,
asc16Â
);

55 
i
=0;i<16;i++)

56 
j
=0;j<8;j++)

57 if(
buf
[
i
]>>(7-
j
)&1)

58 
	`puçixñ
(
surÁ˚
,
x
+()(
j
*
xt
),
y
+()(
i
*
yt
),(
Uöt32
)(
b
<<0)+(Uöt32)(
g
<<8)+(Uöt32)(
r
<<16));

60 
	`puçixñ
(
surÁ˚
,
x
+()(
j
*
xt
),
y
+()(
i
*
yt
),(
Uöt32
)(
backb
<<0)+(Uöt32)(
backg
<<8)+(Uöt32)(
backr
<<16));

61 
x
=x+()(8*
xt
)+
wid
;

62 
°r
+=1;

65 
	}
}

	@lesson16/lesson16.cpp

5 
	~"SDL/SDL.h
"

6 
	~"SDL/SDL_image.h
"

7 
	~<°rög
>

10 c⁄° 
	gSCREEN_WIDTH
 = 640;

11 c⁄° 
	gSCREEN_HEIGHT
 = 480;

12 c⁄° 
	gSCREEN_BPP
 = 32;

15 c⁄° 
	gFRAMES_PER_SECOND
 = 20;

18 c⁄° 
	gDOT_WIDTH
 = 20;

19 c⁄° 
	gDOT_HEIGHT
 = 20;

22 
SDL_SurÁ˚
 *
	gdŸ
 = 
NULL
;

23 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

24 
SDL_SurÁ˚
 *
	g¨ó
 = 
NULL
;

26 
SDL_Evít
 
	gevít
;

29 ˛as†
	cDŸ


31 
	m¥iv©e
:

33 
x
, 
	my
;

36 
	mxVñ
, 
	myVñ
;

38 
	mpublic
:

40 
DŸ
();

43 
h™dÀ_öput
();

46 
move
();

49 
show
();

53 ˛as†
	cTimî


55 
	m¥iv©e
:

57 
°¨tTicks
;

60 
	m∑u£dTicks
;

63 
boﬁ
 
	m∑u£d
;

64 
boﬁ
 
	m°¨ãd
;

66 
	mpublic
:

68 
Timî
();

71 
°¨t
();

72 
°›
();

73 
∑u£
();

74 
u≈au£
();

77 
gë_ticks
();

80 
boﬁ
 
is_°¨ãd
();

81 
boﬁ
 
is_∑u£d
();

84 
SDL_SurÁ˚
 *
	$lﬂd_image
–
°d
::
°rög
 
fûíame
 )

87 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

90 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

93 
lﬂdedImage
 = 
	`IMG_Lﬂd
–
fûíame
.
	`c_°r
() );

96 if–
lﬂdedImage
 !
NULL
 )

99 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
–
lﬂdedImage
 );

102 
	`SDL_FªeSurÁ˚
–
lﬂdedImage
 );

105 if–
›timizedImage
 !
NULL
 )

108 
	`SDL_SëCﬁ‹Key
–
›timizedImage
, 
SDL_SRCCOLORKEY
, 
	`SDL_M≠RGB
–›timizedImage->
f‹m©
, 0, 0xFF, 0xFF ) );

113  
›timizedImage
;

114 
	}
}

116 
	$≠∂y_surÁ˚
–
x
, 
y
, 
SDL_SurÁ˚
* 
sour˚
, SDL_SurÁ˚* 
de°ö©i⁄
, 
SDL_Re˘
* 
˛ù
 = 
NULL
 )

119 
SDL_Re˘
 
off£t
;

122 
off£t
.
x
 = x;

123 
off£t
.
y
 = y;

126 
	`SDL_BlôSurÁ˚
–
sour˚
, 
˛ù
, 
de°ö©i⁄
, &
off£t
 );

127 
	}
}

129 
boﬁ
 
	$öô
()

132 if–
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 ) == -1 )

134  
Ál£
;

138 
s¸ìn
 = 
	`SDL_SëVideoMode
–
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
 );

141 if–
s¸ìn
 =
NULL
 )

143  
Ál£
;

147 
	`SDL_WM_SëC≠ti⁄
–"MovêthêDŸ", 
NULL
 );

150  
åue
;

151 
	}
}

153 
boﬁ
 
	$lﬂd_fûes
()

156 
dŸ
 = 
	`lﬂd_image
( "dot.bmp" );

157 if–
dŸ
 =
NULL
 )

159  
Ál£
;

163 
¨ó
 = 
	`lﬂd_image
( "~/download/Defend-the-Diaoyu-Island/libpic/area.gif");

164 if–
¨ó
 =
NULL
 )

166  
Ál£
;

171  
åue
;

172 
	}
}

174 
	$˛ón_up
()

177 
	`SDL_FªeSurÁ˚
–
dŸ
 );

178 
	`SDL_FªeSurÁ˚
–
¨ó
 );

180 
	`SDL_Quô
();

181 
	}
}

183 
	gDŸ
::
	$DŸ
()

186 
x
 = 0;

187 
y
 = 0;

190 
xVñ
 = 0;

191 
yVñ
 = 0;

192 
	}
}

194 
	gDŸ
::
	$h™dÀ_öput
()

197 if–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

200  
evít
.
key
.
keysym
.
sym
 )

202 
SDLK_UP
: 
yVñ
 -
DOT_HEIGHT
 / 2; ;

203 
SDLK_DOWN
: 
yVñ
 +
DOT_HEIGHT
 / 2; ;

204 
SDLK_LEFT
: 
xVñ
 -
DOT_WIDTH
 / 2; ;

205 
SDLK_RIGHT
: 
xVñ
 +
DOT_WIDTH
 / 2; ;

209 if–
evít
.
ty≥
 =
SDL_KEYUP
 )

212  
evít
.
key
.
keysym
.
sym
 )

214 
SDLK_UP
: 
yVñ
 +
DOT_HEIGHT
 / 2; ;

215 
SDLK_DOWN
: 
yVñ
 -
DOT_HEIGHT
 / 2; ;

216 
SDLK_LEFT
: 
xVñ
 +
DOT_WIDTH
 / 2; ;

217 
SDLK_RIGHT
: 
xVñ
 -
DOT_WIDTH
 / 2; ;

220 
	}
}

222 
	gDŸ
::
	$move
()

225 
x
 +
xVñ
;

228 if––
x
 < 0 ) || ( x + 
DOT_WIDTH
 > 
SCREEN_WIDTH
 ) )

231 
x
 -
xVñ
;

235 
y
 +
yVñ
;

238 if––
y
 < 0 ) || ( y + 
DOT_HEIGHT
 > 
SCREEN_HEIGHT
 ) )

241 
y
 -
yVñ
;

243 
	}
}

245 
	gDŸ
::
	$show
()

248 
	`≠∂y_surÁ˚
–
x
, 
y
, 
dŸ
, 
s¸ìn
 );

249 
	}
}

251 
	gTimî
::
	$Timî
()

254 
°¨tTicks
 = 0;

255 
∑u£dTicks
 = 0;

256 
∑u£d
 = 
Ál£
;

257 
°¨ãd
 = 
Ál£
;

258 
	}
}

260 
	gTimî
::
	$°¨t
()

263 
°¨ãd
 = 
åue
;

266 
∑u£d
 = 
Ál£
;

269 
°¨tTicks
 = 
	`SDL_GëTicks
();

270 
	}
}

272 
	gTimî
::
	$°›
()

275 
°¨ãd
 = 
Ál£
;

278 
∑u£d
 = 
Ál£
;

279 
	}
}

281 
	gTimî
::
	$∑u£
()

284 if––
°¨ãd
 =
åue
 ) && ( 
∑u£d
 =
Ál£
 ) )

287 
∑u£d
 = 
åue
;

290 
∑u£dTicks
 = 
	`SDL_GëTicks
(Ë- 
°¨tTicks
;

292 
	}
}

294 
	gTimî
::
	$u≈au£
()

297 if–
∑u£d
 =
åue
 )

300 
∑u£d
 = 
Ál£
;

303 
°¨tTicks
 = 
	`SDL_GëTicks
(Ë- 
∑u£dTicks
;

306 
∑u£dTicks
 = 0;

308 
	}
}

310 
	gTimî
::
	$gë_ticks
()

313 if–
°¨ãd
 =
åue
 )

316 if–
∑u£d
 =
åue
 )

319  
∑u£dTicks
;

324  
	`SDL_GëTicks
(Ë- 
°¨tTicks
;

330 
	}
}

332 
boﬁ
 
	gTimî
::
	$is_°¨ãd
()

334  
°¨ãd
;

335 
	}
}

337 
boﬁ
 
	gTimî
::
	$is_∑u£d
()

339  
∑u£d
;

340 
	}
}

342 
	$maö
–
¨gc
, * 
¨gs
[] )

345 
boﬁ
 
quô
 = 
Ál£
;

348 
DŸ
 
myDŸ
;

351 
Timî
 
Âs
;

354 if–
	`öô
(Ë=
Ál£
 )

360 if–
	`lﬂd_fûes
(Ë=
Ál£
 )

364 
	`≠∂y_surÁ˚
–0, 0, 
¨ó
, 
s¸ìn
 );

367  
quô
 =
Ál£
 )

370 
Âs
.
	`°¨t
();

373  
	`SDL_PﬁlEvít
–&
evít
 ) )

376 
myDŸ
.
	`h™dÀ_öput
();

379 if–
evít
.
ty≥
 =
SDL_QUIT
 )

382 
quô
 = 
åue
;

387 
myDŸ
.
	`move
();

390 
	`SDL_FûlRe˘
–
s¸ìn
, &s¸ìn->
˛ù_ª˘
, 
	`SDL_M≠RGB
–s¸ìn->
f‹m©
, 0xFF, 0xFF, 0xFF ) );

393 
myDŸ
.
	`show
();

396 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

402 if–
Âs
.
	`gë_ticks
(Ë< 1000 / 
FRAMES_PER_SECOND
 )

404 
	`SDL_Dñay
––1000 / 
FRAMES_PER_SECOND
 ) - 
Âs
.
	`gë_ticks
() );

409 
	`˛ón_up
();

412 
	}
}

	@luck.c

1 
	~"luck.h
"

2 
	$luck
()

4 
	`¥ötf
("goodÜuck!");

5 
	}
}

	@luck.h

1 
luck
();

	@main.cpp

6 
	~"SDL/SDL.h
"

7 
	~"SDL/SDL_image.h
"

8 
	~<°rög
>

10 
	~"background.˝p
"

12 
	$maö
–
¨gc
, * 
¨gs
[] )

15 
boﬁ
 
quô
 = 
Ál£
;

20 if–
	`öô
(Ë=
Ál£
 )

27 if–
	`lﬂd_fûes
(Ë=
Ál£
 )

33 
	`≠∂y_surÁ˚
(0, 0, 
image
, 
s¸ìn
 );

34 
	`≠∂y_surÁ˚
(400, 400, 
bﬂt
, 
s¸ìn
);

37 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

43  
quô
 =
Ál£
 )

46  
	`SDL_PﬁlEvít
–&
evít
 ) )

49 if–
evít
.
ty≥
 =
SDL_QUIT
 )

52 
quô
 = 
åue
;

59 
	`˛ón_up
();

62 
	}
}

	@mysource.cpp

1 
	~"SDL/SDL_image.h
"

2 
	~"SDL/SDL.h
"

3 
	~<°rög
>

4 
	~"SDL/SDL_âf.h
"

5 
	~"mylib
"

8 
SDL_SurÁ˚
 *
	gmesßge
 = 
NULL
;

10 
SDL_SurÁ˚
 *
	gbackground
 = 
NULL
;

11 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

12 
SDL_SurÁ˚
 *
	gupMesßge
 = 
NULL
;

13 
SDL_SurÁ˚
 *
	gdownMesßge
 = 
NULL
;

14 
SDL_SurÁ˚
 *
	grightMesßge
 = 
NULL
;

15 
SDL_SurÁ˚
 *
	gÀ·Mesßge
 = 
NULL
;

16 
SDL_Evít
 
	gevít
;

17 
SDL_Re˘
 
	g˛ù
[ 4 ];

20 
TTF_F⁄t
 *
	gf⁄t
 = 
NULL
;

23 
SDL_Cﬁ‹
 
	gãxtCﬁ‹
 = { 0, 0, 0 };

26 
SDL_SurÁ˚
 *
	$lﬂd_image
–
°d
::
°rög
 
fûíame
 )

29 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

32 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

35 
lﬂdedImage
 = 
	`IMG_Lﬂd
–
fûíame
.
	`c_°r
() );

38 if–
lﬂdedImage
 !
NULL
 )

41 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
–
lﬂdedImage
 );

43 
	`SDL_FªeSurÁ˚
–
lﬂdedImage
 );

47 if–
›timizedImage
 !=
NULL
 )

50 
Uöt32
 
cﬁ‹key
 = 
	`SDL_M≠RGB
–
›timizedImage
->
f‹m©
, 0xFF, 0xFF, 0xFF );

53 
	`SDL_SëCﬁ‹Key
–
›timizedImage
, 
SDL_SRCCOLORKEY
, 
	`SDL_M≠RGB
(›timizedImage->
f‹m©
, 0, 0xFF, 0xFF ) );

58  
›timizedImage
;

59 
	}
}

60 
	$≠∂y_surÁ˚
–
x
, 
y
, 
SDL_SurÁ˚
* 
sour˚
, SDL_SurÁ˚* 
de°ö©i⁄
, 
SDL_Re˘
* 
˛ù
 = 
NULL
 )

63 
SDL_Re˘
 
off£t
;

65 
off£t
.
x
 = x;

66 
off£t
.
y
 = y;

68 
	`SDL_BlôSurÁ˚
–
sour˚
, 
˛ù
, 
de°ö©i⁄
, &
off£t
);

69 
	}
}

71 
boﬁ
 
	$öô
()

74 if–
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 ) == -1)

76  
Ál£
;

80 
s¸ìn
 = 
	`SDL_SëVideoMode
 (
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
 );

82 if–
s¸ìn
 =
NULL
 )

84  
Ál£
;

88 
	`SDL_WM_SëC≠ti⁄
–"S∂ôÅhêÆl_bﬂt.jpg", 
NULL
);

91  
åue
;

92 
	}
}

94 
boﬁ
 
	$lﬂd_fûes
()

98 
mesßge
 = 
	`lﬂd_image
( "libpic/boat.xcf" );

101 
f⁄t
 = 
	`TTF_O≥nF⁄t
( "lazy.ttf", 72 );

104 if–
mesßge
 =
NULL
 )

106  
Ál£
;

109 if–
f⁄t
 =
NULL
 )

111  
Ál£
;

114  
åue
;

115 
	}
}

119 
	$˛ón_up
()

122 
	`SDL_FªeSurÁ˚
–
background
 );

124 
	`SDL_FªeSurÁ˚
–
mesßge
 );

125 
	`SDL_FªeSurÁ˚
–
upMesßge
 );

126 
	`SDL_FªeSurÁ˚
–
downMesßge
 );

127 
	`SDL_FªeSurÁ˚
–
À·Mesßge
 );

128 
	`SDL_FªeSurÁ˚
–
rightMesßge
 );

131 
	`TTF_Clo£F⁄t
–
f⁄t
 );

132 
	`TTF_Quô
();

133 
	`SDL_Quô
();

134 
	}
}

136 
	$maö
–
¨gc
, * 
¨gs
[] )

140 if–
	`öô
(Ë=
Ál£
 )

147 
boﬁ
 
quô
 = 
Ál£
;

150 if–
	`öô
(Ë=
Ál£
 )

156 if–
	`lﬂd_fûes
(Ë==
Ál£
 )

161 
upMesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "U∞wa†¥es£d.", 
ãxtCﬁ‹
 );

162 
downMesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Dow¿wa†¥es£d.", 
ãxtCﬁ‹
 );

163 
À·Mesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Le· wa†¥es£d.", 
ãxtCﬁ‹
 );

164 
rightMesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Righàwa†¥es£d.", 
ãxtCﬁ‹
 );

167 
mesßge
 = 
	`TTF_RídîText_Sﬁid
–
f⁄t
, "Inode_LF, goodÜuck f‹ you",
ãxtCﬁ‹
 );

168 if–
mesßge
 =
NULL
 )

173 
˛ù
[ 0 ].
x
 = 0;

174 
˛ù
[ 0 ].
y
 = 0;

175 
˛ù
[ 0 ].
w
 = 300;

176 
˛ù
[ 0 ].
h
 = 100;

178 
˛ù
[ 1 ].
x
 = 300;

179 
˛ù
[ 1 ].
y
 = 0;

180 
˛ù
[ 1 ].
w
 = 200;

181 
˛ù
[ 1 ].
h
 = 100;

183 
˛ù
[ 2 ].
x
 = 0;

184 
˛ù
[ 2 ].
y
 = 100;

185 
˛ù
[ 2 ].
w
 = 200;

186 
˛ù
[ 2 ].
h
 = 200;

188 
˛ù
[ 3 ].
x
 = 200;

189 
˛ù
[ 3 ].
y
 = 300;

190 
˛ù
[ 3 ].
w
 = 100;

191 
˛ù
[ 3 ].
h
 = 100;

194 
	`SDL_FûlRe˘
–
s¸ìn
, &s¸ìn->
˛ù_ª˘
, 
	`SDL_M≠RGB
–s¸ìn->
f‹m©
, 0xFF, 0xFF, 0xFF ) );

198 
background
 = 
	`lﬂd_image
( "libpic/area.bmp" );

199 
	`≠∂y_surÁ˚
–0, 0, 
background
, 
s¸ìn
 );

201 
	`≠∂y_surÁ˚
–0, 0, 
mesßge
, 
s¸ìn
, &
˛ù
[ 0 ] );

202 
	`≠∂y_surÁ˚
–540, 0, 
mesßge
, 
s¸ìn
, &
˛ù
[ 1 ] );

203 
	`≠∂y_surÁ˚
–0, 380, 
mesßge
, 
s¸ìn
, &
˛ù
[ 2 ] );

204 
	`≠∂y_surÁ˚
–540, 380, 
mesßge
, 
s¸ìn
, &
˛ù
[ 3 ] );

205 
	`≠∂y_surÁ˚
–0, 150, 
mesßge
, 
s¸ìn
 );

210 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

216  
quô
 =
Ál£
 )

219 if–
	`SDL_PﬁlEvít
–&
evít
 ) )

222 if–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

224  
evít
.
key
.
keysym
.
sym
 )

227 
SDLK_UP
: 
mesßge
 = 
upMesßge
; ;

228 
SDLK_DOWN
: 
mesßge
 = 
downMesßge
; ;

229 
SDLK_LEFT
: 
mesßge
 = 
À·Mesßge
; ;

230 
SDLK_RIGHT
: 
mesßge
 = 
rightMesßge
; ;

233 if–
evít
.
ty≥
 =
SDL_QUIT
)

235 
quô
 = 
åue
;

239 if–
mesßge
 !
NULL
 )

242 
	`≠∂y_surÁ˚
–0, 0, 
background
, 
s¸ìn
 );

245 
	`≠∂y_surÁ˚
––
SCREEN_WIDTH
 - 
mesßge
->
w
 ) / 2, ( 
SCREEN_HEIGHT
 - mesßge->
h
 ) / 2, mesßge, 
s¸ìn
 );

248 
mesßge
 = 
NULL
;

252 if–
	`SDL_Flù
–
s¸ìn
 ) == -1 )

259 
	`˛ón_up
();

264 
	}
}

	@picture.c

8 
	~<SDL/SDL.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
SDL_SurÁ˚
* 
	$lﬂdImg
(c⁄° * 
FûeName
)

14 
SDL_SurÁ˚
* 
lﬂdedImage
 = 
NULL
;

16 
SDL_SurÁ˚
* 
›timizedImage
 = 
NULL
;

17 
lﬂdedImage
 = 
	`SDL_LﬂdBMP
 (
FûeName
);

18 i‡(
lﬂdedImage
 !
NULL
)

20 
›timizedImage
 = 
	`SDL_Di•œyF‹m©
(
lﬂdedImage
);

23 
	`SDL_FªeSurÁ˚
(
lﬂdedImage
);

25  
›timizedImage
;

26 
	}
}

41 
	$showImg
(
SDL_SurÁ˚
 *
sour˚
,
x
, 
y
,
width
,
height
,

42 
SDL_SurÁ˚
 *
de°ö©i⁄
)

44 
SDL_Re˘
 
posôi⁄
;

45 
posôi⁄
.
x
 = x;

46 
posôi⁄
.
y
 = y;

47 
posôi⁄
.
w
 = (
width
 =0Ë? 
sour˚
->w:width;

48 
posôi⁄
.
h
 = (
height
 =0Ë? 
sour˚
->h:height;

49 
	`SDL_BlôSurÁ˚
(
sour˚
,
NULL
,
de°ö©i⁄
,&
posôi⁄
);

50 
	}
}

51 c⁄° 
	gSCREEN_WIDTH
 = 640;

52 c⁄° 
	gSCREEN_HEIGHT
 = 480;

53 c⁄° 
	gSCREEN_BPP
 = 32;

55 
SDL_SurÁ˚
 *
	gmesßge
 = 
NULL
;

56 
SDL_SurÁ˚
 *
	gbackground
 = 
NULL
;

57 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

59 
	$maö
(
¨gc
, *
¨gs
[] )

62 i‡(
	`SDL_Inô
(
SDL_INIT_EVERYTHING
) ==-1)

64 
	`¥ötf
("ÂàùÂßãÂåñÂ§±Ë¥•ÔºÅ\n");

68 
s¸ìn
 = 
	`SDL_SëVideoMode
(
SCREEN_WIDTH
,
SCREEN_HEIGHT
,
SCREEN_BPP
,
SDL_SWSURFACE
);

69 i‡(
s¸ìn
 =
NULL
)

71 
	`¥ötf
("there isánÉrror in setting upÅhe screen\n");

74 
mesßge
 = 
	`lﬂdImg
("libpic/hello.bmp");

75 
background
 = 
	`lﬂdImg
("libpic/background.bmp");

78 
	`showImg
(
background
,0,0,0,0,
s¸ìn
);

79 
	`showImg
(
background
,640,0,0,0,
s¸ìn
);

80 
	`showImg
(
background
,0,480,0,0,
s¸ìn
);

81 
	`showImg
(
background
,640,480,0,0,
s¸ìn
);

82 
	`showImg
(
mesßge
,18,14,999,999,
s¸ìn
);

83 i‡(
	`SDL_Flù
(
s¸ìn
) == -1)

85 
	`¥ötf
("Please checkÅhe vedio card");

89 
	`SDL_Dñay
(8000);

91 
	`SDL_FªeSurÁ˚
(
mesßge
);

92 
	`SDL_FªeSurÁ˚
(
background
);

93 
	`SDL_Quô
 ();

95 
	}
}

	@vedio.c

2 
	~"SDL/SDL.h
"

3 
	$maö
–
¨gc
, * 
¨gs
[] )

5 
SDL_SurÁ˚
* 
hñlo
 = 
NULL
; SDL_SurÁ˚* 
s¸ìn
 = NULL;

7 
	`SDL_Inô
–
SDL_INIT_EVERYTHING
 );

8 
s¸ìn
 = 
	`SDL_SëVideoMode
–749, 723, 32, 
SDL_SWSURFACE
 );

9 
hñlo
 = 
	`SDL_LﬂdBMP
( "libpic/hello.bmp" );

11 
	`SDL_BlôSurÁ˚
–
hñlo
, 
NULL
, 
s¸ìn
, NULL );

13 
	`SDL_Flù
–
s¸ìn
 );

15 
	`SDL_Dñay
( 8000 );

17 
	`SDL_FªeSurÁ˚
–
hñlo
 );

19 
	`SDL_Quô
();

21 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

40 #i‡!
deföed
(
__SCITECH_SNAP__
)

42 #i‡
deföed
(
__BEOS__
)

43 
	~<°dlib.h
>

46 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
NeXT
Ë|| deföed(
NeXT_PDO
))

47 
	#OPENSTEP


	)

50 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

51 
	#__WIN32__


	)

54 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
))

55 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

56 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

57 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#GLAPI
 

	)

62 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

63 
	#GLAPIENTRY


	)

65 
	#GLAPIENTRY
 
__°dˇŒ


	)

67 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

68 
	#GLAPI
 

	)

69 
	#GLAPIENTRY
 
__°dˇŒ


	)

70 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

71 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

72 
	#GLAPIENTRY


	)

75 #i‡(
deföed
(
__BEOS__
Ë&& deföed(
__POWERPC__
)Ë|| deföed(
__QUICKDRAW__
)

76 
	#PRAGMA_EXPORT_SUPPORTED
 1

	)

87 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

88 #i‚de‡
WIN32_LEAN_AND_MEAN


89 
	#WIN32_LEAN_AND_MEAN
 1

	)

91 
	~<wödows.h
>

94 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


95 #¥agm®
imp‹t
 
⁄


98 #i‚de‡
GLAPI


99 
	#GLAPI
 

	)

102 #i‚de‡
GLAPIENTRY


103 
	#GLAPIENTRY


	)

106 #i‚de‡
APIENTRY


107 
	#APIENTRY
 
GLAPIENTRY


	)

111 #i‚de‡
APIENTRYP


112 
	#APIENTRYP
 
APIENTRY
 *

	)

115 #i‚de‡
GLAPIENTRYP


116 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

119 #ifde‡
CENTERLINE_CLPP


120 sig√d

	)

123 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

124 #¥agm®
exp‹t
 
⁄


134 #ifde‡
__˝lu•lus


140 
	#GL_VERSION_1_1
 1

	)

141 
	#GL_VERSION_1_2
 1

	)

142 
	#GL_VERSION_1_3
 1

	)

143 
	#GL_ARB_imagög
 1

	)

149 
	tGLíum
;

150 
	tGLboﬁón
;

151 
	tGLbôfõld
;

152 
	tGLvoid
;

153 sig√d 
	tGLbyã
;

154 
	tGLsh‹t
;

155 
	tGLöt
;

156 
	tGLubyã
;

157 
	tGLush‹t
;

158 
	tGLuöt
;

159 
	tGLsizei
;

160 
	tGLÊﬂt
;

161 
	tGL˛ampf
;

162 
	tGLdoubÀ
;

163 
	tGL˛ampd
;

172 
	#GL_FALSE
 0x0

	)

173 
	#GL_TRUE
 0x1

	)

176 
	#GL_BYTE
 0x1400

	)

177 
	#GL_UNSIGNED_BYTE
 0x1401

	)

178 
	#GL_SHORT
 0x1402

	)

179 
	#GL_UNSIGNED_SHORT
 0x1403

	)

180 
	#GL_INT
 0x1404

	)

181 
	#GL_UNSIGNED_INT
 0x1405

	)

182 
	#GL_FLOAT
 0x1406

	)

183 
	#GL_2_BYTES
 0x1407

	)

184 
	#GL_3_BYTES
 0x1408

	)

185 
	#GL_4_BYTES
 0x1409

	)

186 
	#GL_DOUBLE
 0x140A

	)

189 
	#GL_POINTS
 0x0000

	)

190 
	#GL_LINES
 0x0001

	)

191 
	#GL_LINE_LOOP
 0x0002

	)

192 
	#GL_LINE_STRIP
 0x0003

	)

193 
	#GL_TRIANGLES
 0x0004

	)

194 
	#GL_TRIANGLE_STRIP
 0x0005

	)

195 
	#GL_TRIANGLE_FAN
 0x0006

	)

196 
	#GL_QUADS
 0x0007

	)

197 
	#GL_QUAD_STRIP
 0x0008

	)

198 
	#GL_POLYGON
 0x0009

	)

201 
	#GL_VERTEX_ARRAY
 0x8074

	)

202 
	#GL_NORMAL_ARRAY
 0x8075

	)

203 
	#GL_COLOR_ARRAY
 0x8076

	)

204 
	#GL_INDEX_ARRAY
 0x8077

	)

205 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

206 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

207 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

208 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

209 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

210 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

211 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

212 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

213 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

214 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

215 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

216 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

217 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

218 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

219 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

220 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

221 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

222 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

223 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

224 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

225 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

226 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

227 
	#GL_V2F
 0x2A20

	)

228 
	#GL_V3F
 0x2A21

	)

229 
	#GL_C4UB_V2F
 0x2A22

	)

230 
	#GL_C4UB_V3F
 0x2A23

	)

231 
	#GL_C3F_V3F
 0x2A24

	)

232 
	#GL_N3F_V3F
 0x2A25

	)

233 
	#GL_C4F_N3F_V3F
 0x2A26

	)

234 
	#GL_T2F_V3F
 0x2A27

	)

235 
	#GL_T4F_V4F
 0x2A28

	)

236 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

237 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

238 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

239 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

240 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

243 
	#GL_MATRIX_MODE
 0x0BA0

	)

244 
	#GL_MODELVIEW
 0x1700

	)

245 
	#GL_PROJECTION
 0x1701

	)

246 
	#GL_TEXTURE
 0x1702

	)

249 
	#GL_POINT_SMOOTH
 0x0B10

	)

250 
	#GL_POINT_SIZE
 0x0B11

	)

251 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

252 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

255 
	#GL_LINE_SMOOTH
 0x0B20

	)

256 
	#GL_LINE_STIPPLE
 0x0B24

	)

257 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

258 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

259 
	#GL_LINE_WIDTH
 0x0B21

	)

260 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

261 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

264 
	#GL_POINT
 0x1B00

	)

265 
	#GL_LINE
 0x1B01

	)

266 
	#GL_FILL
 0x1B02

	)

267 
	#GL_CW
 0x0900

	)

268 
	#GL_CCW
 0x0901

	)

269 
	#GL_FRONT
 0x0404

	)

270 
	#GL_BACK
 0x0405

	)

271 
	#GL_POLYGON_MODE
 0x0B40

	)

272 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

273 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

274 
	#GL_EDGE_FLAG
 0x0B43

	)

275 
	#GL_CULL_FACE
 0x0B44

	)

276 
	#GL_CULL_FACE_MODE
 0x0B45

	)

277 
	#GL_FRONT_FACE
 0x0B46

	)

278 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

279 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

280 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

281 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

282 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

285 
	#GL_COMPILE
 0x1300

	)

286 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

287 
	#GL_LIST_BASE
 0x0B32

	)

288 
	#GL_LIST_INDEX
 0x0B33

	)

289 
	#GL_LIST_MODE
 0x0B30

	)

292 
	#GL_NEVER
 0x0200

	)

293 
	#GL_LESS
 0x0201

	)

294 
	#GL_EQUAL
 0x0202

	)

295 
	#GL_LEQUAL
 0x0203

	)

296 
	#GL_GREATER
 0x0204

	)

297 
	#GL_NOTEQUAL
 0x0205

	)

298 
	#GL_GEQUAL
 0x0206

	)

299 
	#GL_ALWAYS
 0x0207

	)

300 
	#GL_DEPTH_TEST
 0x0B71

	)

301 
	#GL_DEPTH_BITS
 0x0D56

	)

302 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

303 
	#GL_DEPTH_FUNC
 0x0B74

	)

304 
	#GL_DEPTH_RANGE
 0x0B70

	)

305 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

306 
	#GL_DEPTH_COMPONENT
 0x1902

	)

309 
	#GL_LIGHTING
 0x0B50

	)

310 
	#GL_LIGHT0
 0x4000

	)

311 
	#GL_LIGHT1
 0x4001

	)

312 
	#GL_LIGHT2
 0x4002

	)

313 
	#GL_LIGHT3
 0x4003

	)

314 
	#GL_LIGHT4
 0x4004

	)

315 
	#GL_LIGHT5
 0x4005

	)

316 
	#GL_LIGHT6
 0x4006

	)

317 
	#GL_LIGHT7
 0x4007

	)

318 
	#GL_SPOT_EXPONENT
 0x1205

	)

319 
	#GL_SPOT_CUTOFF
 0x1206

	)

320 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

321 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

322 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

323 
	#GL_AMBIENT
 0x1200

	)

324 
	#GL_DIFFUSE
 0x1201

	)

325 
	#GL_SPECULAR
 0x1202

	)

326 
	#GL_SHININESS
 0x1601

	)

327 
	#GL_EMISSION
 0x1600

	)

328 
	#GL_POSITION
 0x1203

	)

329 
	#GL_SPOT_DIRECTION
 0x1204

	)

330 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

331 
	#GL_COLOR_INDEXES
 0x1603

	)

332 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

333 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

334 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

335 
	#GL_FRONT_AND_BACK
 0x0408

	)

336 
	#GL_SHADE_MODEL
 0x0B54

	)

337 
	#GL_FLAT
 0x1D00

	)

338 
	#GL_SMOOTH
 0x1D01

	)

339 
	#GL_COLOR_MATERIAL
 0x0B57

	)

340 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

341 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

342 
	#GL_NORMALIZE
 0x0BA1

	)

345 
	#GL_CLIP_PLANE0
 0x3000

	)

346 
	#GL_CLIP_PLANE1
 0x3001

	)

347 
	#GL_CLIP_PLANE2
 0x3002

	)

348 
	#GL_CLIP_PLANE3
 0x3003

	)

349 
	#GL_CLIP_PLANE4
 0x3004

	)

350 
	#GL_CLIP_PLANE5
 0x3005

	)

353 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

354 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

355 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

356 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

357 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

358 
	#GL_ACCUM
 0x0100

	)

359 
	#GL_ADD
 0x0104

	)

360 
	#GL_LOAD
 0x0101

	)

361 
	#GL_MULT
 0x0103

	)

362 
	#GL_RETURN
 0x0102

	)

365 
	#GL_ALPHA_TEST
 0x0BC0

	)

366 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

367 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

370 
	#GL_BLEND
 0x0BE2

	)

371 
	#GL_BLEND_SRC
 0x0BE1

	)

372 
	#GL_BLEND_DST
 0x0BE0

	)

373 
	#GL_ZERO
 0x0

	)

374 
	#GL_ONE
 0x1

	)

375 
	#GL_SRC_COLOR
 0x0300

	)

376 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

377 
	#GL_SRC_ALPHA
 0x0302

	)

378 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

379 
	#GL_DST_ALPHA
 0x0304

	)

380 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

381 
	#GL_DST_COLOR
 0x0306

	)

382 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

383 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

386 
	#GL_FEEDBACK
 0x1C01

	)

387 
	#GL_RENDER
 0x1C00

	)

388 
	#GL_SELECT
 0x1C02

	)

391 
	#GL_2D
 0x0600

	)

392 
	#GL_3D
 0x0601

	)

393 
	#GL_3D_COLOR
 0x0602

	)

394 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

395 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

396 
	#GL_POINT_TOKEN
 0x0701

	)

397 
	#GL_LINE_TOKEN
 0x0702

	)

398 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

399 
	#GL_POLYGON_TOKEN
 0x0703

	)

400 
	#GL_BITMAP_TOKEN
 0x0704

	)

401 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

402 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

403 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

404 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

405 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

406 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

409 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

410 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

413 
	#GL_FOG
 0x0B60

	)

414 
	#GL_FOG_MODE
 0x0B65

	)

415 
	#GL_FOG_DENSITY
 0x0B62

	)

416 
	#GL_FOG_COLOR
 0x0B66

	)

417 
	#GL_FOG_INDEX
 0x0B61

	)

418 
	#GL_FOG_START
 0x0B63

	)

419 
	#GL_FOG_END
 0x0B64

	)

420 
	#GL_LINEAR
 0x2601

	)

421 
	#GL_EXP
 0x0800

	)

422 
	#GL_EXP2
 0x0801

	)

425 
	#GL_LOGIC_OP
 0x0BF1

	)

426 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

427 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

428 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

429 
	#GL_CLEAR
 0x1500

	)

430 
	#GL_SET
 0x150F

	)

431 
	#GL_COPY
 0x1503

	)

432 
	#GL_COPY_INVERTED
 0x150C

	)

433 
	#GL_NOOP
 0x1505

	)

434 
	#GL_INVERT
 0x150A

	)

435 
	#GL_AND
 0x1501

	)

436 
	#GL_NAND
 0x150E

	)

437 
	#GL_OR
 0x1507

	)

438 
	#GL_NOR
 0x1508

	)

439 
	#GL_XOR
 0x1506

	)

440 
	#GL_EQUIV
 0x1509

	)

441 
	#GL_AND_REVERSE
 0x1502

	)

442 
	#GL_AND_INVERTED
 0x1504

	)

443 
	#GL_OR_REVERSE
 0x150B

	)

444 
	#GL_OR_INVERTED
 0x150D

	)

447 
	#GL_STENCIL_BITS
 0x0D57

	)

448 
	#GL_STENCIL_TEST
 0x0B90

	)

449 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

450 
	#GL_STENCIL_FUNC
 0x0B92

	)

451 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

452 
	#GL_STENCIL_FAIL
 0x0B94

	)

453 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

454 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

455 
	#GL_STENCIL_REF
 0x0B97

	)

456 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

457 
	#GL_STENCIL_INDEX
 0x1901

	)

458 
	#GL_KEEP
 0x1E00

	)

459 
	#GL_REPLACE
 0x1E01

	)

460 
	#GL_INCR
 0x1E02

	)

461 
	#GL_DECR
 0x1E03

	)

464 
	#GL_NONE
 0x0

	)

465 
	#GL_LEFT
 0x0406

	)

466 
	#GL_RIGHT
 0x0407

	)

470 
	#GL_FRONT_LEFT
 0x0400

	)

471 
	#GL_FRONT_RIGHT
 0x0401

	)

472 
	#GL_BACK_LEFT
 0x0402

	)

473 
	#GL_BACK_RIGHT
 0x0403

	)

474 
	#GL_AUX0
 0x0409

	)

475 
	#GL_AUX1
 0x040A

	)

476 
	#GL_AUX2
 0x040B

	)

477 
	#GL_AUX3
 0x040C

	)

478 
	#GL_COLOR_INDEX
 0x1900

	)

479 
	#GL_RED
 0x1903

	)

480 
	#GL_GREEN
 0x1904

	)

481 
	#GL_BLUE
 0x1905

	)

482 
	#GL_ALPHA
 0x1906

	)

483 
	#GL_LUMINANCE
 0x1909

	)

484 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

485 
	#GL_ALPHA_BITS
 0x0D55

	)

486 
	#GL_RED_BITS
 0x0D52

	)

487 
	#GL_GREEN_BITS
 0x0D53

	)

488 
	#GL_BLUE_BITS
 0x0D54

	)

489 
	#GL_INDEX_BITS
 0x0D51

	)

490 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

491 
	#GL_AUX_BUFFERS
 0x0C00

	)

492 
	#GL_READ_BUFFER
 0x0C02

	)

493 
	#GL_DRAW_BUFFER
 0x0C01

	)

494 
	#GL_DOUBLEBUFFER
 0x0C32

	)

495 
	#GL_STEREO
 0x0C33

	)

496 
	#GL_BITMAP
 0x1A00

	)

497 
	#GL_COLOR
 0x1800

	)

498 
	#GL_DEPTH
 0x1801

	)

499 
	#GL_STENCIL
 0x1802

	)

500 
	#GL_DITHER
 0x0BD0

	)

501 
	#GL_RGB
 0x1907

	)

502 
	#GL_RGBA
 0x1908

	)

505 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

506 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

507 
	#GL_MAX_LIGHTS
 0x0D31

	)

508 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

509 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

510 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

511 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

512 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

513 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

514 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

515 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

516 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

517 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

520 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

521 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

522 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

523 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

524 
	#GL_CURRENT_INDEX
 0x0B01

	)

525 
	#GL_CURRENT_COLOR
 0x0B00

	)

526 
	#GL_CURRENT_NORMAL
 0x0B02

	)

527 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

528 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

529 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

530 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

531 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

532 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

533 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

534 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

535 
	#GL_INDEX_MODE
 0x0C30

	)

536 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

537 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

538 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

539 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

540 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

541 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

542 
	#GL_RENDER_MODE
 0x0C40

	)

543 
	#GL_RGBA_MODE
 0x0C31

	)

544 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

545 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

546 
	#GL_VIEWPORT
 0x0BA2

	)

549 
	#GL_AUTO_NORMAL
 0x0D80

	)

550 
	#GL_MAP1_COLOR_4
 0x0D90

	)

551 
	#GL_MAP1_INDEX
 0x0D91

	)

552 
	#GL_MAP1_NORMAL
 0x0D92

	)

553 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

554 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

555 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

556 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

557 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

558 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

559 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

560 
	#GL_MAP2_INDEX
 0x0DB1

	)

561 
	#GL_MAP2_NORMAL
 0x0DB2

	)

562 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

563 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

564 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

565 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

566 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

567 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

568 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

569 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

570 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

571 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

572 
	#GL_COEFF
 0x0A00

	)

573 
	#GL_ORDER
 0x0A01

	)

574 
	#GL_DOMAIN
 0x0A02

	)

577 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

578 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

579 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

580 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

581 
	#GL_FOG_HINT
 0x0C54

	)

582 
	#GL_DONT_CARE
 0x1100

	)

583 
	#GL_FASTEST
 0x1101

	)

584 
	#GL_NICEST
 0x1102

	)

587 
	#GL_SCISSOR_BOX
 0x0C10

	)

588 
	#GL_SCISSOR_TEST
 0x0C11

	)

591 
	#GL_MAP_COLOR
 0x0D10

	)

592 
	#GL_MAP_STENCIL
 0x0D11

	)

593 
	#GL_INDEX_SHIFT
 0x0D12

	)

594 
	#GL_INDEX_OFFSET
 0x0D13

	)

595 
	#GL_RED_SCALE
 0x0D14

	)

596 
	#GL_RED_BIAS
 0x0D15

	)

597 
	#GL_GREEN_SCALE
 0x0D18

	)

598 
	#GL_GREEN_BIAS
 0x0D19

	)

599 
	#GL_BLUE_SCALE
 0x0D1A

	)

600 
	#GL_BLUE_BIAS
 0x0D1B

	)

601 
	#GL_ALPHA_SCALE
 0x0D1C

	)

602 
	#GL_ALPHA_BIAS
 0x0D1D

	)

603 
	#GL_DEPTH_SCALE
 0x0D1E

	)

604 
	#GL_DEPTH_BIAS
 0x0D1F

	)

605 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

606 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

607 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

608 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

609 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

610 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

611 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

612 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

613 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

614 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

615 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

616 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

617 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

618 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

619 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

620 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

621 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

622 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

623 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

624 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

625 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

626 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

627 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

628 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

629 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

630 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

631 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

632 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

633 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

634 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

635 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

636 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

637 
	#GL_ZOOM_X
 0x0D16

	)

638 
	#GL_ZOOM_Y
 0x0D17

	)

641 
	#GL_TEXTURE_ENV
 0x2300

	)

642 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

643 
	#GL_TEXTURE_1D
 0x0DE0

	)

644 
	#GL_TEXTURE_2D
 0x0DE1

	)

645 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

646 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

647 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

648 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

649 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

650 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

651 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

652 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

653 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

654 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

655 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

656 
	#GL_TEXTURE_WIDTH
 0x1000

	)

657 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

658 
	#GL_TEXTURE_BORDER
 0x1005

	)

659 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

660 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

661 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

662 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

663 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

664 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

665 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

666 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

667 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

668 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

669 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

670 
	#GL_OBJECT_LINEAR
 0x2401

	)

671 
	#GL_OBJECT_PLANE
 0x2501

	)

672 
	#GL_EYE_LINEAR
 0x2400

	)

673 
	#GL_EYE_PLANE
 0x2502

	)

674 
	#GL_SPHERE_MAP
 0x2402

	)

675 
	#GL_DECAL
 0x2101

	)

676 
	#GL_MODULATE
 0x2100

	)

677 
	#GL_NEAREST
 0x2600

	)

678 
	#GL_REPEAT
 0x2901

	)

679 
	#GL_CLAMP
 0x2900

	)

680 
	#GL_S
 0x2000

	)

681 
	#GL_T
 0x2001

	)

682 
	#GL_R
 0x2002

	)

683 
	#GL_Q
 0x2003

	)

686 
	#GL_VENDOR
 0x1F00

	)

687 
	#GL_RENDERER
 0x1F01

	)

688 
	#GL_VERSION
 0x1F02

	)

689 
	#GL_EXTENSIONS
 0x1F03

	)

692 
	#GL_NO_ERROR
 0x0

	)

693 
	#GL_INVALID_ENUM
 0x0500

	)

694 
	#GL_INVALID_VALUE
 0x0501

	)

695 
	#GL_INVALID_OPERATION
 0x0502

	)

696 
	#GL_STACK_OVERFLOW
 0x0503

	)

697 
	#GL_STACK_UNDERFLOW
 0x0504

	)

698 
	#GL_OUT_OF_MEMORY
 0x0505

	)

701 
	#GL_CURRENT_BIT
 0x00000001

	)

702 
	#GL_POINT_BIT
 0x00000002

	)

703 
	#GL_LINE_BIT
 0x00000004

	)

704 
	#GL_POLYGON_BIT
 0x00000008

	)

705 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

706 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

707 
	#GL_LIGHTING_BIT
 0x00000040

	)

708 
	#GL_FOG_BIT
 0x00000080

	)

709 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

710 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

711 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

712 
	#GL_VIEWPORT_BIT
 0x00000800

	)

713 
	#GL_TRANSFORM_BIT
 0x00001000

	)

714 
	#GL_ENABLE_BIT
 0x00002000

	)

715 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

716 
	#GL_HINT_BIT
 0x00008000

	)

717 
	#GL_EVAL_BIT
 0x00010000

	)

718 
	#GL_LIST_BIT
 0x00020000

	)

719 
	#GL_TEXTURE_BIT
 0x00040000

	)

720 
	#GL_SCISSOR_BIT
 0x00080000

	)

721 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

725 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

726 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

727 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

728 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

729 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

730 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

731 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

732 
	#GL_ALPHA4
 0x803B

	)

733 
	#GL_ALPHA8
 0x803C

	)

734 
	#GL_ALPHA12
 0x803D

	)

735 
	#GL_ALPHA16
 0x803E

	)

736 
	#GL_LUMINANCE4
 0x803F

	)

737 
	#GL_LUMINANCE8
 0x8040

	)

738 
	#GL_LUMINANCE12
 0x8041

	)

739 
	#GL_LUMINANCE16
 0x8042

	)

740 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

741 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

742 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

743 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

744 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

745 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

746 
	#GL_INTENSITY
 0x8049

	)

747 
	#GL_INTENSITY4
 0x804A

	)

748 
	#GL_INTENSITY8
 0x804B

	)

749 
	#GL_INTENSITY12
 0x804C

	)

750 
	#GL_INTENSITY16
 0x804D

	)

751 
	#GL_R3_G3_B2
 0x2A10

	)

752 
	#GL_RGB4
 0x804F

	)

753 
	#GL_RGB5
 0x8050

	)

754 
	#GL_RGB8
 0x8051

	)

755 
	#GL_RGB10
 0x8052

	)

756 
	#GL_RGB12
 0x8053

	)

757 
	#GL_RGB16
 0x8054

	)

758 
	#GL_RGBA2
 0x8055

	)

759 
	#GL_RGBA4
 0x8056

	)

760 
	#GL_RGB5_A1
 0x8057

	)

761 
	#GL_RGBA8
 0x8058

	)

762 
	#GL_RGB10_A2
 0x8059

	)

763 
	#GL_RGBA12
 0x805A

	)

764 
	#GL_RGBA16
 0x805B

	)

765 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

766 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

767 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

768 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

776 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

778 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

780 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

784 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

786 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

788 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

790 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

792 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

798 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

800 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

802 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

804 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

806 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

810 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

812 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

814 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

816 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

818 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

820 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

822 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

824 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

826 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

828 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

831 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

833 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

836 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

838 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

840 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

842 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

845 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

847 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

850 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

852 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

855 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

857 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

859 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

861 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

863 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

865 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

872 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

874 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

876 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

878 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

885 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

887 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

894 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

896 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

897 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

898 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

900 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

901 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

902 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

904 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

905 
GLsizei
 
width
, GLsizeò
height
 );

907 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

909 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

911 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

913 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

914 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

916 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

917 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

919 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

920 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

921 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

922 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

924 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

925 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

927 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

928 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

935 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

937 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

939 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

941 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

943 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

945 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

947 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

948 c⁄° 
GLvoid
 *
li°s
 );

950 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

957 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

959 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

963 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

964 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

965 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

967 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

968 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

969 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

970 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

972 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

973 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

974 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

975 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

977 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

979 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

980 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

983 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

984 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

985 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

987 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

988 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

989 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

990 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

993 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

994 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

995 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

996 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

997 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

999 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

1000 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1001 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1002 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1003 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1006 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

1007 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

1008 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

1009 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

1010 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

1012 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1013 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1014 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

1015 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1016 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1025 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1028 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1030 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1032 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1034 
GLöt
 
blue
, GLöà
Æpha
 );

1035 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1036 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1037 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1038 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1039 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1040 
GLuöt
 
blue
, GLuöà
Æpha
 );

1041 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1042 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1045 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1046 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1047 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1048 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1049 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1050 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1051 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1052 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1054 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1055 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1056 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1060 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1065 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1070 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1075 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1076 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1077 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1079 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1080 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1081 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1082 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1084 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1085 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1086 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1087 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1089 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1090 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1091 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1092 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1096 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1106 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1107 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1112 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1113 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1118 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1120 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1121 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1122 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1123 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1125 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1127 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1128 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1130 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1131 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1132 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1133 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1136 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1137 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1138 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1139 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1142 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1143 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1144 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1145 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1152 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1153 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1155 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1156 c⁄° 
GLvoid
 *
±r
 );

1158 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1159 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1161 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1162 c⁄° 
GLvoid
 *
±r
 );

1164 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1165 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1167 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1169 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1173 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1175 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1176 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1178 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1179 c⁄° 
GLvoid
 *
poöãr
 );

1185 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1187 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1188 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1189 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1190 c⁄° 
GLÊﬂt
 *
∑øms
 );

1191 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1192 c⁄° 
GLöt
 *
∑øms
 );

1194 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1195 
GLÊﬂt
 *
∑øms
 );

1196 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1197 
GLöt
 *
∑øms
 );

1199 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1200 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1201 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1202 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1204 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1205 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1206 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1207 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1209 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1210 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1212 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1219 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1221 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1222 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1224 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1225 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1227 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1228 c⁄° 
GLÊﬂt
 *
vÆues
 );

1229 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1230 c⁄° 
GLuöt
 *
vÆues
 );

1231 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1232 c⁄° 
GLush‹t
 *
vÆues
 );

1234 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1235 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1236 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1238 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1239 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1240 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1241 c⁄° 
GLubyã
 *
bôm≠
 );

1243 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1244 
GLsizei
 
width
, GLsizeò
height
,

1245 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1246 
GLvoid
 *
pixñs
 );

1248 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1249 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1250 c⁄° 
GLvoid
 *
pixñs
 );

1252 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1253 
GLsizei
 
width
, GLsizeò
height
,

1254 
GLíum
 
ty≥
 );

1260 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1262 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1264 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1266 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1275 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1276 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1278 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1279 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1280 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1283 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1287 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1290 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1291 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1293 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1294 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1297 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1298 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1300 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1301 c⁄° 
GLÊﬂt
 *
∑øms
 );

1302 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1303 c⁄° 
GLöt
 *
∑øms
 );

1305 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1306 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1307 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1308 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1310 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1311 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1312 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1313 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1316 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1317 
GLöt
 
öã∫ÆF‹m©
,

1318 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1319 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1320 c⁄° 
GLvoid
 *
pixñs
 );

1322 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1323 
GLöt
 
öã∫ÆF‹m©
,

1324 
GLsizei
 
width
, GLsizeò
height
,

1325 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1326 c⁄° 
GLvoid
 *
pixñs
 );

1328 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1329 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1330 
GLvoid
 *
pixñs
 );

1335 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1339 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1341 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1342 c⁄° 
GLuöt
 *
ãxtuªs
,

1343 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1345 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1346 c⁄° 
GLuöt
 *
ãxtuªs
,

1347 
GLboﬁón
 *
ªsidí˚s
 );

1349 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1352 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1353 
GLöt
 
xoff£t
,

1354 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1355 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1358 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1359 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1360 
GLsizei
 
width
, GLsizeò
height
,

1361 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1362 c⁄° 
GLvoid
 *
pixñs
 );

1365 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1366 
GLíum
 
öã∫Æf‹m©
,

1367 
GLöt
 
x
, GLöà
y
,

1368 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1371 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1372 
GLíum
 
öã∫Æf‹m©
,

1373 
GLöt
 
x
, GLöà
y
,

1374 
GLsizei
 
width
, GLsizeò
height
,

1375 
GLöt
 
b‹dî
 );

1378 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1379 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1380 
GLsizei
 
width
 );

1383 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1384 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1385 
GLöt
 
x
, GLöà
y
,

1386 
GLsizei
 
width
, GLsizeò
height
 );

1393 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1394 
GLöt
 
°ride
,

1395 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1396 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1397 
GLöt
 
°ride
,

1398 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1401 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1402 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1403 c⁄° 
GLdoubÀ
 *
poöts
 );

1404 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1405 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1406 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1407 c⁄° 
GLÊﬂt
 *
poöts
 );

1409 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1410 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1411 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1413 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1414 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1416 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1417 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1419 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1420 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1422 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1423 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1425 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1426 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1428 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1429 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1430 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1431 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1433 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1435 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1437 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1439 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1446 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1448 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1450 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1452 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1459 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1461 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1463 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1465 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1467 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1469 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1471 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1479 
	#GL_RESCALE_NORMAL
 0x803A

	)

1480 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1481 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1482 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1483 
	#GL_BGR
 0x80E0

	)

1484 
	#GL_BGRA
 0x80E1

	)

1485 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1486 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1487 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1488 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1489 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1490 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1491 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1492 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1493 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1494 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1495 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1496 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1497 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1498 
	#GL_SINGLE_COLOR
 0x81F9

	)

1499 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1500 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1501 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1502 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1503 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1504 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1505 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1506 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1507 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1508 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1509 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1510 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1511 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1512 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1513 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1514 
	#GL_TEXTURE_3D
 0x806F

	)

1515 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1516 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1517 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1518 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1519 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1521 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1522 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1524 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1525 
GLöt
 
öã∫ÆF‹m©
,

1526 
GLsizei
 
width
, GLsizeò
height
,

1527 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1528 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1529 c⁄° 
GLvoid
 *
pixñs
 );

1531 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1532 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1533 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1534 
GLsizei
 
height
, GLsizeò
dïth
,

1535 
GLíum
 
f‹m©
,

1536 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1538 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1539 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1540 
GLöt
 
zoff£t
, GLöà
x
,

1541 
GLöt
 
y
, 
GLsizei
 
width
,

1542 
GLsizei
 
height
 );

1544 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1545 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1546 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1547 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1554 
	#GL_CONSTANT_COLOR
 0x8001

	)

1555 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1556 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1557 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1558 
	#GL_COLOR_TABLE
 0x80D0

	)

1559 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1560 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1561 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1562 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1563 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1564 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1565 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1566 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1567 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1568 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1569 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1570 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1571 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1572 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1573 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1574 
	#GL_CONVOLUTION_1D
 0x8010

	)

1575 
	#GL_CONVOLUTION_2D
 0x8011

	)

1576 
	#GL_SEPARABLE_2D
 0x8012

	)

1577 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1578 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1579 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1580 
	#GL_REDUCE
 0x8016

	)

1581 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1582 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1583 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1584 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1585 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1586 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1587 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1588 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1589 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1590 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1591 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1592 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1593 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1594 
	#GL_CONSTANT_BORDER
 0x8151

	)

1595 
	#GL_REPLICATE_BORDER
 0x8153

	)

1596 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1597 
	#GL_COLOR_MATRIX
 0x80B1

	)

1598 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1599 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1600 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1601 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1602 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1603 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1604 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1605 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1606 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1607 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1608 
	#GL_HISTOGRAM
 0x8024

	)

1609 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1610 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1611 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1612 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1613 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1614 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1615 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1616 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1617 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1618 
	#GL_MINMAX
 0x802E

	)

1619 
	#GL_MINMAX_FORMAT
 0x802F

	)

1620 
	#GL_MINMAX_SINK
 0x8030

	)

1621 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1622 
	#GL_BLEND_EQUATION
 0x8009

	)

1623 
	#GL_MIN
 0x8007

	)

1624 
	#GL_MAX
 0x8008

	)

1625 
	#GL_FUNC_ADD
 0x8006

	)

1626 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1627 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1628 
	#GL_BLEND_COLOR
 0x8005

	)

1631 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1632 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1633 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1635 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1636 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1637 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1638 c⁄° 
GLvoid
 *
d©a
 );

1640 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1641 c⁄° 
GLöt
 *
∑øms
);

1643 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1644 c⁄° 
GLÊﬂt
 *
∑øms
);

1646 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1647 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1649 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1650 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1652 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1653 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1655 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1656 
GLÊﬂt
 *
∑øms
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1659 
GLöt
 *
∑øms
 );

1661 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1663 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1664 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1666 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1667 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1669 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1671 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1672 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1673 
GLvoid
 *
vÆues
 );

1675 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1676 
GLÊﬂt
 *
∑øms
 );

1678 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1679 
GLöt
 *
∑øms
 );

1681 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1682 
GLboﬁón
 
sök
 );

1684 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1686 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1687 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1688 
GLvoid
 *
vÆues
 );

1690 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1691 
GLÊﬂt
 *
∑øms
 );

1693 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1694 
GLöt
 *
∑øms
 );

1696 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1697 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1698 c⁄° 
GLvoid
 *
image
 );

1700 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1701 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1702 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1704 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1705 
GLÊﬂt
 
∑øms
 );

1707 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1708 c⁄° 
GLÊﬂt
 *
∑øms
 );

1710 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1711 
GLöt
 
∑øms
 );

1713 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1714 c⁄° 
GLöt
 *
∑øms
 );

1716 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1717 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1719 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1720 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1721 
GLsizei
 
height
);

1723 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1724 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1726 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1727 
GLÊﬂt
 *
∑øms
 );

1729 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1730 
GLöt
 *
∑øms
 );

1732 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1733 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1734 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1736 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1737 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1739 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1740 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1749 
	#GL_TEXTURE0
 0x84C0

	)

1750 
	#GL_TEXTURE1
 0x84C1

	)

1751 
	#GL_TEXTURE2
 0x84C2

	)

1752 
	#GL_TEXTURE3
 0x84C3

	)

1753 
	#GL_TEXTURE4
 0x84C4

	)

1754 
	#GL_TEXTURE5
 0x84C5

	)

1755 
	#GL_TEXTURE6
 0x84C6

	)

1756 
	#GL_TEXTURE7
 0x84C7

	)

1757 
	#GL_TEXTURE8
 0x84C8

	)

1758 
	#GL_TEXTURE9
 0x84C9

	)

1759 
	#GL_TEXTURE10
 0x84CA

	)

1760 
	#GL_TEXTURE11
 0x84CB

	)

1761 
	#GL_TEXTURE12
 0x84CC

	)

1762 
	#GL_TEXTURE13
 0x84CD

	)

1763 
	#GL_TEXTURE14
 0x84CE

	)

1764 
	#GL_TEXTURE15
 0x84CF

	)

1765 
	#GL_TEXTURE16
 0x84D0

	)

1766 
	#GL_TEXTURE17
 0x84D1

	)

1767 
	#GL_TEXTURE18
 0x84D2

	)

1768 
	#GL_TEXTURE19
 0x84D3

	)

1769 
	#GL_TEXTURE20
 0x84D4

	)

1770 
	#GL_TEXTURE21
 0x84D5

	)

1771 
	#GL_TEXTURE22
 0x84D6

	)

1772 
	#GL_TEXTURE23
 0x84D7

	)

1773 
	#GL_TEXTURE24
 0x84D8

	)

1774 
	#GL_TEXTURE25
 0x84D9

	)

1775 
	#GL_TEXTURE26
 0x84DA

	)

1776 
	#GL_TEXTURE27
 0x84DB

	)

1777 
	#GL_TEXTURE28
 0x84DC

	)

1778 
	#GL_TEXTURE29
 0x84DD

	)

1779 
	#GL_TEXTURE30
 0x84DE

	)

1780 
	#GL_TEXTURE31
 0x84DF

	)

1781 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1782 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1783 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1785 
	#GL_NORMAL_MAP
 0x8511

	)

1786 
	#GL_REFLECTION_MAP
 0x8512

	)

1787 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1788 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1789 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1790 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1791 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1792 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1793 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1794 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1795 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1796 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1798 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1799 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1800 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1801 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1802 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1803 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1804 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1805 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1806 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1807 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1808 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1810 
	#GL_MULTISAMPLE
 0x809D

	)

1811 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1812 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1813 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1814 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1815 
	#GL_SAMPLES
 0x80A9

	)

1816 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1817 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1818 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1820 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1821 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1822 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1823 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1825 
	#GL_COMBINE
 0x8570

	)

1826 
	#GL_COMBINE_RGB
 0x8571

	)

1827 
	#GL_COMBINE_ALPHA
 0x8572

	)

1828 
	#GL_SOURCE0_RGB
 0x8580

	)

1829 
	#GL_SOURCE1_RGB
 0x8581

	)

1830 
	#GL_SOURCE2_RGB
 0x8582

	)

1831 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1832 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1833 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1834 
	#GL_OPERAND0_RGB
 0x8590

	)

1835 
	#GL_OPERAND1_RGB
 0x8591

	)

1836 
	#GL_OPERAND2_RGB
 0x8592

	)

1837 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1838 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1839 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1840 
	#GL_RGB_SCALE
 0x8573

	)

1841 
	#GL_ADD_SIGNED
 0x8574

	)

1842 
	#GL_INTERPOLATE
 0x8575

	)

1843 
	#GL_SUBTRACT
 0x84E7

	)

1844 
	#GL_CONSTANT
 0x8576

	)

1845 
	#GL_PRIMARY_COLOR
 0x8577

	)

1846 
	#GL_PREVIOUS
 0x8578

	)

1848 
	#GL_DOT3_RGB
 0x86AE

	)

1849 
	#GL_DOT3_RGBA
 0x86AF

	)

1851 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1853 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1855 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1857 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1859 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1861 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1863 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1865 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1867 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1869 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1905 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1907 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1909 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1911 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1913 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1915 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1917 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1919 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1921 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1923 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1925 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1927 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1929 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1931 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1933 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1936 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1938 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1940 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1942 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1944 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1947 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1948 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1949 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1950 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1951 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1952 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1953 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1954 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1955 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1962 #i‚de‡
GL_ARB_mu…ôextuª


1963 
	#GL_ARB_mu…ôextuª
 1

	)

1965 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1966 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1967 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1968 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1969 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1970 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1971 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1972 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1973 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1974 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1975 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1976 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1977 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1978 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1979 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1980 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1981 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1982 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1983 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1984 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1985 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1986 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1987 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1988 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1989 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1990 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1991 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1992 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1993 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1994 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1995 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1996 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1997 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1998 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1999 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2001 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2002 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2005 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2006 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2007 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2008 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2009 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2010 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2011 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2012 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2013 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2014 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2015 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2016 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2017 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2018 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2019 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2020 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2021 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2022 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2023 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2024 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2025 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2026 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2027 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2028 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2029 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2030 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2031 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2032 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2033 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2034 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2036 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2037 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2040 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2041 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2042 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2044 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2045 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2046 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2047 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2048 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2049 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2050 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2051 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2052 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2053 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2054 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2055 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2056 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2057 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2058 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2059 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2060 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2061 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2062 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2063 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2064 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2065 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2066 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2067 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2068 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2069 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2079 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2085 
	~<GL/gÀxt.h
>

2091 #i‡
GL_ARB_shadî_obje˘s


2093 #i‚de‡
GL_MESA_shadî_debug


2094 
	#GL_MESA_shadî_debug
 1

	)

2096 
	#GL_DEBUG_OBJECT_MESA
 0x8759

	)

2097 
	#GL_DEBUG_PRINT_MESA
 0x875A

	)

2098 
	#GL_DEBUG_ASSERT_MESA
 0x875B

	)

2100 
GLAPI
 
GLh™dÀARB
 
GLAPIENTRY
 
glCª©eDebugObje˘MESA
 ();

2101 
GLAPI
 
GLAPIENTRY
 
glCÀ¨DebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2102 
GLAPI
 
GLAPIENTRY
 
glGëDebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
, 
GLsizei
 
maxLígth
,

2103 
GLsizei
 *
Àngth
, 
GLch¨ARB
 *
debugLog
);

2104 
GLAPI
 
GLsizei
 
GLAPIENTRY
 
glGëDebugLogLígthMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2115 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2116 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2118 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2119 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2120 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2121 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2122 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2127 #i‚de‡
GL_MESA_¥ogøm_debug


2128 
	#GL_MESA_¥ogøm_debug
 1

	)

2130 
	#GL_FRAGMENT_PROGRAM_POSITION_MESA
 0x8bb0

	)

2131 
	#GL_FRAGMENT_PROGRAM_CALLBACK_MESA
 0x8bb1

	)

2132 
	#GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb2

	)

2133 
	#GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA
 0x8bb3

	)

2134 
	#GL_VERTEX_PROGRAM_POSITION_MESA
 0x8bb4

	)

2135 
	#GL_VERTEX_PROGRAM_CALLBACK_MESA
 0x8bb5

	)

2136 
	#GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb6

	)

2137 
	#GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA
 0x8bb7

	)

2139 (*
GL¥ogømˇŒbackMESA
)(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 *
	td©a
);

2141 
GLAPI
 
GLAPIENTRY
 
glProgømCÆlbackMESA
(
GLíum
 
èrgë
, 
GL¥ogømˇŒbackMESA
 
ˇŒback
, 
GLvoid
 *
d©a
);

2143 
GLAPI
 
GLAPIENTRY
 
glGëProgømRegi°îfvMESA
(
GLíum
 
èrgë
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
v
);

2148 #i‚de‡
GL_MESA_ãxtuª_¨øy


2149 
	#GL_MESA_ãxtuª_¨øy
 1

	)

2153 #i‚de‡
GL_EXT_ãxtuª_¨øy


2155 #ifde‡
GL_GLEXT_PROTOTYPES


2156 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
(
GLíum
 
èrgë
,

2157 
GLíum
 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2164 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
,

2165 
	tGLíum
 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2168 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

2169 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

2170 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

2171 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

2172 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

2173 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

2174 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

2175 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

2181 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2182 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2184 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2186 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2187 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2193 #i‚de‡
GL_OES_EGL_image


2194 * 
	tGLeglImageOES
;

2197 #i‚de‡
GL_OES_EGL_image


2198 
	#GL_OES_EGL_image
 1

	)

2199 #ifde‡
GL_GLEXT_PROTOTYPES


2200 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2201 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2203 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2204 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2219 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2220 #¥agm®
exp‹t
 
off


2223 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


2224 #¥agm®
imp‹t
 
off


2231 #ifde‡
__˝lu•lus


	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/SDL/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_image.h

24 #i‚de‡
_SDL_IMAGE_H


25 
	#_SDL_IMAGE_H


	)

27 
	~"SDL.h
"

28 
	~"SDL_vîsi⁄.h
"

29 
	~"begö_code.h
"

32 #ifde‡
__˝lu•lus


38 
	#SDL_IMAGE_MAJOR_VERSION
 1

	)

39 
	#SDL_IMAGE_MINOR_VERSION
 2

	)

40 
	#SDL_IMAGE_PATCHLEVEL
 12

	)

45 
	#SDL_IMAGE_VERSION
(
X
) \

47 (
X
)->
maj‹
 = 
SDL_IMAGE_MAJOR_VERSION
; \

48 (
X
)->
mö‹
 = 
SDL_IMAGE_MINOR_VERSION
; \

49 (
X
)->
∑tch
 = 
SDL_IMAGE_PATCHLEVEL
; \

50 }

	)

56 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
IMG_Löked_Vîsi⁄
();

60 
	gIMG_INIT_JPG
 = 0x00000001,

61 
	gIMG_INIT_PNG
 = 0x00000002,

62 
	gIMG_INIT_TIF
 = 0x00000004,

63 
	gIMG_INIT_WEBP
 = 0x00000008

64 } 
	tIMG_InôFœgs
;

70 
DECLSPEC
 
SDLCALL
 
IMG_Inô
(
Êags
);

73 
DECLSPEC
 
SDLCALL
 
IMG_Quô
();

83 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTy≥d_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, *
ty≥
);

85 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd
(c⁄° *
fûe
);

86 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

91 
DECLSPEC
 
SDLCALL
 
IMG_InvîtAÕha
(
⁄
);

94 
DECLSPEC
 
SDLCALL
 
IMG_isICO
(
SDL_RW›s
 *
§c
);

95 
DECLSPEC
 
SDLCALL
 
IMG_isCUR
(
SDL_RW›s
 *
§c
);

96 
DECLSPEC
 
SDLCALL
 
IMG_isBMP
(
SDL_RW›s
 *
§c
);

97 
DECLSPEC
 
SDLCALL
 
IMG_isGIF
(
SDL_RW›s
 *
§c
);

98 
DECLSPEC
 
SDLCALL
 
IMG_isJPG
(
SDL_RW›s
 *
§c
);

99 
DECLSPEC
 
SDLCALL
 
IMG_isLBM
(
SDL_RW›s
 *
§c
);

100 
DECLSPEC
 
SDLCALL
 
IMG_isPCX
(
SDL_RW›s
 *
§c
);

101 
DECLSPEC
 
SDLCALL
 
IMG_isPNG
(
SDL_RW›s
 *
§c
);

102 
DECLSPEC
 
SDLCALL
 
IMG_isPNM
(
SDL_RW›s
 *
§c
);

103 
DECLSPEC
 
SDLCALL
 
IMG_isTIF
(
SDL_RW›s
 *
§c
);

104 
DECLSPEC
 
SDLCALL
 
IMG_isXCF
(
SDL_RW›s
 *
§c
);

105 
DECLSPEC
 
SDLCALL
 
IMG_isXPM
(
SDL_RW›s
 *
§c
);

106 
DECLSPEC
 
SDLCALL
 
IMG_isXV
(
SDL_RW›s
 *
§c
);

107 
DECLSPEC
 
SDLCALL
 
IMG_isWEBP
(
SDL_RW›s
 *
§c
);

110 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdICO_RW
(
SDL_RW›s
 *
§c
);

111 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdCUR_RW
(
SDL_RW›s
 *
§c
);

112 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
);

113 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdGIF_RW
(
SDL_RW›s
 *
§c
);

114 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdJPG_RW
(
SDL_RW›s
 *
§c
);

115 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdLBM_RW
(
SDL_RW›s
 *
§c
);

116 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPCX_RW
(
SDL_RW›s
 *
§c
);

117 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNG_RW
(
SDL_RW›s
 *
§c
);

118 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNM_RW
(
SDL_RW›s
 *
§c
);

119 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTGA_RW
(
SDL_RW›s
 *
§c
);

120 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTIF_RW
(
SDL_RW›s
 *
§c
);

121 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXCF_RW
(
SDL_RW›s
 *
§c
);

122 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXPM_RW
(
SDL_RW›s
 *
§c
);

123 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXV_RW
(
SDL_RW›s
 *
§c
);

124 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdWEBP_RW
(
SDL_RW›s
 *
§c
);

126 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_RódXPMFromAºay
(**
xpm
);

129 
	#IMG_SëEº‹
 
SDL_SëEº‹


	)

130 
	#IMG_GëEº‹
 
SDL_GëEº‹


	)

133 #ifde‡
__˝lu•lus


136 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_mixer.h

24 #i‚de‡
_SDL_MIXER_H


25 
	#_SDL_MIXER_H


	)

27 
	~"SDL_ty≥s.h
"

28 
	~"SDL_rw›s.h
"

29 
	~"SDL_audio.h
"

30 
	~"SDL_ídün.h
"

31 
	~"SDL_vîsi⁄.h
"

32 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


41 
	#SDL_MIXER_MAJOR_VERSION
 1

	)

42 
	#SDL_MIXER_MINOR_VERSION
 2

	)

43 
	#SDL_MIXER_PATCHLEVEL
 12

	)

48 
	#SDL_MIXER_VERSION
(
X
) \

50 (
X
)->
maj‹
 = 
SDL_MIXER_MAJOR_VERSION
; \

51 (
X
)->
mö‹
 = 
SDL_MIXER_MINOR_VERSION
; \

52 (
X
)->
∑tch
 = 
SDL_MIXER_PATCHLEVEL
; \

53 }

	)

56 
	#MIX_MAJOR_VERSION
 
SDL_MIXER_MAJOR_VERSION


	)

57 
	#MIX_MINOR_VERSION
 
SDL_MIXER_MINOR_VERSION


	)

58 
	#MIX_PATCHLEVEL
 
SDL_MIXER_PATCHLEVEL


	)

59 
	#MIX_VERSION
(
X
Ë
	`SDL_MIXER_VERSION
(X)

	)

65 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
Mix_Löked_Vîsi⁄
();

69 
	gMIX_INIT_FLAC
 = 0x00000001,

70 
	gMIX_INIT_MOD
 = 0x00000002,

71 
	gMIX_INIT_MP3
 = 0x00000004,

72 
	gMIX_INIT_OGG
 = 0x00000008,

73 
	gMIX_INIT_FLUIDSYNTH
 = 0x00000010

74 } 
	tMIX_InôFœgs
;

80 
DECLSPEC
 
SDLCALL
 
Mix_Inô
(
Êags
);

83 
DECLSPEC
 
SDLCALL
 
Mix_Quô
();

87 #i‚de‡
MIX_CHANNELS


88 
	#MIX_CHANNELS
 8

	)

92 
	#MIX_DEFAULT_FREQUENCY
 22050

	)

93 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


94 
	#MIX_DEFAULT_FORMAT
 
AUDIO_S16LSB


	)

96 
	#MIX_DEFAULT_FORMAT
 
AUDIO_S16MSB


	)

98 
	#MIX_DEFAULT_CHANNELS
 2

	)

99 
	#MIX_MAX_VOLUME
 128

	)

102 
	sMix_Chunk
 {

103 
	gÆloˇãd
;

104 
Uöt8
 *
	gabuf
;

105 
Uöt32
 
	gÆí
;

106 
Uöt8
 
	gvﬁume
;

107 } 
	tMix_Chunk
;

111 
	gMIX_NO_FADING
,

112 
	gMIX_FADING_OUT
,

113 
	gMIX_FADING_IN


114 } 
	tMix_Fadög
;

117 
	gMUS_NONE
,

118 
	gMUS_CMD
,

119 
	gMUS_WAV
,

120 
	gMUS_MOD
,

121 
	gMUS_MID
,

122 
	gMUS_OGG
,

123 
	gMUS_MP3
,

124 
	gMUS_MP3_MAD
,

125 
	gMUS_FLAC
,

126 
	gMUS_MODPLUG


127 } 
	tMix_MusicTy≥
;

130 
_Mix_Music
 
	tMix_Music
;

133 
DECLSPEC
 
SDLCALL
 
Mix_O≥nAudio
(
‰equícy
, 
Uöt16
 
f‹m©
, 
ch™√ls
,

134 
chunksize
);

141 
DECLSPEC
 
SDLCALL
 
Mix_AŒoˇãCh™√ls
(
numch™s
);

146 
DECLSPEC
 
SDLCALL
 
Mix_QuîyS≥c
(*
‰equícy
,
Uöt16
 *
f‹m©
,*
ch™√ls
);

149 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_LﬂdWAV_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

150 
	#Mix_LﬂdWAV
(
fûe
Ë
	`Mix_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

151 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUS
(c⁄° *
fûe
);

155 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUS_RW
(
SDL_RW›s
 *
rw
);

158 
DECLSPEC
 
Mix_Music
 * 
SDLCALL
 
Mix_LﬂdMUSTy≥_RW
(
SDL_RW›s
 *
rw
, 
Mix_MusicTy≥
 
ty≥
, 
‰ì§c
);

161 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_QuickLﬂd_WAV
(
Uöt8
 *
mem
);

164 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_QuickLﬂd_RAW
(
Uöt8
 *
mem
, 
Uöt32
 
Àn
);

167 
DECLSPEC
 
SDLCALL
 
Mix_FªeChunk
(
Mix_Chunk
 *
chunk
);

168 
DECLSPEC
 
SDLCALL
 
Mix_FªeMusic
(
Mix_Music
 *
music
);

189 
DECLSPEC
 
SDLCALL
 
Mix_GëNumChunkDecodîs
();

190 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëChunkDecodî
(
ödex
);

191 
DECLSPEC
 
SDLCALL
 
Mix_GëNumMusicDecodîs
();

192 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëMusicDecodî
(
ödex
);

197 
DECLSPEC
 
Mix_MusicTy≥
 
SDLCALL
 
Mix_GëMusicTy≥
(c⁄° 
Mix_Music
 *
music
);

203 
DECLSPEC
 
SDLCALL
 
Mix_SëPo°Mix
((*
mix_func
)

204 (*
ud©a
, 
Uöt8
 *
°ªam
, 
Àn
), *
¨g
);

209 
DECLSPEC
 
SDLCALL
 
Mix_HookMusic
((*
mix_func
)

210 (*
ud©a
, 
Uöt8
 *
°ªam
, 
Àn
), *
¨g
);

215 
DECLSPEC
 
SDLCALL
 
Mix_HookMusicFöished
((*
music_föished
)());

218 
DECLSPEC
 * 
SDLCALL
 
Mix_GëMusicHookD©a
();

228 
DECLSPEC
 
SDLCALL
 
Mix_Ch™√lFöished
((*
ch™√l_föished
)(
ch™√l
));

233 
	#MIX_CHANNEL_POST
 -2

	)

252 (*
	gMix_Ef„˘Func_t
)(
	tch™
, *
	t°ªam
, 
	tÀn
, *
	tud©a
);

263 (*
	gMix_Ef„˘D⁄e_t
)(
	tch™
, *
	tud©a
);

312 
DECLSPEC
 
SDLCALL
 
Mix_Regi°îEf„˘
(
ch™
, 
Mix_Ef„˘Func_t
 
f
,

313 
Mix_Ef„˘D⁄e_t
 
d
, *
¨g
);

324 
DECLSPEC
 
SDLCALL
 
Mix_Uƒegi°îEf„˘
(
ch™√l
, 
Mix_Ef„˘Func_t
 
f
);

338 
DECLSPEC
 
SDLCALL
 
Mix_Uƒegi°îAŒEf„˘s
(
ch™√l
);

341 
	#MIX_EFFECTSMAXSPEED
 "MIX_EFFECTSMAXSPEED"

	)

378 
DECLSPEC
 
SDLCALL
 
Mix_SëP™nög
(
ch™√l
, 
Uöt8
 
À·
, Uöt8 
right
);

418 
DECLSPEC
 
SDLCALL
 
Mix_SëPosôi⁄
(
ch™√l
, 
Söt16
 
™gÀ
, 
Uöt8
 
di°™˚
);

448 
DECLSPEC
 
SDLCALL
 
Mix_SëDi°™˚
(
ch™√l
, 
Uöt8
 
di°™˚
);

472 
no_∑r£_DECLSPEC
 
SDLCALL
 
Mix_SëRevîb
(
ch™√l
, 
Uöt8
 
echo
);

495 
DECLSPEC
 
SDLCALL
 
Mix_SëRevî£Sãªo
(
ch™√l
, 
Êù
);

504 
DECLSPEC
 
SDLCALL
 
Mix_Re£rveCh™√ls
(
num
);

514 
DECLSPEC
 
SDLCALL
 
Mix_GroupCh™√l
(
which
, 
èg
);

516 
DECLSPEC
 
SDLCALL
 
Mix_GroupCh™√ls
(
‰om
, 
to
, 
èg
);

520 
DECLSPEC
 
SDLCALL
 
Mix_GroupAvaûabÀ
(
èg
);

524 
DECLSPEC
 
SDLCALL
 
Mix_GroupCou¡
(
èg
);

526 
DECLSPEC
 
SDLCALL
 
Mix_GroupOlde°
(
èg
);

528 
DECLSPEC
 
SDLCALL
 
Mix_GroupNewî
(
èg
);

536 
	#Mix_PœyCh™√l
(
ch™√l
,
chunk
,
lo›s
Ë
	`Mix_PœyCh™√lTimed
(ch™√l,chunk,lo›s,-1)

	)

538 
DECLSPEC
 
SDLCALL
 
Mix_PœyCh™√lTimed
(
ch™√l
, 
Mix_Chunk
 *
chunk
, 
lo›s
, 
ticks
);

539 
DECLSPEC
 
SDLCALL
 
Mix_PœyMusic
(
Mix_Music
 *
music
, 
lo›s
);

542 
DECLSPEC
 
SDLCALL
 
Mix_FadeInMusic
(
Mix_Music
 *
music
, 
lo›s
, 
ms
);

543 
DECLSPEC
 
SDLCALL
 
Mix_FadeInMusicPos
(
Mix_Music
 *
music
, 
lo›s
, 
ms
, 
posôi⁄
);

544 
	#Mix_FadeInCh™√l
(
ch™√l
,
chunk
,
lo›s
,
ms
Ë
	`Mix_FadeInCh™√lTimed
(ch™√l,chunk,lo›s,ms,-1)

	)

545 
DECLSPEC
 
SDLCALL
 
Mix_FadeInCh™√lTimed
(
ch™√l
, 
Mix_Chunk
 *
chunk
, 
lo›s
, 
ms
, 
ticks
);

552 
DECLSPEC
 
SDLCALL
 
Mix_Vﬁume
(
ch™√l
, 
vﬁume
);

553 
DECLSPEC
 
SDLCALL
 
Mix_VﬁumeChunk
(
Mix_Chunk
 *
chunk
, 
vﬁume
);

554 
DECLSPEC
 
SDLCALL
 
Mix_VﬁumeMusic
(
vﬁume
);

557 
DECLSPEC
 
SDLCALL
 
Mix_HÆtCh™√l
(
ch™√l
);

558 
DECLSPEC
 
SDLCALL
 
Mix_HÆtGroup
(
èg
);

559 
DECLSPEC
 
SDLCALL
 
Mix_HÆtMusic
();

565 
DECLSPEC
 
SDLCALL
 
Mix_ExpúeCh™√l
(
ch™√l
, 
ticks
);

571 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutCh™√l
(
which
, 
ms
);

572 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutGroup
(
èg
, 
ms
);

573 
DECLSPEC
 
SDLCALL
 
Mix_FadeOutMusic
(
ms
);

576 
DECLSPEC
 
Mix_Fadög
 
SDLCALL
 
Mix_FadögMusic
();

577 
DECLSPEC
 
Mix_Fadög
 
SDLCALL
 
Mix_FadögCh™√l
(
which
);

580 
DECLSPEC
 
SDLCALL
 
Mix_Pau£
(
ch™√l
);

581 
DECLSPEC
 
SDLCALL
 
Mix_Resume
(
ch™√l
);

582 
DECLSPEC
 
SDLCALL
 
Mix_Pau£d
(
ch™√l
);

585 
DECLSPEC
 
SDLCALL
 
Mix_Pau£Music
();

586 
DECLSPEC
 
SDLCALL
 
Mix_ResumeMusic
();

587 
DECLSPEC
 
SDLCALL
 
Mix_RewödMusic
();

588 
DECLSPEC
 
SDLCALL
 
Mix_Pau£dMusic
();

596 
DECLSPEC
 
SDLCALL
 
Mix_SëMusicPosôi⁄
(
posôi⁄
);

601 
DECLSPEC
 
SDLCALL
 
Mix_Pœyög
(
ch™√l
);

602 
DECLSPEC
 
SDLCALL
 
Mix_PœyögMusic
();

605 
DECLSPEC
 
SDLCALL
 
Mix_SëMusicCMD
(c⁄° *
comm™d
);

608 
DECLSPEC
 
SDLCALL
 
Mix_SëSynchroVÆue
(
vÆue
);

609 
DECLSPEC
 
SDLCALL
 
Mix_GëSynchroVÆue
();

612 
DECLSPEC
 
SDLCALL
 
Mix_SëSoundF⁄ts
(c⁄° *
∑ths
);

613 
DECLSPEC
 c⁄° * 
SDLCALL
 
Mix_GëSoundF⁄ts
();

614 
DECLSPEC
 
SDLCALL
 
Mix_EachSoundF⁄t
((*
fun˘i⁄
)(c⁄° *, *), *
d©a
);

619 
DECLSPEC
 
Mix_Chunk
 * 
SDLCALL
 
Mix_GëChunk
(
ch™√l
);

622 
DECLSPEC
 
SDLCALL
 
Mix_Clo£Audio
();

625 
	#Mix_SëEº‹
 
SDL_SëEº‹


	)

626 
	#Mix_GëEº‹
 
SDL_GëEº‹


	)

629 #ifde‡
__˝lu•lus


632 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_ttf.h

27 #i‚de‡
_SDL_TTF_H


28 
	#_SDL_TTF_H


	)

30 
	~"SDL.h
"

31 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


40 
	#SDL_TTF_MAJOR_VERSION
 2

	)

41 
	#SDL_TTF_MINOR_VERSION
 0

	)

42 
	#SDL_TTF_PATCHLEVEL
 11

	)

47 
	#SDL_TTF_VERSION
(
X
) \

49 (
X
)->
maj‹
 = 
SDL_TTF_MAJOR_VERSION
; \

50 (
X
)->
mö‹
 = 
SDL_TTF_MINOR_VERSION
; \

51 (
X
)->
∑tch
 = 
SDL_TTF_PATCHLEVEL
; \

52 }

	)

55 
	#TTF_MAJOR_VERSION
 
SDL_TTF_MAJOR_VERSION


	)

56 
	#TTF_MINOR_VERSION
 
SDL_TTF_MINOR_VERSION


	)

57 
	#TTF_PATCHLEVEL
 
SDL_TTF_PATCHLEVEL


	)

58 
	#TTF_VERSION
(
X
Ë
	`SDL_TTF_VERSION
(X)

	)

64 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
TTF_Löked_Vîsi⁄
();

67 
	#UNICODE_BOM_NATIVE
 0xFEFF

	)

68 
	#UNICODE_BOM_SWAPPED
 0xFFFE

	)

74 
DECLSPEC
 
SDLCALL
 
TTF_ByãSw≠≥dUNICODE
(
sw≠≥d
);

77 
_TTF_F⁄t
 
	tTTF_F⁄t
;

80 
DECLSPEC
 
SDLCALL
 
TTF_Inô
();

86 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄t
(c⁄° *
fûe
, 
±size
);

87 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndex
(c⁄° *
fûe
, 
±size
, 
ödex
);

88 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
);

89 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndexRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
, 
ödex
);

92 
	#TTF_STYLE_NORMAL
 0x00

	)

93 
	#TTF_STYLE_BOLD
 0x01

	)

94 
	#TTF_STYLE_ITALIC
 0x02

	)

95 
	#TTF_STYLE_UNDERLINE
 0x04

	)

96 
	#TTF_STYLE_STRIKETHROUGH
 0x08

	)

97 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tStyÀ
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

98 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tStyÀ
(
TTF_F⁄t
 *
f⁄t
, 
°yÀ
);

99 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tOuéöe
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

100 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tOuéöe
(
TTF_F⁄t
 *
f⁄t
, 
ouéöe
);

103 
	#TTF_HINTING_NORMAL
 0

	)

104 
	#TTF_HINTING_LIGHT
 1

	)

105 
	#TTF_HINTING_MONO
 2

	)

106 
	#TTF_HINTING_NONE
 3

	)

107 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tHötög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

108 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tHötög
(
TTF_F⁄t
 *
f⁄t
, 
hötög
);

111 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tHeight
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

116 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tAs˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

121 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tDes˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

124 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tLöeSkù
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

127 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tKînög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

128 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tKînög
(
TTF_F⁄t
 *
f⁄t
, 
Ælowed
);

131 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚s
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

134 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚IsFixedWidth
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

135 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚FamûyName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

136 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚StyÀName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

139 
DECLSPEC
 
SDLCALL
 
TTF_GlyphIsProvided
(c⁄° 
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
);

145 
DECLSPEC
 
SDLCALL
 
TTF_GlyphMërics
(
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
,

146 *
möx
, *
maxx
,

147 *
möy
, *
maxy
, *
adv™˚
);

150 
DECLSPEC
 
SDLCALL
 
TTF_SizeText
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

151 
DECLSPEC
 
SDLCALL
 
TTF_SizeUTF8
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

152 
DECLSPEC
 
SDLCALL
 
TTF_SizeUNICODE
(
TTF_F⁄t
 *
f⁄t
, c⁄° 
Uöt16
 *
ãxt
, *
w
, *
h
);

160 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

161 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

162 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

163 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

164 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

165 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

174 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

175 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

182 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Shaded
(
TTF_F⁄t
 *
f⁄t
,

183 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

184 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Shaded
(
TTF_F⁄t
 *
f⁄t
,

185 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

186 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Shaded
(
TTF_F⁄t
 *
f⁄t
,

187 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

196 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Shaded
(
TTF_F⁄t
 *
f⁄t
,

197 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

203 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

204 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

205 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

206 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

207 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

208 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

216 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

217 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

220 
	#TTF_RídîText
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

221 
	`TTF_RídîText_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

222 
	#TTF_RídîUTF8
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

223 
	`TTF_RídîUTF8_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

224 
	#TTF_RídîUNICODE
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

225 
	`TTF_RídîUNICODE_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

228 
DECLSPEC
 
SDLCALL
 
TTF_Clo£F⁄t
(
TTF_F⁄t
 *
f⁄t
);

231 
DECLSPEC
 
SDLCALL
 
TTF_Quô
();

234 
DECLSPEC
 
SDLCALL
 
TTF_WasInô
();

237 
DECLSPEC
 
TTF_GëF⁄tKînögSize
(
TTF_F⁄t
 *
f⁄t
, 
¥ev_ödex
, 
ödex
);

240 
	#TTF_SëEº‹
 
SDL_SëEº‹


	)

241 
	#TTF_GëEº‹
 
SDL_GëEº‹


	)

244 #ifde‡
__˝lu•lus


247 
	~"˛o£_code.h
"

	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

61 #i‡
deföed
(
ISC
Ë&& deföed(
USE_XMBTOWC
)

62 
	#w˘omb
(
a
,
b
Ë
	`_Xw˘omb
◊,b)

	)

63 
	#mbÀn
(
a
,
b
Ë
	`_XmbÀn
◊,b)

	)

64 #i‚de‡
USE_XWCHAR_STRING


65 
	#mbtowc
(
a
,
b
,
c
Ë
	`_Xmbtowc
◊,b,c)

	)

70 
_XmbÀn
(

71 #ifde‡
ISC


72 c⁄° *
°r
,

73 
size_t
 
Àn


75 *
°r
,

76 
Àn


82 
	#X_HAVE_UTF8_STRING
 1

	)

84 *
	tXPoöãr
;

86 
	#Boﬁ
 

	)

87 
	#Sètus
 

	)

88 
	#True
 1

	)

89 
	#FÆ£
 0

	)

91 
	#QueuedAÃódy
 0

	)

92 
	#QueuedA·îRódög
 1

	)

93 
	#QueuedA·îFlush
 2

	)

95 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

96 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

97 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

98 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

99 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

100 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

101 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

102 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

103 
	#AŒPœ√s
 (()~0L)

	)

104 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

105 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

106 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

107 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

108 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

109 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

110 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

111 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

112 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

113 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

114 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

115 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

116 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

117 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

118 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

119 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

120 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

121 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

122 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

123 #ifde‡
CRAY


124 
	#NextReque°
(
dpy
Ë
	`XNextReque°
(dpy)

	)

126 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

128 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

131 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

132 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

133 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

134 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

135 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

136 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

137 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

138 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

139 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

140 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

141 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

142 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

143 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

144 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

145 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

146 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

147 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

148 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

149 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

150 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

151 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

156 
	s_XExtD©a
 {

157 
	mnumbî
;

158 
_XExtD©a
 *
	m√xt
;

159 (*
	m‰ì_¥iv©e
)(

160 
_XExtD©a
 *
	mexãnsi⁄


162 
XPoöãr
 
	m¥iv©e_d©a
;

163 } 
	tXExtD©a
;

169 
	mexãnsi⁄
;

170 
	mmaj‹_›code
;

171 
	mfú°_evít
;

172 
	mfú°_îr‹
;

173 } 
	tXExtCodes
;

180 
	mdïth
;

181 
	mbôs_≥r_pixñ
;

182 
	msˇ∆öe_∑d
;

183 } 
	tXPixm≠F‹m©VÆues
;

190 
	mfun˘i⁄
;

191 
	m∂™e_mask
;

192 
	mf‹eground
;

193 
	mbackground
;

194 
	mlöe_width
;

195 
	mlöe_°yÀ
;

196 
	mˇp_°yÀ
;

198 
	mjoö_°yÀ
;

199 
	mfûl_°yÀ
;

201 
	mfûl_ruÀ
;

202 
	m¨c_mode
;

203 
Pixm≠
 
	mtûe
;

204 
Pixm≠
 
	m°ù∂e
;

205 
	mts_x_‹igö
;

206 
	mts_y_‹igö
;

207 
F⁄t
 
	mf⁄t
;

208 
	msubwödow_mode
;

209 
Boﬁ
 
	mgøphics_exposuªs
;

210 
	m˛ù_x_‹igö
;

211 
	m˛ù_y_‹igö
;

212 
Pixm≠
 
	m˛ù_mask
;

213 
	mdash_off£t
;

214 
	mdashes
;

215 } 
	tXGCVÆues
;

222 
	g_XGC


223 #ifde‡
	tXLIB_ILLEGAL_ACCESS


225 
XExtD©a
 *
	gext_d©a
;

226 
GC⁄ãxt
 
	ggid
;

230 *
	tGC
;

236 
XExtD©a
 *
	mext_d©a
;

237 
VisuÆID
 
	mvisuÆid
;

238 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

239 
	mc_˛ass
;

241 
	m˛ass
;

243 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

244 
	mbôs_≥r_rgb
;

245 
	mm≠_íåõs
;

246 } 
	tVisuÆ
;

252 
	mdïth
;

253 
	mnvisuÆs
;

254 
VisuÆ
 *
	mvisuÆs
;

255 } 
	tDïth
;

263 
	g_XDi•œy
;

266 
XExtD©a
 *
	mext_d©a
;

267 
_XDi•œy
 *
	mdi•œy
;

268 
Wödow
 
	mroŸ
;

269 
	mwidth
, 
	mheight
;

270 
	mmwidth
, 
	mmheight
;

271 
	mndïths
;

272 
Dïth
 *
	mdïths
;

273 
	mroŸ_dïth
;

274 
VisuÆ
 *
	mroŸ_visuÆ
;

275 
GC
 
	mdeÁu…_gc
;

276 
Cﬁ‹m≠
 
	mcm≠
;

277 
	mwhôe_pixñ
;

278 
	mbœck_pixñ
;

279 
	mmax_m≠s
, 
	mmö_m≠s
;

280 
	mbackög_°‹e
;

281 
Boﬁ
 
	mßve_undîs
;

282 
	mroŸ_öput_mask
;

283 } 
	tS¸ìn
;

289 
XExtD©a
 *
	mext_d©a
;

290 
	mdïth
;

291 
	mbôs_≥r_pixñ
;

292 
	msˇ∆öe_∑d
;

293 } 
	tS¸ìnF‹m©
;

299 
Pixm≠
 
	mbackground_pixm≠
;

300 
	mbackground_pixñ
;

301 
Pixm≠
 
	mb‹dî_pixm≠
;

302 
	mb‹dî_pixñ
;

303 
	mbô_gøvôy
;

304 
	mwö_gøvôy
;

305 
	mbackög_°‹e
;

306 
	mbackög_∂™es
;

307 
	mbackög_pixñ
;

308 
Boﬁ
 
	mßve_undî
;

309 
	mevít_mask
;

310 
	mdo_nŸ_¥›ag©e_mask
;

311 
Boﬁ
 
	movîride_ªdúe˘
;

312 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

313 
Curs‹
 
	mcurs‹
;

314 } 
	tXSëWödowAâribuãs
;

317 
	mx
, 
	my
;

318 
	mwidth
, 
	mheight
;

319 
	mb‹dî_width
;

320 
	mdïth
;

321 
VisuÆ
 *
	mvisuÆ
;

322 
Wödow
 
	mroŸ
;

323 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

324 
	mc_˛ass
;

326 
	m˛ass
;

328 
	mbô_gøvôy
;

329 
	mwö_gøvôy
;

330 
	mbackög_°‹e
;

331 
	mbackög_∂™es
;

332 
	mbackög_pixñ
;

333 
Boﬁ
 
	mßve_undî
;

334 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

335 
Boﬁ
 
	mm≠_ö°ÆÀd
;

336 
	mm≠_°©e
;

337 
	mÆl_evít_masks
;

338 
	myour_evít_mask
;

339 
	mdo_nŸ_¥›ag©e_mask
;

340 
Boﬁ
 
	movîride_ªdúe˘
;

341 
S¸ìn
 *
	ms¸ìn
;

342 } 
	tXWödowAâribuãs
;

350 
	mÁmûy
;

351 
	mÀngth
;

352 *
	maddªss
;

353 } 
	tXHo°Addªss
;

359 
	mty≥Àngth
;

360 
	mvÆuñígth
;

361 *
	mty≥
;

362 *
	mvÆue
;

363 } 
	tXSîvîI¡î¥ëedAddªss
;

368 
	s_XImage
 {

369 
	mwidth
, 
	mheight
;

370 
	mxoff£t
;

371 
	mf‹m©
;

372 *
	md©a
;

373 
	mbyã_‹dî
;

374 
	mbôm≠_unô
;

375 
	mbôm≠_bô_‹dî
;

376 
	mbôm≠_∑d
;

377 
	mdïth
;

378 
	mbyãs_≥r_löe
;

379 
	mbôs_≥r_pixñ
;

380 
	mªd_mask
;

381 
	mgªí_mask
;

382 
	mblue_mask
;

383 
XPoöãr
 
	mobd©a
;

384 
	sfuncs
 {

385 
	m_XImage
 *(*
	m¸óã_image
)(

386 
	m_XDi•œy
* ,

387 
	mVisuÆ
* ,

396 (*
	mde°roy_image
Ë(
	m_XImage
 *);

397 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

398 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

399 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

400 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

401 } 
	mf
;

402 } 
	tXImage
;

408 
	mx
, 
	my
;

409 
	mwidth
, 
	mheight
;

410 
	mb‹dî_width
;

411 
Wödow
 
	msiblög
;

412 
	m°ack_mode
;

413 } 
	tXWödowCh™ges
;

419 
	mpixñ
;

420 
	mªd
, 
	mgªí
, 
	mblue
;

421 
	mÊags
;

422 
	m∑d
;

423 } 
	tXCﬁ‹
;

431 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

432 } 
	tXSegmít
;

435 
	mx
, 
	my
;

436 } 
	tXPoöt
;

439 
	mx
, 
	my
;

440 
	mwidth
, 
	mheight
;

441 } 
	tXRe˘™gÀ
;

444 
	mx
, 
	my
;

445 
	mwidth
, 
	mheight
;

446 
	m™gÀ1
, 
	m™gÀ2
;

447 } 
	tXArc
;

453 
	mkey_˛ick_≥r˚¡
;

454 
	mbñl_≥r˚¡
;

455 
	mbñl_pôch
;

456 
	mbñl_duøti⁄
;

457 
	mÀd
;

458 
	mÀd_mode
;

459 
	mkey
;

460 
	mauto_ª≥©_mode
;

461 } 
	tXKeybﬂrdC⁄åﬁ
;

466 
	mkey_˛ick_≥r˚¡
;

467 
	mbñl_≥r˚¡
;

468 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

469 
	mÀd_mask
;

470 
	mglobÆ_auto_ª≥©
;

471 
	mauto_ª≥©s
[32];

472 } 
	tXKeybﬂrdSèã
;

477 
Time
 
	mtime
;

478 
	mx
, 
	my
;

479 } 
	tXTimeCo‹d
;

484 
	mmax_key≥rmod
;

485 
KeyCode
 *
	mmodifõrm≠
;

486 } 
	tXModifõrKeym≠
;

494 #i‚de‡
XLIB_ILLEGAL_ACCESS


495 
_XDi•œy
 
	tDi•œy
;

498 
	g_XPriv©e
;

499 
	g_XrmHashBuckëRec
;

502 #ifde‡
XLIB_ILLEGAL_ACCESS


503 
	t_XDi•œy


506 
XExtD©a
 *
	gext_d©a
;

507 
_XPriv©e
 *
	g¥iv©e1
;

508 
	gfd
;

509 
	g¥iv©e2
;

510 
	g¥Ÿo_maj‹_vîsi⁄
;

511 
	g¥Ÿo_mö‹_vîsi⁄
;

512 *
	gvíd‹
;

513 
XID
 
	g¥iv©e3
;

514 
XID
 
	g¥iv©e4
;

515 
XID
 
	g¥iv©e5
;

516 
	g¥iv©e6
;

517 
XID
 (*
ªsour˚_Æloc
)(

518 
	g_XDi•œy
*

520 
	gbyã_‹dî
;

521 
	gbôm≠_unô
;

522 
	gbôm≠_∑d
;

523 
	gbôm≠_bô_‹dî
;

524 
	gnf‹m©s
;

525 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

526 
	g¥iv©e8
;

527 
	gªÀa£
;

528 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

529 
	gqÀn
;

530 
	gœ°_ªque°_ªad
;

531 
	gªque°
;

532 
XPoöãr
 
	g¥iv©e11
;

533 
XPoöãr
 
	g¥iv©e12
;

534 
XPoöãr
 
	g¥iv©e13
;

535 
XPoöãr
 
	g¥iv©e14
;

536 
	gmax_ªque°_size
;

537 
_XrmHashBuckëRec
 *
	gdb
;

538 (*
	g¥iv©e15
)(

539 
	g_XDi•œy
*

541 *
	gdi•œy_«me
;

542 
	gdeÁu…_s¸ìn
;

543 
	gns¸ìns
;

544 
S¸ìn
 *
	gs¸ìns
;

545 
	gmŸi⁄_buf„r
;

546 
	g¥iv©e16
;

547 
	gmö_keycode
;

548 
	gmax_keycode
;

549 
XPoöãr
 
	g¥iv©e17
;

550 
XPoöãr
 
	g¥iv©e18
;

551 
	g¥iv©e19
;

552 *
	gxdeÁu…s
;

555 #ifde‡
	tXLIB_ILLEGAL_ACCESS


556 
	tDi•œy
,

558 *
	t_XPrivDi•œy
;

560 #unde‡
_XEVENT_


561 #i‚de‡
_XEVENT_


566 
	mty≥
;

567 
	m£rül
;

568 
Boﬁ
 
	m£nd_evít
;

569 
Di•œy
 *
	mdi•œy
;

570 
Wödow
 
	mwödow
;

571 
Wödow
 
	mroŸ
;

572 
Wödow
 
	msubwödow
;

573 
Time
 
	mtime
;

574 
	mx
, 
	my
;

575 
	mx_roŸ
, 
	my_roŸ
;

576 
	m°©e
;

577 
	mkeycode
;

578 
Boﬁ
 
	mßme_s¸ìn
;

579 } 
	tXKeyEvít
;

580 
XKeyEvít
 
	tXKeyPªs£dEvít
;

581 
XKeyEvít
 
	tXKeyRñó£dEvít
;

584 
	mty≥
;

585 
	m£rül
;

586 
Boﬁ
 
	m£nd_evít
;

587 
Di•œy
 *
	mdi•œy
;

588 
Wödow
 
	mwödow
;

589 
Wödow
 
	mroŸ
;

590 
Wödow
 
	msubwödow
;

591 
Time
 
	mtime
;

592 
	mx
, 
	my
;

593 
	mx_roŸ
, 
	my_roŸ
;

594 
	m°©e
;

595 
	mbuâ⁄
;

596 
Boﬁ
 
	mßme_s¸ìn
;

597 } 
	tXBuâ⁄Evít
;

598 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

599 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

602 
	mty≥
;

603 
	m£rül
;

604 
Boﬁ
 
	m£nd_evít
;

605 
Di•œy
 *
	mdi•œy
;

606 
Wödow
 
	mwödow
;

607 
Wödow
 
	mroŸ
;

608 
Wödow
 
	msubwödow
;

609 
Time
 
	mtime
;

610 
	mx
, 
	my
;

611 
	mx_roŸ
, 
	my_roŸ
;

612 
	m°©e
;

613 
	mis_höt
;

614 
Boﬁ
 
	mßme_s¸ìn
;

615 } 
	tXMŸi⁄Evít
;

616 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

619 
	mty≥
;

620 
	m£rül
;

621 
Boﬁ
 
	m£nd_evít
;

622 
Di•œy
 *
	mdi•œy
;

623 
Wödow
 
	mwödow
;

624 
Wödow
 
	mroŸ
;

625 
Wödow
 
	msubwödow
;

626 
Time
 
	mtime
;

627 
	mx
, 
	my
;

628 
	mx_roŸ
, 
	my_roŸ
;

629 
	mmode
;

630 
	mdëaû
;

635 
Boﬁ
 
	mßme_s¸ìn
;

636 
Boﬁ
 
	mfocus
;

637 
	m°©e
;

638 } 
	tXCrossögEvít
;

639 
XCrossögEvít
 
	tXE¡îWödowEvít
;

640 
XCrossögEvít
 
	tXLóveWödowEvít
;

643 
	mty≥
;

644 
	m£rül
;

645 
Boﬁ
 
	m£nd_evít
;

646 
Di•œy
 *
	mdi•œy
;

647 
Wödow
 
	mwödow
;

648 
	mmode
;

650 
	mdëaû
;

656 } 
	tXFocusCh™geEvít
;

657 
XFocusCh™geEvít
 
	tXFocusInEvít
;

658 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

662 
	mty≥
;

663 
	m£rül
;

664 
Boﬁ
 
	m£nd_evít
;

665 
Di•œy
 *
	mdi•œy
;

666 
Wödow
 
	mwödow
;

667 
	mkey_ve˘‹
[32];

668 } 
	tXKeym≠Evít
;

671 
	mty≥
;

672 
	m£rül
;

673 
Boﬁ
 
	m£nd_evít
;

674 
Di•œy
 *
	mdi•œy
;

675 
Wödow
 
	mwödow
;

676 
	mx
, 
	my
;

677 
	mwidth
, 
	mheight
;

678 
	mcou¡
;

679 } 
	tXExpo£Evít
;

682 
	mty≥
;

683 
	m£rül
;

684 
Boﬁ
 
	m£nd_evít
;

685 
Di•œy
 *
	mdi•œy
;

686 
DøwabÀ
 
	mdøwabÀ
;

687 
	mx
, 
	my
;

688 
	mwidth
, 
	mheight
;

689 
	mcou¡
;

690 
	mmaj‹_code
;

691 
	mmö‹_code
;

692 } 
	tXGøphicsExpo£Evít
;

695 
	mty≥
;

696 
	m£rül
;

697 
Boﬁ
 
	m£nd_evít
;

698 
Di•œy
 *
	mdi•œy
;

699 
DøwabÀ
 
	mdøwabÀ
;

700 
	mmaj‹_code
;

701 
	mmö‹_code
;

702 } 
	tXNoExpo£Evít
;

705 
	mty≥
;

706 
	m£rül
;

707 
Boﬁ
 
	m£nd_evít
;

708 
Di•œy
 *
	mdi•œy
;

709 
Wödow
 
	mwödow
;

710 
	m°©e
;

711 } 
	tXVisibûôyEvít
;

714 
	mty≥
;

715 
	m£rül
;

716 
Boﬁ
 
	m£nd_evít
;

717 
Di•œy
 *
	mdi•œy
;

718 
Wödow
 
	m∑ª¡
;

719 
Wödow
 
	mwödow
;

720 
	mx
, 
	my
;

721 
	mwidth
, 
	mheight
;

722 
	mb‹dî_width
;

723 
Boﬁ
 
	movîride_ªdúe˘
;

724 } 
	tXCª©eWödowEvít
;

727 
	mty≥
;

728 
	m£rül
;

729 
Boﬁ
 
	m£nd_evít
;

730 
Di•œy
 *
	mdi•œy
;

731 
Wödow
 
	mevít
;

732 
Wödow
 
	mwödow
;

733 } 
	tXDe°royWödowEvít
;

736 
	mty≥
;

737 
	m£rül
;

738 
Boﬁ
 
	m£nd_evít
;

739 
Di•œy
 *
	mdi•œy
;

740 
Wödow
 
	mevít
;

741 
Wödow
 
	mwödow
;

742 
Boﬁ
 
	m‰om_c⁄figuª
;

743 } 
	tXUnm≠Evít
;

746 
	mty≥
;

747 
	m£rül
;

748 
Boﬁ
 
	m£nd_evít
;

749 
Di•œy
 *
	mdi•œy
;

750 
Wödow
 
	mevít
;

751 
Wödow
 
	mwödow
;

752 
Boﬁ
 
	movîride_ªdúe˘
;

753 } 
	tXM≠Evít
;

756 
	mty≥
;

757 
	m£rül
;

758 
Boﬁ
 
	m£nd_evít
;

759 
Di•œy
 *
	mdi•œy
;

760 
Wödow
 
	m∑ª¡
;

761 
Wödow
 
	mwödow
;

762 } 
	tXM≠Reque°Evít
;

765 
	mty≥
;

766 
	m£rül
;

767 
Boﬁ
 
	m£nd_evít
;

768 
Di•œy
 *
	mdi•œy
;

769 
Wödow
 
	mevít
;

770 
Wödow
 
	mwödow
;

771 
Wödow
 
	m∑ª¡
;

772 
	mx
, 
	my
;

773 
Boﬁ
 
	movîride_ªdúe˘
;

774 } 
	tXRï¨ítEvít
;

777 
	mty≥
;

778 
	m£rül
;

779 
Boﬁ
 
	m£nd_evít
;

780 
Di•œy
 *
	mdi•œy
;

781 
Wödow
 
	mevít
;

782 
Wödow
 
	mwödow
;

783 
	mx
, 
	my
;

784 
	mwidth
, 
	mheight
;

785 
	mb‹dî_width
;

786 
Wödow
 
	mabove
;

787 
Boﬁ
 
	movîride_ªdúe˘
;

788 } 
	tXC⁄figuªEvít
;

791 
	mty≥
;

792 
	m£rül
;

793 
Boﬁ
 
	m£nd_evít
;

794 
Di•œy
 *
	mdi•œy
;

795 
Wödow
 
	mevít
;

796 
Wödow
 
	mwödow
;

797 
	mx
, 
	my
;

798 } 
	tXGøvôyEvít
;

801 
	mty≥
;

802 
	m£rül
;

803 
Boﬁ
 
	m£nd_evít
;

804 
Di•œy
 *
	mdi•œy
;

805 
Wödow
 
	mwödow
;

806 
	mwidth
, 
	mheight
;

807 } 
	tXResizeReque°Evít
;

810 
	mty≥
;

811 
	m£rül
;

812 
Boﬁ
 
	m£nd_evít
;

813 
Di•œy
 *
	mdi•œy
;

814 
Wödow
 
	m∑ª¡
;

815 
Wödow
 
	mwödow
;

816 
	mx
, 
	my
;

817 
	mwidth
, 
	mheight
;

818 
	mb‹dî_width
;

819 
Wödow
 
	mabove
;

820 
	mdëaû
;

821 
	mvÆue_mask
;

822 } 
	tXC⁄figuªReque°Evít
;

825 
	mty≥
;

826 
	m£rül
;

827 
Boﬁ
 
	m£nd_evít
;

828 
Di•œy
 *
	mdi•œy
;

829 
Wödow
 
	mevít
;

830 
Wödow
 
	mwödow
;

831 
	m∂a˚
;

832 } 
	tXCúcuœãEvít
;

835 
	mty≥
;

836 
	m£rül
;

837 
Boﬁ
 
	m£nd_evít
;

838 
Di•œy
 *
	mdi•œy
;

839 
Wödow
 
	m∑ª¡
;

840 
Wödow
 
	mwödow
;

841 
	m∂a˚
;

842 } 
	tXCúcuœãReque°Evít
;

845 
	mty≥
;

846 
	m£rül
;

847 
Boﬁ
 
	m£nd_evít
;

848 
Di•œy
 *
	mdi•œy
;

849 
Wödow
 
	mwödow
;

850 
Atom
 
	m©om
;

851 
Time
 
	mtime
;

852 
	m°©e
;

853 } 
	tXPr›îtyEvít
;

856 
	mty≥
;

857 
	m£rül
;

858 
Boﬁ
 
	m£nd_evít
;

859 
Di•œy
 *
	mdi•œy
;

860 
Wödow
 
	mwödow
;

861 
Atom
 
	m£À˘i⁄
;

862 
Time
 
	mtime
;

863 } 
	tXSñe˘i⁄CÀ¨Evít
;

866 
	mty≥
;

867 
	m£rül
;

868 
Boﬁ
 
	m£nd_evít
;

869 
Di•œy
 *
	mdi•œy
;

870 
Wödow
 
	mow√r
;

871 
Wödow
 
	mªque°‹
;

872 
Atom
 
	m£À˘i⁄
;

873 
Atom
 
	mèrgë
;

874 
Atom
 
	m¥›îty
;

875 
Time
 
	mtime
;

876 } 
	tXSñe˘i⁄Reque°Evít
;

879 
	mty≥
;

880 
	m£rül
;

881 
Boﬁ
 
	m£nd_evít
;

882 
Di•œy
 *
	mdi•œy
;

883 
Wödow
 
	mªque°‹
;

884 
Atom
 
	m£À˘i⁄
;

885 
Atom
 
	mèrgë
;

886 
Atom
 
	m¥›îty
;

887 
Time
 
	mtime
;

888 } 
	tXSñe˘i⁄Evít
;

891 
	mty≥
;

892 
	m£rül
;

893 
Boﬁ
 
	m£nd_evít
;

894 
Di•œy
 *
	mdi•œy
;

895 
Wödow
 
	mwödow
;

896 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

897 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

898 
Boﬁ
 
	mc_√w
;

900 
Boﬁ
 
	m√w
;

902 
	m°©e
;

903 } 
	tXCﬁ‹m≠Evít
;

906 
	mty≥
;

907 
	m£rül
;

908 
Boﬁ
 
	m£nd_evít
;

909 
Di•œy
 *
	mdi•œy
;

910 
Wödow
 
	mwödow
;

911 
Atom
 
	mmesßge_ty≥
;

912 
	mf‹m©
;

914 
	mb
[20];

915 
	ms
[10];

916 
	ml
[5];

917 } 
	md©a
;

918 } 
	tXClõ¡MesßgeEvít
;

921 
	mty≥
;

922 
	m£rül
;

923 
Boﬁ
 
	m£nd_evít
;

924 
Di•œy
 *
	mdi•œy
;

925 
Wödow
 
	mwödow
;

926 
	mªque°
;

928 
	mfú°_keycode
;

929 
	mcou¡
;

930 } 
	tXM≠pögEvít
;

933 
	mty≥
;

934 
Di•œy
 *
	mdi•œy
;

935 
XID
 
	mªsour˚id
;

936 
	m£rül
;

937 
	mîr‹_code
;

938 
	mªque°_code
;

939 
	mmö‹_code
;

940 } 
	tXEº‹Evít
;

943 
	mty≥
;

944 
	m£rül
;

945 
Boﬁ
 
	m£nd_evít
;

946 
Di•œy
 *
	mdi•œy
;

947 
Wödow
 
	mwödow
;

948 } 
	tXAnyEvít
;

958 
	mty≥
;

959 
	m£rül
;

960 
Boﬁ
 
	m£nd_evít
;

961 
Di•œy
 *
	mdi•œy
;

962 
	mexãnsi⁄
;

963 
	mevty≥
;

964 } 
	tXGíîicEvít
;

967 
	mty≥
;

968 
	m£rül
;

969 
Boﬁ
 
	m£nd_evít
;

970 
Di•œy
 *
	mdi•œy
;

971 
	mexãnsi⁄
;

972 
	mevty≥
;

973 
	mcookõ
;

974 *
	md©a
;

975 } 
	tXGíîicEvítCookõ
;

981 
	u_XEvít
 {

982 
	mty≥
;

983 
XAnyEvít
 
	mx™y
;

984 
XKeyEvít
 
	mxkey
;

985 
XBuâ⁄Evít
 
	mxbuâ⁄
;

986 
XMŸi⁄Evít
 
	mxmŸi⁄
;

987 
XCrossögEvít
 
	mx¸ossög
;

988 
XFocusCh™geEvít
 
	mxfocus
;

989 
XExpo£Evít
 
	mxexpo£
;

990 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

991 
XNoExpo£Evít
 
	mxn€xpo£
;

992 
XVisibûôyEvít
 
	mxvisibûôy
;

993 
XCª©eWödowEvít
 
	mx¸óãwödow
;

994 
XDe°royWödowEvít
 
	mxde°roywödow
;

995 
XUnm≠Evít
 
	mxunm≠
;

996 
XM≠Evít
 
	mxm≠
;

997 
XM≠Reque°Evít
 
	mxm≠ªque°
;

998 
XRï¨ítEvít
 
	mxª∑ª¡
;

999 
XC⁄figuªEvít
 
	mxc⁄figuª
;

1000 
XGøvôyEvít
 
	mxgøvôy
;

1001 
XResizeReque°Evít
 
	mxªsizîeque°
;

1002 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

1003 
XCúcuœãEvít
 
	mxcúcuœã
;

1004 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

1005 
XPr›îtyEvít
 
	mx¥›îty
;

1006 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

1007 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1008 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1009 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1010 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1011 
XM≠pögEvít
 
	mxm≠pög
;

1012 
XEº‹Evít
 
	mxîr‹
;

1013 
XKeym≠Evít
 
	mxkeym≠
;

1014 
XGíîicEvít
 
	mxgíîic
;

1015 
XGíîicEvítCookõ
 
	mxcookõ
;

1016 
	m∑d
[24];

1017 } 
	tXEvít
;

1020 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1026 
	mlbórög
;

1027 
	mrbórög
;

1028 
	mwidth
;

1029 
	mas˚¡
;

1030 
	mdes˚¡
;

1031 
	m©åibuãs
;

1032 } 
	tXCh¨Såu˘
;

1039 
Atom
 
	m«me
;

1040 
	mˇrd32
;

1041 } 
	tXF⁄tPr›
;

1044 
XExtD©a
 *
	mext_d©a
;

1045 
F⁄t
 
	mfid
;

1046 
	mdúe˘i⁄
;

1047 
	mmö_ch¨_‹_byã2
;

1048 
	mmax_ch¨_‹_byã2
;

1049 
	mmö_byã1
;

1050 
	mmax_byã1
;

1051 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1052 
	mdeÁu…_ch¨
;

1053 
	mn_¥›îtõs
;

1054 
XF⁄tPr›
 *
	m¥›îtõs
;

1055 
XCh¨Såu˘
 
	mmö_bounds
;

1056 
XCh¨Såu˘
 
	mmax_bounds
;

1057 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1058 
	mas˚¡
;

1059 
	mdes˚¡
;

1060 } 
	tXF⁄tSåu˘
;

1066 *
	mch¨s
;

1067 
	mnch¨s
;

1068 
	mdñè
;

1069 
F⁄t
 
	mf⁄t
;

1070 } 
	tXTextIãm
;

1073 
	mbyã1
;

1074 
	mbyã2
;

1075 } 
	tXCh¨2b
;

1078 
XCh¨2b
 *
	mch¨s
;

1079 
	mnch¨s
;

1080 
	mdñè
;

1081 
F⁄t
 
	mf⁄t
;

1082 } 
	tXTextIãm16
;

1085 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1086 
GC
 
	mgc
;

1087 
VisuÆ
 *
	mvisuÆ
;

1088 
S¸ìn
 *
	ms¸ìn
;

1089 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1090 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1093 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1094 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1095 } 
	tXF⁄tSëExã¡s
;

1101 
_XOM
 *
	tXOM
;

1102 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1105 *
	mch¨s
;

1106 
	mnch¨s
;

1107 
	mdñè
;

1108 
XF⁄tSë
 
	mf⁄t_£t
;

1109 } 
	tXmbTextIãm
;

1112 
wch¨_t
 *
	mch¨s
;

1113 
	mnch¨s
;

1114 
	mdñè
;

1115 
XF⁄tSë
 
	mf⁄t_£t
;

1116 } 
	tXwcTextIãm
;

1118 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1119 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1120 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1121 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1122 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1123 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1124 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1125 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1126 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1127 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1130 
	mch¨£t_cou¡
;

1131 **
	mch¨£t_li°
;

1132 } 
	tXOMCh¨SëLi°
;

1135 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1136 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1137 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1138 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1139 
	mXOMOrõ¡©i⁄_C⁄ãxt


1140 } 
	tXOrõ¡©i⁄
;

1143 
	mnum_‹õ¡©i⁄
;

1144 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1145 } 
	tXOMOrõ¡©i⁄
;

1148 
	mnum_f⁄t
;

1149 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1150 **
	mf⁄t_«me_li°
;

1151 } 
	tXOMF⁄tInfo
;

1153 
_XIM
 *
	tXIM
;

1154 
_XIC
 *
	tXIC
;

1156 (*
	tXIMProc
)(

1157 
	tXIM
,

1158 
	tXPoöãr
,

1159 
	tXPoöãr


1162 
	$Boﬁ
 (*
	tXICProc
)(

1163 
	tXIC
,

1164 
	tXPoöãr
,

1165 
	tXPoöãr


1168 (*
	tXIDProc
)(

1169 
	tDi•œy
*,

1170 
	tXPoöãr
,

1171 
	tXPoöãr


1174 
	tXIMStyÀ
;

1177 
cou¡_°yÀs
;

1178 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1179 } 
	tXIMStyÀs
;

1181 
	#XIMPªedôAªa
 0x0001L

	)

1182 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1183 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1184 
	#XIMPªedôNŸhög
 0x0008L

	)

1185 
	#XIMPªedôN⁄e
 0x0010L

	)

1186 
	#XIMSètusAªa
 0x0100L

	)

1187 
	#XIMSètusCÆlbacks
 0x0200L

	)

1188 
	#XIMSètusNŸhög
 0x0400L

	)

1189 
	#XIMSètusN⁄e
 0x0800L

	)

1191 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1192 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1193 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1194 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1195 
	#XNFocusWödow
 "focusWödow"

	)

1196 
	#XNResour˚Name
 "ªsour˚Name"

	)

1197 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1198 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1199 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1200 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1201 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1202 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1203 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1204 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1205 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1206 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1207 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1208 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1209 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1210 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1211 
	#XNAªa
 "¨ó"

	)

1212 
	#XNAªaNìded
 "¨óNìded"

	)

1213 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1214 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1215 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1216 
	#XNF‹eground
 "f‹eground"

	)

1217 
	#XNBackground
 "background"

	)

1218 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1219 
	#XNF⁄tSë
 "f⁄tSë"

	)

1220 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1221 
	#XNCurs‹
 "curs‹"

	)

1223 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1224 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1225 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1226 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1227 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1228 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1229 
	#XNRe£tSèã
 "ª£tSèã"

	)

1230 
	#XNHŸKey
 "hŸKey"

	)

1231 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1232 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1233 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1235 
	#XBuf„rOvîÊow
 -1

	)

1236 
	#XLookupN⁄e
 1

	)

1237 
	#XLookupCh¨s
 2

	)

1238 
	#XLookupKeySym
 3

	)

1239 
	#XLookupBŸh
 4

	)

1241 *
	tXVaNe°edLi°
;

1244 
XPoöãr
 
˛õ¡_d©a
;

1245 
XIMProc
 
ˇŒback
;

1246 } 
	tXIMCÆlback
;

1249 
XPoöãr
 
˛õ¡_d©a
;

1250 
XICProc
 
ˇŒback
;

1251 } 
	tXICCÆlback
;

1253 
	tXIMFìdback
;

1255 
	#XIMRevî£
 1L

	)

1256 
	#XIMUndîlöe
 (1L<<1)

	)

1257 
	#XIMHighlight
 (1L<<2)

	)

1258 
	#XIMPrim¨y
 (1L<<5)

	)

1259 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1260 
	#XIMTîtüry
 (1L<<7)

	)

1261 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1262 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1263 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1265 
	s_XIMText
 {

1266 
Àngth
;

1267 
XIMFìdback
 *
„edback
;

1268 
Boﬁ
 
ícodög_is_wch¨
;

1270 *
mu…i_byã
;

1271 
wch¨_t
 *
wide_ch¨
;

1272 } 
°rög
;

1273 } 
	tXIMText
;

1275 
	tXIMPªedôSèã
;

1277 
	#XIMPªedôUnKnown
 0L

	)

1278 
	#XIMPªedôE«bÀ
 1L

	)

1279 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1281 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1282 
XIMPªedôSèã
 
°©e
;

1283 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1285 
	tXIMRe£tSèã
;

1287 
	#XIMInôülSèã
 1L

	)

1288 
	#XIMPª£rveSèã
 (1L<<1)

	)

1290 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1292 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1293 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1294 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1295 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1296 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1297 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1299 
	s_XIMSåögC⁄vîsi⁄Text
 {

1300 
Àngth
;

1301 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1302 
Boﬁ
 
ícodög_is_wch¨
;

1304 *
mbs
;

1305 
wch¨_t
 *
wcs
;

1306 } 
°rög
;

1307 } 
	tXIMSåögC⁄vîsi⁄Text
;

1309 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1311 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1313 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1314 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1315 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1316 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1318 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1320 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1321 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1324 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1325 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1326 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1327 
XIMNextLöe
, 
XIMPªviousLöe
,

1328 
XIMLöeSèπ
, 
XIMLöeEnd
,

1329 
XIMAbsﬁuãPosôi⁄
,

1330 
XIMD⁄tCh™ge


1331 } 
	tXIMC¨ëDúe˘i⁄
;

1333 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1334 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1335 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1336 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1337 
Á˘‹
;

1338 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1339 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1341 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1342 
ˇªt
;

1343 
chg_fú°
;

1344 
chg_Àngth
;

1345 
XIMText
 *
ãxt
;

1346 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1349 
XIMIsInvisibÀ
,

1350 
XIMIsPrim¨y
,

1351 
XIMIsSec⁄d¨y


1352 } 
	tXIMC¨ëStyÀ
;

1354 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1355 
posôi⁄
;

1356 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1357 
XIMC¨ëStyÀ
 
°yÀ
;

1358 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1361 
XIMTextTy≥
,

1362 
XIMBôm≠Ty≥


1363 } 
	tXIMSètusD©aTy≥
;

1365 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1366 
XIMSètusD©aTy≥
 
ty≥
;

1368 
XIMText
 *
ãxt
;

1369 
Pixm≠
 
bôm≠
;

1370 } 
d©a
;

1371 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1373 
	s_XIMHŸKeyTriggî
 {

1374 
KeySym
 
keysym
;

1375 
modifõr
;

1376 
modifõr_mask
;

1377 } 
	tXIMHŸKeyTriggî
;

1379 
	s_XIMHŸKeyTriggîs
 {

1380 
num_hŸ_key
;

1381 
XIMHŸKeyTriggî
 *
key
;

1382 } 
	tXIMHŸKeyTriggîs
;

1384 
	tXIMHŸKeySèã
;

1386 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1387 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1390 
cou¡_vÆues
;

1391 **
suµ‹ãd_vÆues
;

1392 } 
	tXIMVÆuesLi°
;

1394 
_XFUNCPROTOBEGIN


1396 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1397 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1400 
_Xdebug
;

1402 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1403 
Di•œy
* ,

1404 
_Xc⁄°
 *

1407 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1408 
Di•œy
* ,

1409 
XID


1413 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1414 
Di•œy
* ,

1415 
Wödow
 ,

1416 
Time
 ,

1417 
Time
 ,

1421 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1422 
XModifõrKeym≠
* ,

1423 #i‡
NìdWidePrŸŸy≥s


1426 
KeyCode
 ,

1431 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1432 
Di•œy
*

1435 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1436 
XModifõrKeym≠
* ,

1437 #i‡
NìdWidePrŸŸy≥s


1440 
KeyCode
 ,

1445 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1449 
XImage
 *
	`XCª©eImage
(

1450 
Di•œy
* ,

1451 
VisuÆ
* ,

1461 
Sètus
 
	`XInôImage
(

1462 
XImage
*

1464 
XImage
 *
	`XGëImage
(

1465 
Di•œy
* ,

1466 
DøwabÀ
 ,

1474 
XImage
 *
	`XGëSubImage
(

1475 
Di•œy
* ,

1476 
DøwabÀ
 ,

1483 
XImage
* ,

1491 
Di•œy
 *
	`XO≥nDi•œy
(

1492 
_Xc⁄°
 *

1495 
	`XrmInôülize
(

1499 *
	`XFëchByãs
(

1500 
Di•œy
* ,

1503 *
	`XFëchBuf„r
(

1504 
Di•œy
* ,

1508 *
	`XGëAtomName
(

1509 
Di•œy
* ,

1510 
Atom


1512 
Sètus
 
	`XGëAtomNames
(

1513 
Di•œy
* ,

1514 
Atom
* ,

1518 *
	`XGëDeÁu…
(

1519 
Di•œy
* ,

1520 
_Xc⁄°
 * ,

1521 
_Xc⁄°
 *

1523 *
	`XDi•œyName
(

1524 
_Xc⁄°
 *

1526 *
	`XKeysymToSåög
(

1527 
KeySym


1530 (*
	$XSynchr⁄ize
(

1531 
Di•œy
* ,

1532 
Boﬁ


1534 
Di•œy
*

1536 (*
	`XSëA·îFun˘i⁄
(

1537 
Di•œy
* ,

1539 
Di•œy
*

1542 
Di•œy
*

1544 
Atom
 
	`XI¡înAtom
(

1545 
Di•œy
* ,

1546 
_Xc⁄°
 * ,

1547 
Boﬁ


1549 
Sètus
 
	`XI¡înAtoms
(

1550 
Di•œy
* ,

1553 
Boﬁ
 ,

1554 
Atom
*

1556 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1557 
Di•œy
* ,

1558 
Cﬁ‹m≠


1560 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1561 
Di•œy
* ,

1562 
Wödow
 ,

1563 
VisuÆ
* ,

1566 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1567 
Di•œy
* ,

1568 
Pixm≠
 ,

1569 
Pixm≠
 ,

1570 
XCﬁ‹
* ,

1571 
XCﬁ‹
* ,

1575 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1576 
Di•œy
* ,

1577 
F⁄t
 ,

1578 
F⁄t
 ,

1581 
XCﬁ‹
 
_Xc⁄°
 * ,

1582 
XCﬁ‹
 
_Xc⁄°
 *

1584 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1585 
Di•œy
* ,

1588 
F⁄t
 
	`XLﬂdF⁄t
(

1589 
Di•œy
* ,

1590 
_Xc⁄°
 *

1592 
GC
 
	`XCª©eGC
(

1593 
Di•œy
* ,

1594 
DøwabÀ
 ,

1596 
XGCVÆues
*

1598 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1599 
GC


1601 
	`XFlushGC
(

1602 
Di•œy
* ,

1603 
GC


1605 
Pixm≠
 
	`XCª©ePixm≠
(

1606 
Di•œy
* ,

1607 
DøwabÀ
 ,

1612 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1613 
Di•œy
* ,

1614 
DøwabÀ
 ,

1615 
_Xc⁄°
 * ,

1619 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1620 
Di•œy
* ,

1621 
DøwabÀ
 ,

1629 
Wödow
 
	`XCª©eSim∂eWödow
(

1630 
Di•œy
* ,

1631 
Wödow
 ,

1640 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1641 
Di•œy
* ,

1642 
Atom


1644 
Wödow
 
	`XCª©eWödow
(

1645 
Di•œy
* ,

1646 
Wödow
 ,

1654 
VisuÆ
* ,

1656 
XSëWödowAâribuãs
*

1658 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1659 
Di•œy
* ,

1660 
Wödow
 ,

1663 **
	`XLi°F⁄ts
(

1664 
Di•œy
* ,

1665 
_Xc⁄°
 * ,

1669 **
	`XLi°F⁄tsWôhInfo
(

1670 
Di•œy
* ,

1671 
_Xc⁄°
 * ,

1674 
XF⁄tSåu˘
**

1676 **
	`XGëF⁄tP©h
(

1677 
Di•œy
* ,

1680 **
	`XLi°Exãnsi⁄s
(

1681 
Di•œy
* ,

1684 
Atom
 *
	`XLi°Pr›îtõs
(

1685 
Di•œy
* ,

1686 
Wödow
 ,

1689 
XHo°Addªss
 *
	`XLi°Ho°s
(

1690 
Di•œy
* ,

1692 
Boﬁ
*

1694 
_X_DEPRECATED


1695 
KeySym
 
	`XKeycodeToKeysym
(

1696 
Di•œy
* ,

1697 #i‡
NìdWidePrŸŸy≥s


1700 
KeyCode
 ,

1704 
KeySym
 
	`XLookupKeysym
(

1705 
XKeyEvít
* ,

1708 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1709 
Di•œy
* ,

1710 #i‡
NìdWidePrŸŸy≥s


1713 
KeyCode
 ,

1718 
KeySym
 
	`XSåögToKeysym
(

1719 
_Xc⁄°
 *

1721 
	`XMaxReque°Size
(

1722 
Di•œy
*

1724 
	`XExãndedMaxReque°Size
(

1725 
Di•œy
*

1727 *
	`XResour˚M™agîSåög
(

1728 
Di•œy
*

1730 *
	`XS¸ìnResour˚Såög
(

1731 
S¸ìn
*

1733 
	`XDi•œyMŸi⁄Buf„rSize
(

1734 
Di•œy
*

1736 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1737 
VisuÆ
*

1742 
Sètus
 
	`XInôThªads
(

1746 
	`XLockDi•œy
(

1747 
Di•œy
*

1750 
	`XU∆ockDi•œy
(

1751 
Di•œy
*

1756 
XExtCodes
 *
	`XInôExãnsi⁄
(

1757 
Di•œy
* ,

1758 
_Xc⁄°
 *

1761 
XExtCodes
 *
	`XAddExãnsi⁄
(

1762 
Di•œy
*

1764 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1765 
XExtD©a
** ,

1768 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1769 
XED©aObje˘


1773 
Wödow
 
	`XRoŸWödow
(

1774 
Di•œy
* ,

1777 
Wödow
 
	`XDeÁu…RoŸWödow
(

1778 
Di•œy
*

1780 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1781 
S¸ìn
*

1783 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1784 
Di•œy
* ,

1787 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1788 
S¸ìn
*

1790 
GC
 
	`XDeÁu…GC
(

1791 
Di•œy
* ,

1794 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1795 
S¸ìn
*

1797 
	`XBœckPixñ
(

1798 
Di•œy
* ,

1801 
	`XWhôePixñ
(

1802 
Di•œy
* ,

1805 
	`XAŒPœ√s
(

1808 
	`XBœckPixñOfS¸ìn
(

1809 
S¸ìn
*

1811 
	`XWhôePixñOfS¸ìn
(

1812 
S¸ìn
*

1814 
	`XNextReque°
(

1815 
Di•œy
*

1817 
	`XLa°KnownReque°Pro˚s£d
(

1818 
Di•œy
*

1820 *
	`XSîvîVíd‹
(

1821 
Di•œy
*

1823 *
	`XDi•œySåög
(

1824 
Di•œy
*

1826 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1827 
Di•œy
* ,

1830 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1831 
S¸ìn
*

1833 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1834 
S¸ìn
*

1836 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1837 
Di•œy
* ,

1840 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1841 
Di•œy
*

1843 
	`XEvítMaskOfS¸ìn
(

1844 
S¸ìn
*

1847 
	`XS¸ìnNumbîOfS¸ìn
(

1848 
S¸ìn
*

1851 (*
	tXEº‹H™dÀr
) (

1852 
	tDi•œy
* ,

1853 
	tXEº‹Evít
*

1856 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1857 
XEº‹H™dÀr


1861 (*
	tXIOEº‹H™dÀr
) (

1862 
	tDi•œy
*

1865 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1866 
XIOEº‹H™dÀr


1870 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1871 
Di•œy
* ,

1874 *
	`XLi°Dïths
(

1875 
Di•œy
* ,

1882 
Sètus
 
	`XRec⁄figuªWMWödow
(

1883 
Di•œy
* ,

1884 
Wödow
 ,

1887 
XWödowCh™ges
*

1890 
Sètus
 
	`XGëWMPrŸocﬁs
(

1891 
Di•œy
* ,

1892 
Wödow
 ,

1893 
Atom
** ,

1896 
Sètus
 
	`XSëWMPrŸocﬁs
(

1897 
Di•œy
* ,

1898 
Wödow
 ,

1899 
Atom
* ,

1902 
Sètus
 
	`XIc⁄ifyWödow
(

1903 
Di•œy
* ,

1904 
Wödow
 ,

1907 
Sètus
 
	`XWôhdøwWödow
(

1908 
Di•œy
* ,

1909 
Wödow
 ,

1912 
Sètus
 
	`XGëComm™d
(

1913 
Di•œy
* ,

1914 
Wödow
 ,

1918 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1919 
Di•œy
* ,

1920 
Wödow
 ,

1921 
Wödow
** ,

1924 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1925 
Di•œy
* ,

1926 
Wödow
 ,

1927 
Wödow
* ,

1930 
	`XFªeSåögLi°
(

1933 
	`XSëTønsõ¡F‹Höt
(

1934 
Di•œy
* ,

1935 
Wödow
 ,

1936 
Wödow


1941 
	`XA˘iv©eS¸ìnSavî
(

1942 
Di•œy
*

1945 
	`XAddHo°
(

1946 
Di•œy
* ,

1947 
XHo°Addªss
*

1950 
	`XAddHo°s
(

1951 
Di•œy
* ,

1952 
XHo°Addªss
* ,

1956 
	`XAddToExãnsi⁄Li°
(

1957 
_XExtD©a
** ,

1958 
XExtD©a
*

1961 
	`XAddToSaveSë
(

1962 
Di•œy
* ,

1963 
Wödow


1966 
Sètus
 
	`XAŒocCﬁ‹
(

1967 
Di•œy
* ,

1968 
Cﬁ‹m≠
 ,

1969 
XCﬁ‹
*

1972 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1973 
Di•œy
* ,

1974 
Cﬁ‹m≠
 ,

1975 
Boﬁ
 ,

1982 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1983 
Di•œy
* ,

1984 
Cﬁ‹m≠
 ,

1985 
Boﬁ
 ,

1996 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1997 
Di•œy
* ,

1998 
Cﬁ‹m≠
 ,

1999 
_Xc⁄°
 * ,

2000 
XCﬁ‹
* ,

2001 
XCﬁ‹
*

2004 
	`XAŒowEvíts
(

2005 
Di•œy
* ,

2007 
Time


2010 
	`XAutoRïótOff
(

2011 
Di•œy
*

2014 
	`XAutoRïótOn
(

2015 
Di•œy
*

2018 
	`XBñl
(

2019 
Di•œy
* ,

2023 
	`XBôm≠BôOrdî
(

2024 
Di•œy
*

2027 
	`XBôm≠Pad
(

2028 
Di•œy
*

2031 
	`XBôm≠Unô
(

2032 
Di•œy
*

2035 
	`XCñlsOfS¸ìn
(

2036 
S¸ìn
*

2039 
	`XCh™geA˘ivePoöãrGøb
(

2040 
Di•œy
* ,

2042 
Curs‹
 ,

2043 
Time


2046 
	`XCh™geGC
(

2047 
Di•œy
* ,

2048 
GC
 ,

2050 
XGCVÆues
*

2053 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2054 
Di•œy
* ,

2056 
XKeybﬂrdC⁄åﬁ
*

2059 
	`XCh™geKeybﬂrdM≠pög
(

2060 
Di•œy
* ,

2063 
KeySym
* ,

2067 
	`XCh™gePoöãrC⁄åﬁ
(

2068 
Di•œy
* ,

2069 
Boﬁ
 ,

2070 
Boﬁ
 ,

2076 
	`XCh™gePr›îty
(

2077 
Di•œy
* ,

2078 
Wödow
 ,

2079 
Atom
 ,

2080 
Atom
 ,

2083 
_Xc⁄°
 * ,

2087 
	`XCh™geSaveSë
(

2088 
Di•œy
* ,

2089 
Wödow
 ,

2093 
	`XCh™geWödowAâribuãs
(

2094 
Di•œy
* ,

2095 
Wödow
 ,

2097 
XSëWödowAâribuãs
*

2100 
Boﬁ
 
	`XCheckIfEvít
(

2101 
Di•œy
* ,

2102 
XEvít
* ,

2103 
	$Boﬁ
 (*) (

2104 
Di•œy
* ,

2105 
XEvít
* ,

2106 
XPoöãr


2108 
XPoöãr


2111 
Boﬁ
 
	`XCheckMaskEvít
(

2112 
Di•œy
* ,

2114 
XEvít
*

2117 
Boﬁ
 
	`XCheckTy≥dEvít
(

2118 
Di•œy
* ,

2120 
XEvít
*

2123 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2124 
Di•œy
* ,

2125 
Wödow
 ,

2127 
XEvít
*

2130 
Boﬁ
 
	`XCheckWödowEvít
(

2131 
Di•œy
* ,

2132 
Wödow
 ,

2134 
XEvít
*

2137 
	`XCúcuœãSubwödows
(

2138 
Di•œy
* ,

2139 
Wödow
 ,

2143 
	`XCúcuœãSubwödowsDown
(

2144 
Di•œy
* ,

2145 
Wödow


2148 
	`XCúcuœãSubwödowsUp
(

2149 
Di•œy
* ,

2150 
Wödow


2153 
	`XCÀ¨Aªa
(

2154 
Di•œy
* ,

2155 
Wödow
 ,

2160 
Boﬁ


2163 
	`XCÀ¨Wödow
(

2164 
Di•œy
* ,

2165 
Wödow


2168 
	`XClo£Di•œy
(

2169 
Di•œy
*

2172 
	`XC⁄figuªWödow
(

2173 
Di•œy
* ,

2174 
Wödow
 ,

2176 
XWödowCh™ges
*

2179 
	`XC⁄√˘i⁄Numbî
(

2180 
Di•œy
*

2183 
	`XC⁄vîtSñe˘i⁄
(

2184 
Di•œy
* ,

2185 
Atom
 ,

2186 
Atom
 ,

2187 
Atom
 ,

2188 
Wödow
 ,

2189 
Time


2192 
	`XC›yAªa
(

2193 
Di•œy
* ,

2194 
DøwabÀ
 ,

2195 
DøwabÀ
 ,

2196 
GC
 ,

2205 
	`XC›yGC
(

2206 
Di•œy
* ,

2207 
GC
 ,

2209 
GC


2212 
	`XC›yPœ√
(

2213 
Di•œy
* ,

2214 
DøwabÀ
 ,

2215 
DøwabÀ
 ,

2216 
GC
 ,

2226 
	`XDeÁu…Dïth
(

2227 
Di•œy
* ,

2231 
	`XDeÁu…DïthOfS¸ìn
(

2232 
S¸ìn
*

2235 
	`XDeÁu…S¸ìn
(

2236 
Di•œy
*

2239 
	`XDeföeCurs‹
(

2240 
Di•œy
* ,

2241 
Wödow
 ,

2242 
Curs‹


2245 
	`XDñëePr›îty
(

2246 
Di•œy
* ,

2247 
Wödow
 ,

2248 
Atom


2251 
	`XDe°royWödow
(

2252 
Di•œy
* ,

2253 
Wödow


2256 
	`XDe°roySubwödows
(

2257 
Di•œy
* ,

2258 
Wödow


2261 
	`XD€sBackögSt‹e
(

2262 
S¸ìn
*

2265 
Boﬁ
 
	`XD€sSaveUndîs
(

2266 
S¸ìn
*

2269 
	`XDißbÀAc˚ssC⁄åﬁ
(

2270 
Di•œy
*

2274 
	`XDi•œyCñls
(

2275 
Di•œy
* ,

2279 
	`XDi•œyHeight
(

2280 
Di•œy
* ,

2284 
	`XDi•œyHeightMM
(

2285 
Di•œy
* ,

2289 
	`XDi•œyKeycodes
(

2290 
Di•œy
* ,

2295 
	`XDi•œyPœ√s
(

2296 
Di•œy
* ,

2300 
	`XDi•œyWidth
(

2301 
Di•œy
* ,

2305 
	`XDi•œyWidthMM
(

2306 
Di•œy
* ,

2310 
	`XDøwArc
(

2311 
Di•œy
* ,

2312 
DøwabÀ
 ,

2313 
GC
 ,

2322 
	`XDøwArcs
(

2323 
Di•œy
* ,

2324 
DøwabÀ
 ,

2325 
GC
 ,

2326 
XArc
* ,

2330 
	`XDøwImageSåög
(

2331 
Di•œy
* ,

2332 
DøwabÀ
 ,

2333 
GC
 ,

2336 
_Xc⁄°
 * ,

2340 
	`XDøwImageSåög16
(

2341 
Di•œy
* ,

2342 
DøwabÀ
 ,

2343 
GC
 ,

2346 
_Xc⁄°
 
XCh¨2b
* ,

2350 
	`XDøwLöe
(

2351 
Di•œy
* ,

2352 
DøwabÀ
 ,

2353 
GC
 ,

2360 
	`XDøwLöes
(

2361 
Di•œy
* ,

2362 
DøwabÀ
 ,

2363 
GC
 ,

2364 
XPoöt
* ,

2369 
	`XDøwPoöt
(

2370 
Di•œy
* ,

2371 
DøwabÀ
 ,

2372 
GC
 ,

2377 
	`XDøwPoöts
(

2378 
Di•œy
* ,

2379 
DøwabÀ
 ,

2380 
GC
 ,

2381 
XPoöt
* ,

2386 
	`XDøwRe˘™gÀ
(

2387 
Di•œy
* ,

2388 
DøwabÀ
 ,

2389 
GC
 ,

2396 
	`XDøwRe˘™gÀs
(

2397 
Di•œy
* ,

2398 
DøwabÀ
 ,

2399 
GC
 ,

2400 
XRe˘™gÀ
* ,

2404 
	`XDøwSegmíts
(

2405 
Di•œy
* ,

2406 
DøwabÀ
 ,

2407 
GC
 ,

2408 
XSegmít
* ,

2412 
	`XDøwSåög
(

2413 
Di•œy
* ,

2414 
DøwabÀ
 ,

2415 
GC
 ,

2418 
_Xc⁄°
 * ,

2422 
	`XDøwSåög16
(

2423 
Di•œy
* ,

2424 
DøwabÀ
 ,

2425 
GC
 ,

2428 
_Xc⁄°
 
XCh¨2b
* ,

2432 
	`XDøwText
(

2433 
Di•œy
* ,

2434 
DøwabÀ
 ,

2435 
GC
 ,

2438 
XTextIãm
* ,

2442 
	`XDøwText16
(

2443 
Di•œy
* ,

2444 
DøwabÀ
 ,

2445 
GC
 ,

2448 
XTextIãm16
* ,

2452 
	`XE«bÀAc˚ssC⁄åﬁ
(

2453 
Di•œy
*

2456 
	`XEvítsQueued
(

2457 
Di•œy
* ,

2461 
Sètus
 
	`XFëchName
(

2462 
Di•œy
* ,

2463 
Wödow
 ,

2467 
	`XFûlArc
(

2468 
Di•œy
* ,

2469 
DøwabÀ
 ,

2470 
GC
 ,

2479 
	`XFûlArcs
(

2480 
Di•œy
* ,

2481 
DøwabÀ
 ,

2482 
GC
 ,

2483 
XArc
* ,

2487 
	`XFûlPﬁyg⁄
(

2488 
Di•œy
* ,

2489 
DøwabÀ
 ,

2490 
GC
 ,

2491 
XPoöt
* ,

2497 
	`XFûlRe˘™gÀ
(

2498 
Di•œy
* ,

2499 
DøwabÀ
 ,

2500 
GC
 ,

2507 
	`XFûlRe˘™gÀs
(

2508 
Di•œy
* ,

2509 
DøwabÀ
 ,

2510 
GC
 ,

2511 
XRe˘™gÀ
* ,

2515 
	`XFlush
(

2516 
Di•œy
*

2519 
	`XF‹˚S¸ìnSavî
(

2520 
Di•œy
* ,

2524 
	`XFªe
(

2528 
	`XFªeCﬁ‹m≠
(

2529 
Di•œy
* ,

2530 
Cﬁ‹m≠


2533 
	`XFªeCﬁ‹s
(

2534 
Di•œy
* ,

2535 
Cﬁ‹m≠
 ,

2541 
	`XFªeCurs‹
(

2542 
Di•œy
* ,

2543 
Curs‹


2546 
	`XFªeExãnsi⁄Li°
(

2550 
	`XFªeF⁄t
(

2551 
Di•œy
* ,

2552 
XF⁄tSåu˘
*

2555 
	`XFªeF⁄tInfo
(

2557 
XF⁄tSåu˘
* ,

2561 
	`XFªeF⁄tNames
(

2565 
	`XFªeF⁄tP©h
(

2569 
	`XFªeGC
(

2570 
Di•œy
* ,

2571 
GC


2574 
	`XFªeModifõrm≠
(

2575 
XModifõrKeym≠
*

2578 
	`XFªePixm≠
(

2579 
Di•œy
* ,

2580 
Pixm≠


2583 
	`XGeomëry
(

2584 
Di•œy
* ,

2586 
_Xc⁄°
 * ,

2587 
_Xc⁄°
 * ,

2599 
	`XGëEº‹D©aba£Text
(

2600 
Di•œy
* ,

2601 
_Xc⁄°
 * ,

2602 
_Xc⁄°
 * ,

2603 
_Xc⁄°
 * ,

2608 
	`XGëEº‹Text
(

2609 
Di•œy
* ,

2615 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2616 
XF⁄tSåu˘
* ,

2617 
Atom
 ,

2621 
Sètus
 
	`XGëGCVÆues
(

2622 
Di•œy
* ,

2623 
GC
 ,

2625 
XGCVÆues
*

2628 
Sètus
 
	`XGëGeomëry
(

2629 
Di•œy
* ,

2630 
DøwabÀ
 ,

2631 
Wödow
* ,

2640 
Sètus
 
	`XGëIc⁄Name
(

2641 
Di•œy
* ,

2642 
Wödow
 ,

2646 
	`XGëI≈utFocus
(

2647 
Di•œy
* ,

2648 
Wödow
* ,

2652 
	`XGëKeybﬂrdC⁄åﬁ
(

2653 
Di•œy
* ,

2654 
XKeybﬂrdSèã
*

2657 
	`XGëPoöãrC⁄åﬁ
(

2658 
Di•œy
* ,

2664 
	`XGëPoöãrM≠pög
(

2665 
Di•œy
* ,

2670 
	`XGëS¸ìnSavî
(

2671 
Di•œy
* ,

2678 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2679 
Di•œy
* ,

2680 
Wödow
 ,

2681 
Wödow
*

2684 
	`XGëWödowPr›îty
(

2685 
Di•œy
* ,

2686 
Wödow
 ,

2687 
Atom
 ,

2690 
Boﬁ
 ,

2691 
Atom
 ,

2692 
Atom
* ,

2699 
Sètus
 
	`XGëWödowAâribuãs
(

2700 
Di•œy
* ,

2701 
Wödow
 ,

2702 
XWödowAâribuãs
*

2705 
	`XGøbBuâ⁄
(

2706 
Di•œy
* ,

2709 
Wödow
 ,

2710 
Boﬁ
 ,

2714 
Wödow
 ,

2715 
Curs‹


2718 
	`XGøbKey
(

2719 
Di•œy
* ,

2722 
Wödow
 ,

2723 
Boﬁ
 ,

2728 
	`XGøbKeybﬂrd
(

2729 
Di•œy
* ,

2730 
Wödow
 ,

2731 
Boﬁ
 ,

2734 
Time


2737 
	`XGøbPoöãr
(

2738 
Di•œy
* ,

2739 
Wödow
 ,

2740 
Boﬁ
 ,

2744 
Wödow
 ,

2745 
Curs‹
 ,

2746 
Time


2749 
	`XGøbSîvî
(

2750 
Di•œy
*

2753 
	`XHeightMMOfS¸ìn
(

2754 
S¸ìn
*

2757 
	`XHeightOfS¸ìn
(

2758 
S¸ìn
*

2761 
	`XIfEvít
(

2762 
Di•œy
* ,

2763 
XEvít
* ,

2764 
	$Boﬁ
 (*) (

2765 
Di•œy
* ,

2766 
XEvít
* ,

2767 
XPoöãr


2769 
XPoöãr


2772 
	`XImageByãOrdî
(

2773 
Di•œy
*

2776 
	`XIn°ÆlCﬁ‹m≠
(

2777 
Di•œy
* ,

2778 
Cﬁ‹m≠


2781 
KeyCode
 
	`XKeysymToKeycode
(

2782 
Di•œy
* ,

2783 
KeySym


2786 
	`XKûlClõ¡
(

2787 
Di•œy
* ,

2788 
XID


2791 
Sètus
 
	`XLookupCﬁ‹
(

2792 
Di•œy
* ,

2793 
Cﬁ‹m≠
 ,

2794 
_Xc⁄°
 * ,

2795 
XCﬁ‹
* ,

2796 
XCﬁ‹
*

2799 
	`XLowîWödow
(

2800 
Di•œy
* ,

2801 
Wödow


2804 
	`XM≠Rai£d
(

2805 
Di•œy
* ,

2806 
Wödow


2809 
	`XM≠Subwödows
(

2810 
Di•œy
* ,

2811 
Wödow


2814 
	`XM≠Wödow
(

2815 
Di•œy
* ,

2816 
Wödow


2819 
	`XMaskEvít
(

2820 
Di•œy
* ,

2822 
XEvít
*

2825 
	`XMaxCm≠sOfS¸ìn
(

2826 
S¸ìn
*

2829 
	`XMöCm≠sOfS¸ìn
(

2830 
S¸ìn
*

2833 
	`XMoveResizeWödow
(

2834 
Di•œy
* ,

2835 
Wödow
 ,

2842 
	`XMoveWödow
(

2843 
Di•œy
* ,

2844 
Wödow
 ,

2849 
	`XNextEvít
(

2850 
Di•œy
* ,

2851 
XEvít
*

2854 
	`XNoOp
(

2855 
Di•œy
*

2858 
Sètus
 
	`XP¨£Cﬁ‹
(

2859 
Di•œy
* ,

2860 
Cﬁ‹m≠
 ,

2861 
_Xc⁄°
 * ,

2862 
XCﬁ‹
*

2865 
	`XP¨£Geomëry
(

2866 
_Xc⁄°
 * ,

2873 
	`XPìkEvít
(

2874 
Di•œy
* ,

2875 
XEvít
*

2878 
	`XPìkIfEvít
(

2879 
Di•œy
* ,

2880 
XEvít
* ,

2881 
	$Boﬁ
 (*) (

2882 
Di•œy
* ,

2883 
XEvít
* ,

2884 
XPoöãr


2886 
XPoöãr


2889 
	`XPídög
(

2890 
Di•œy
*

2893 
	`XPœ√sOfS¸ìn
(

2894 
S¸ìn
*

2897 
	`XPrŸocﬁRevisi⁄
(

2898 
Di•œy
*

2901 
	`XPrŸocﬁVîsi⁄
(

2902 
Di•œy
*

2906 
	`XPutBackEvít
(

2907 
Di•œy
* ,

2908 
XEvít
*

2911 
	`XPutImage
(

2912 
Di•œy
* ,

2913 
DøwabÀ
 ,

2914 
GC
 ,

2915 
XImage
* ,

2924 
	`XQLígth
(

2925 
Di•œy
*

2928 
Sètus
 
	`XQuîyBe°Curs‹
(

2929 
Di•œy
* ,

2930 
DøwabÀ
 ,

2937 
Sètus
 
	`XQuîyBe°Size
(

2938 
Di•œy
* ,

2940 
DøwabÀ
 ,

2947 
Sètus
 
	`XQuîyBe°Stù∂e
(

2948 
Di•œy
* ,

2949 
DøwabÀ
 ,

2956 
Sètus
 
	`XQuîyBe°Tûe
(

2957 
Di•œy
* ,

2958 
DøwabÀ
 ,

2965 
	`XQuîyCﬁ‹
(

2966 
Di•œy
* ,

2967 
Cﬁ‹m≠
 ,

2968 
XCﬁ‹
*

2971 
	`XQuîyCﬁ‹s
(

2972 
Di•œy
* ,

2973 
Cﬁ‹m≠
 ,

2974 
XCﬁ‹
* ,

2978 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2979 
Di•œy
* ,

2980 
_Xc⁄°
 * ,

2986 
	`XQuîyKeym≠
(

2987 
Di•œy
* ,

2991 
Boﬁ
 
	`XQuîyPoöãr
(

2992 
Di•œy
* ,

2993 
Wödow
 ,

2994 
Wödow
* ,

2995 
Wödow
* ,

3003 
	`XQuîyTextExã¡s
(

3004 
Di•œy
* ,

3005 
XID
 ,

3006 
_Xc⁄°
 * ,

3011 
XCh¨Såu˘
*

3014 
	`XQuîyTextExã¡s16
(

3015 
Di•œy
* ,

3016 
XID
 ,

3017 
_Xc⁄°
 
XCh¨2b
* ,

3022 
XCh¨Såu˘
*

3025 
Sètus
 
	`XQuîyTªe
(

3026 
Di•œy
* ,

3027 
Wödow
 ,

3028 
Wödow
* ,

3029 
Wödow
* ,

3030 
Wödow
** ,

3034 
	`XRai£Wödow
(

3035 
Di•œy
* ,

3036 
Wödow


3039 
	`XRódBôm≠Fûe
(

3040 
Di•œy
* ,

3041 
DøwabÀ
 ,

3042 
_Xc⁄°
 * ,

3045 
Pixm≠
* ,

3050 
	`XRódBôm≠FûeD©a
(

3051 
_Xc⁄°
 * ,

3059 
	`XRebödKeysym
(

3060 
Di•œy
* ,

3061 
KeySym
 ,

3062 
KeySym
* ,

3064 
_Xc⁄°
 * ,

3068 
	`XRecﬁ‹Curs‹
(

3069 
Di•œy
* ,

3070 
Curs‹
 ,

3071 
XCﬁ‹
* ,

3072 
XCﬁ‹
*

3075 
	`XRe‰eshKeybﬂrdM≠pög
(

3076 
XM≠pögEvít
*

3079 
	`XRemoveFromSaveSë
(

3080 
Di•œy
* ,

3081 
Wödow


3084 
	`XRemoveHo°
(

3085 
Di•œy
* ,

3086 
XHo°Addªss
*

3089 
	`XRemoveHo°s
(

3090 
Di•œy
* ,

3091 
XHo°Addªss
* ,

3095 
	`XRï¨ítWödow
(

3096 
Di•œy
* ,

3097 
Wödow
 ,

3098 
Wödow
 ,

3103 
	`XRe£tS¸ìnSavî
(

3104 
Di•œy
*

3107 
	`XResizeWödow
(

3108 
Di•œy
* ,

3109 
Wödow
 ,

3114 
	`XRe°ackWödows
(

3115 
Di•œy
* ,

3116 
Wödow
* ,

3120 
	`XRŸ©eBuf„rs
(

3121 
Di•œy
* ,

3125 
	`XRŸ©eWödowPr›îtõs
(

3126 
Di•œy
* ,

3127 
Wödow
 ,

3128 
Atom
* ,

3133 
	`XS¸ìnCou¡
(

3134 
Di•œy
*

3137 
	`XSñe˘I≈ut
(

3138 
Di•œy
* ,

3139 
Wödow
 ,

3143 
Sètus
 
	`XSídEvít
(

3144 
Di•œy
* ,

3145 
Wödow
 ,

3146 
Boﬁ
 ,

3148 
XEvít
*

3151 
	`XSëAc˚ssC⁄åﬁ
(

3152 
Di•œy
* ,

3156 
	`XSëArcMode
(

3157 
Di•œy
* ,

3158 
GC
 ,

3162 
	`XSëBackground
(

3163 
Di•œy
* ,

3164 
GC
 ,

3168 
	`XSëClùMask
(

3169 
Di•œy
* ,

3170 
GC
 ,

3171 
Pixm≠


3174 
	`XSëClùOrigö
(

3175 
Di•œy
* ,

3176 
GC
 ,

3181 
	`XSëClùRe˘™gÀs
(

3182 
Di•œy
* ,

3183 
GC
 ,

3186 
XRe˘™gÀ
* ,

3191 
	`XSëClo£DownMode
(

3192 
Di•œy
* ,

3196 
	`XSëComm™d
(

3197 
Di•œy
* ,

3198 
Wödow
 ,

3203 
	`XSëDashes
(

3204 
Di•œy
* ,

3205 
GC
 ,

3207 
_Xc⁄°
 * ,

3211 
	`XSëFûlRuÀ
(

3212 
Di•œy
* ,

3213 
GC
 ,

3217 
	`XSëFûlStyÀ
(

3218 
Di•œy
* ,

3219 
GC
 ,

3223 
	`XSëF⁄t
(

3224 
Di•œy
* ,

3225 
GC
 ,

3226 
F⁄t


3229 
	`XSëF⁄tP©h
(

3230 
Di•œy
* ,

3235 
	`XSëF‹eground
(

3236 
Di•œy
* ,

3237 
GC
 ,

3241 
	`XSëFun˘i⁄
(

3242 
Di•œy
* ,

3243 
GC
 ,

3247 
	`XSëGøphicsExposuªs
(

3248 
Di•œy
* ,

3249 
GC
 ,

3250 
Boﬁ


3253 
	`XSëIc⁄Name
(

3254 
Di•œy
* ,

3255 
Wödow
 ,

3256 
_Xc⁄°
 *

3259 
	`XSëI≈utFocus
(

3260 
Di•œy
* ,

3261 
Wödow
 ,

3263 
Time


3266 
	`XSëLöeAâribuãs
(

3267 
Di•œy
* ,

3268 
GC
 ,

3275 
	`XSëModifõrM≠pög
(

3276 
Di•œy
* ,

3277 
XModifõrKeym≠
*

3280 
	`XSëPœ√Mask
(

3281 
Di•œy
* ,

3282 
GC
 ,

3286 
	`XSëPoöãrM≠pög
(

3287 
Di•œy
* ,

3288 
_Xc⁄°
 * ,

3292 
	`XSëS¸ìnSavî
(

3293 
Di•œy
* ,

3300 
	`XSëSñe˘i⁄Ow√r
(

3301 
Di•œy
* ,

3302 
Atom
 ,

3303 
Wödow
 ,

3304 
Time


3307 
	`XSëSèã
(

3308 
Di•œy
* ,

3309 
GC
 ,

3316 
	`XSëStù∂e
(

3317 
Di•œy
* ,

3318 
GC
 ,

3319 
Pixm≠


3322 
	`XSëSubwödowMode
(

3323 
Di•œy
* ,

3324 
GC
 ,

3328 
	`XSëTSOrigö
(

3329 
Di•œy
* ,

3330 
GC
 ,

3335 
	`XSëTûe
(

3336 
Di•œy
* ,

3337 
GC
 ,

3338 
Pixm≠


3341 
	`XSëWödowBackground
(

3342 
Di•œy
* ,

3343 
Wödow
 ,

3347 
	`XSëWödowBackgroundPixm≠
(

3348 
Di•œy
* ,

3349 
Wödow
 ,

3350 
Pixm≠


3353 
	`XSëWödowB‹dî
(

3354 
Di•œy
* ,

3355 
Wödow
 ,

3359 
	`XSëWödowB‹dîPixm≠
(

3360 
Di•œy
* ,

3361 
Wödow
 ,

3362 
Pixm≠


3365 
	`XSëWödowB‹dîWidth
(

3366 
Di•œy
* ,

3367 
Wödow
 ,

3371 
	`XSëWödowCﬁ‹m≠
(

3372 
Di•œy
* ,

3373 
Wödow
 ,

3374 
Cﬁ‹m≠


3377 
	`XSt‹eBuf„r
(

3378 
Di•œy
* ,

3379 
_Xc⁄°
 * ,

3384 
	`XSt‹eByãs
(

3385 
Di•œy
* ,

3386 
_Xc⁄°
 * ,

3390 
	`XSt‹eCﬁ‹
(

3391 
Di•œy
* ,

3392 
Cﬁ‹m≠
 ,

3393 
XCﬁ‹
*

3396 
	`XSt‹eCﬁ‹s
(

3397 
Di•œy
* ,

3398 
Cﬁ‹m≠
 ,

3399 
XCﬁ‹
* ,

3403 
	`XSt‹eName
(

3404 
Di•œy
* ,

3405 
Wödow
 ,

3406 
_Xc⁄°
 *

3409 
	`XSt‹eNamedCﬁ‹
(

3410 
Di•œy
* ,

3411 
Cﬁ‹m≠
 ,

3412 
_Xc⁄°
 * ,

3417 
	`XSync
(

3418 
Di•œy
* ,

3419 
Boﬁ


3422 
	`XTextExã¡s
(

3423 
XF⁄tSåu˘
* ,

3424 
_Xc⁄°
 * ,

3429 
XCh¨Såu˘
*

3432 
	`XTextExã¡s16
(

3433 
XF⁄tSåu˘
* ,

3434 
_Xc⁄°
 
XCh¨2b
* ,

3439 
XCh¨Såu˘
*

3442 
	`XTextWidth
(

3443 
XF⁄tSåu˘
* ,

3444 
_Xc⁄°
 * ,

3448 
	`XTextWidth16
(

3449 
XF⁄tSåu˘
* ,

3450 
_Xc⁄°
 
XCh¨2b
* ,

3454 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3455 
Di•œy
* ,

3456 
Wödow
 ,

3457 
Wödow
 ,

3462 
Wödow
*

3465 
	`XUndeföeCurs‹
(

3466 
Di•œy
* ,

3467 
Wödow


3470 
	`XUngøbBuâ⁄
(

3471 
Di•œy
* ,

3474 
Wödow


3477 
	`XUngøbKey
(

3478 
Di•œy
* ,

3481 
Wödow


3484 
	`XUngøbKeybﬂrd
(

3485 
Di•œy
* ,

3486 
Time


3489 
	`XUngøbPoöãr
(

3490 
Di•œy
* ,

3491 
Time


3494 
	`XUngøbSîvî
(

3495 
Di•œy
*

3498 
	`XUnö°ÆlCﬁ‹m≠
(

3499 
Di•œy
* ,

3500 
Cﬁ‹m≠


3503 
	`XU∆ﬂdF⁄t
(

3504 
Di•œy
* ,

3505 
F⁄t


3508 
	`XUnm≠Subwödows
(

3509 
Di•œy
* ,

3510 
Wödow


3513 
	`XUnm≠Wödow
(

3514 
Di•œy
* ,

3515 
Wödow


3518 
	`XVíd‹Rñó£
(

3519 
Di•œy
*

3522 
	`XW¨pPoöãr
(

3523 
Di•œy
* ,

3524 
Wödow
 ,

3525 
Wödow
 ,

3534 
	`XWidthMMOfS¸ìn
(

3535 
S¸ìn
*

3538 
	`XWidthOfS¸ìn
(

3539 
S¸ìn
*

3542 
	`XWödowEvít
(

3543 
Di•œy
* ,

3544 
Wödow
 ,

3546 
XEvít
*

3549 
	`XWrôeBôm≠Fûe
(

3550 
Di•œy
* ,

3551 
_Xc⁄°
 * ,

3552 
Pixm≠
 ,

3559 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3561 *
	`XSëLoˇÀModifõrs
(

3565 
XOM
 
	`XO≥nOM
(

3566 
Di•œy
* ,

3567 
_XrmHashBuckëRec
* ,

3568 
_Xc⁄°
 * ,

3569 
_Xc⁄°
 *

3572 
Sètus
 
	`XClo£OM
(

3573 
XOM


3576 *
	$XSëOMVÆues
(

3577 
XOM
 ,

3579 Ë
	`_X_SENTINEL
(0);

3581 *
	$XGëOMVÆues
(

3582 
XOM
 ,

3584 Ë
	`_X_SENTINEL
(0);

3586 
Di•œy
 *
	`XDi•œyOfOM
(

3587 
XOM


3590 *
	`XLoˇÀOfOM
(

3591 
XOM


3594 
XOC
 
	$XCª©eOC
(

3595 
XOM
 ,

3597 Ë
	`_X_SENTINEL
(0);

3599 
	`XDe°royOC
(

3600 
XOC


3603 
XOM
 
	`XOMOfOC
(

3604 
XOC


3607 *
	$XSëOCVÆues
(

3608 
XOC
 ,

3610 Ë
	`_X_SENTINEL
(0);

3612 *
	$XGëOCVÆues
(

3613 
XOC
 ,

3615 Ë
	`_X_SENTINEL
(0);

3617 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3618 
Di•œy
* ,

3619 
_Xc⁄°
 * ,

3625 
	`XFªeF⁄tSë
(

3626 
Di•œy
* ,

3627 
XF⁄tSë


3630 
	`XF⁄tsOfF⁄tSë
(

3631 
XF⁄tSë
 ,

3632 
XF⁄tSåu˘
*** ,

3636 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3637 
XF⁄tSë


3640 *
	`XLoˇÀOfF⁄tSë
(

3641 
XF⁄tSë


3644 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3645 
XF⁄tSë


3648 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3649 
XF⁄tSë


3652 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3653 
XF⁄tSë


3656 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3657 
XF⁄tSë


3660 
	`XmbTextEsˇ≥mít
(

3661 
XF⁄tSë
 ,

3662 
_Xc⁄°
 * ,

3666 
	`XwcTextEsˇ≥mít
(

3667 
XF⁄tSë
 ,

3668 
_Xc⁄°
 
wch¨_t
* ,

3672 
	`Xutf8TextEsˇ≥mít
(

3673 
XF⁄tSë
 ,

3674 
_Xc⁄°
 * ,

3678 
	`XmbTextExã¡s
(

3679 
XF⁄tSë
 ,

3680 
_Xc⁄°
 * ,

3682 
XRe˘™gÀ
* ,

3683 
XRe˘™gÀ
*

3686 
	`XwcTextExã¡s
(

3687 
XF⁄tSë
 ,

3688 
_Xc⁄°
 
wch¨_t
* ,

3690 
XRe˘™gÀ
* ,

3691 
XRe˘™gÀ
*

3694 
	`Xutf8TextExã¡s
(

3695 
XF⁄tSë
 ,

3696 
_Xc⁄°
 * ,

3698 
XRe˘™gÀ
* ,

3699 
XRe˘™gÀ
*

3702 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3703 
XF⁄tSë
 ,

3704 
_Xc⁄°
 * ,

3706 
XRe˘™gÀ
* ,

3707 
XRe˘™gÀ
* ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
*

3714 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3715 
XF⁄tSë
 ,

3716 
_Xc⁄°
 
wch¨_t
* ,

3718 
XRe˘™gÀ
* ,

3719 
XRe˘™gÀ
* ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
*

3726 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3727 
XF⁄tSë
 ,

3728 
_Xc⁄°
 * ,

3730 
XRe˘™gÀ
* ,

3731 
XRe˘™gÀ
* ,

3734 
XRe˘™gÀ
* ,

3735 
XRe˘™gÀ
*

3738 
	`XmbDøwText
(

3739 
Di•œy
* ,

3740 
DøwabÀ
 ,

3741 
GC
 ,

3744 
XmbTextIãm
* ,

3748 
	`XwcDøwText
(

3749 
Di•œy
* ,

3750 
DøwabÀ
 ,

3751 
GC
 ,

3754 
XwcTextIãm
* ,

3758 
	`Xutf8DøwText
(

3759 
Di•œy
* ,

3760 
DøwabÀ
 ,

3761 
GC
 ,

3764 
XmbTextIãm
* ,

3768 
	`XmbDøwSåög
(

3769 
Di•œy
* ,

3770 
DøwabÀ
 ,

3771 
XF⁄tSë
 ,

3772 
GC
 ,

3775 
_Xc⁄°
 * ,

3779 
	`XwcDøwSåög
(

3780 
Di•œy
* ,

3781 
DøwabÀ
 ,

3782 
XF⁄tSë
 ,

3783 
GC
 ,

3786 
_Xc⁄°
 
wch¨_t
* ,

3790 
	`Xutf8DøwSåög
(

3791 
Di•œy
* ,

3792 
DøwabÀ
 ,

3793 
XF⁄tSë
 ,

3794 
GC
 ,

3797 
_Xc⁄°
 * ,

3801 
	`XmbDøwImageSåög
(

3802 
Di•œy
* ,

3803 
DøwabÀ
 ,

3804 
XF⁄tSë
 ,

3805 
GC
 ,

3808 
_Xc⁄°
 * ,

3812 
	`XwcDøwImageSåög
(

3813 
Di•œy
* ,

3814 
DøwabÀ
 ,

3815 
XF⁄tSë
 ,

3816 
GC
 ,

3819 
_Xc⁄°
 
wch¨_t
* ,

3823 
	`Xutf8DøwImageSåög
(

3824 
Di•œy
* ,

3825 
DøwabÀ
 ,

3826 
XF⁄tSë
 ,

3827 
GC
 ,

3830 
_Xc⁄°
 * ,

3834 
XIM
 
	`XO≥nIM
(

3835 
Di•œy
* ,

3836 
_XrmHashBuckëRec
* ,

3841 
Sètus
 
	`XClo£IM
(

3842 
XIM


3845 *
	$XGëIMVÆues
(

3846 
XIM
 , ...

3847 Ë
	`_X_SENTINEL
(0);

3849 *
	$XSëIMVÆues
(

3850 
XIM
 , ...

3851 Ë
	`_X_SENTINEL
(0);

3853 
Di•œy
 *
	`XDi•œyOfIM
(

3854 
XIM


3857 *
	`XLoˇÀOfIM
(

3858 
XIM


3861 
XIC
 
	$XCª©eIC
(

3862 
XIM
 , ...

3863 Ë
	`_X_SENTINEL
(0);

3865 
	`XDe°royIC
(

3866 
XIC


3869 
	`XSëICFocus
(

3870 
XIC


3873 
	`XUn£tICFocus
(

3874 
XIC


3877 
wch¨_t
 *
	`XwcRe£tIC
(

3878 
XIC


3881 *
	`XmbRe£tIC
(

3882 
XIC


3885 *
	`Xutf8Re£tIC
(

3886 
XIC


3889 *
	$XSëICVÆues
(

3890 
XIC
 , ...

3891 Ë
	`_X_SENTINEL
(0);

3893 *
	$XGëICVÆues
(

3894 
XIC
 , ...

3895 Ë
	`_X_SENTINEL
(0);

3897 
XIM
 
	`XIMOfIC
(

3898 
XIC


3901 
Boﬁ
 
	`XFûãrEvít
(

3902 
XEvít
* ,

3903 
Wödow


3906 
	`XmbLookupSåög
(

3907 
XIC
 ,

3908 
XKeyPªs£dEvít
* ,

3911 
KeySym
* ,

3912 
Sètus
*

3915 
	`XwcLookupSåög
(

3916 
XIC
 ,

3917 
XKeyPªs£dEvít
* ,

3918 
wch¨_t
* ,

3920 
KeySym
* ,

3921 
Sètus
*

3924 
	`Xutf8LookupSåög
(

3925 
XIC
 ,

3926 
XKeyPªs£dEvít
* ,

3929 
KeySym
* ,

3930 
Sètus
*

3933 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3935 Ë
	`_X_SENTINEL
(0);

3939 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3940 
Di•œy
* ,

3941 
_XrmHashBuckëRec
* ,

3944 
XIDProc
 ,

3945 
XPoöãr


3948 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3949 
Di•œy
* ,

3950 
_XrmHashBuckëRec
* ,

3953 
XIDProc
 ,

3954 
XPoöãr


3957 (*
	tXC⁄√˘i⁄W©chProc
)(

3958 
	tDi•œy
* ,

3959 
	tXPoöãr
 ,

3961 
	tBoﬁ
 ,

3962 
	tXPoöãr
*

3966 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3967 
Di•œy
* ,

3972 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3973 
Di•œy
* ,

3977 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3978 
Di•œy
* ,

3979 
XC⁄√˘i⁄W©chProc
 ,

3980 
XPoöãr


3983 
	`XRemoveC⁄√˘i⁄W©ch
(

3984 
Di•œy
* ,

3985 
XC⁄√˘i⁄W©chProc
 ,

3986 
XPoöãr


3989 
	`XSëAuth‹iz©i⁄
(

3996 
	`_Xmbtowc
(

3997 
wch¨_t
 * ,

3998 #ifde‡
ISC


4000 
size_t


4007 
	`_Xw˘omb
(

4009 
wch¨_t


4012 
Boﬁ
 
	`XGëEvítD©a
(

4013 
Di•œy
* ,

4014 
XGíîicEvítCookõ
*

4017 
	`XFªeEvítD©a
(

4018 
Di•œy
* ,

4019 
XGíîicEvítCookõ
*

4022 
_XFUNCPROTOEND


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/iconv.h

18 #i‚de‡
_ICONV_H


19 
	#_ICONV_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
__BEGIN_DECLS


29 *
	tic⁄v_t
;

37 
ic⁄v_t
 
ic⁄v_›í
 (c⁄° *
__tocode
, c⁄° *
__‰omcode
);

42 
size_t
 
ic⁄v
 (
ic⁄v_t
 
__cd
, **
__ª°ri˘
 
__öbuf
,

43 
size_t
 *
__ª°ri˘
 
__öbyã¶e·
,

44 **
__ª°ri˘
 
__outbuf
,

45 
size_t
 *
__ª°ri˘
 
__outbyã¶e·
);

51 
ic⁄v_˛o£
 (
ic⁄v_t
 
__cd
);

53 
	g__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

46 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


48 #i‡
__WORDSIZE
 == 64

49 
	#__PRI64_PREFIX
 "l"

	)

50 
	#__PRIPTR_PREFIX
 "l"

	)

52 
	#__PRI64_PREFIX
 "Œ"

	)

53 
	#__PRIPTR_PREFIX


	)

59 
	#PRId8
 "d"

	)

60 
	#PRId16
 "d"

	)

61 
	#PRId32
 "d"

	)

62 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdLEAST8
 "d"

	)

65 
	#PRIdLEAST16
 "d"

	)

66 
	#PRIdLEAST32
 "d"

	)

67 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

69 
	#PRIdFAST8
 "d"

	)

70 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

71 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

75 
	#PRIi8
 "i"

	)

76 
	#PRIi16
 "i"

	)

77 
	#PRIi32
 "i"

	)

78 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiLEAST8
 "i"

	)

81 
	#PRIiLEAST16
 "i"

	)

82 
	#PRIiLEAST32
 "i"

	)

83 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

85 
	#PRIiFAST8
 "i"

	)

86 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

87 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

91 
	#PRIo8
 "o"

	)

92 
	#PRIo16
 "o"

	)

93 
	#PRIo32
 "o"

	)

94 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoLEAST8
 "o"

	)

97 
	#PRIoLEAST16
 "o"

	)

98 
	#PRIoLEAST32
 "o"

	)

99 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

101 
	#PRIoFAST8
 "o"

	)

102 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

103 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

107 
	#PRIu8
 "u"

	)

108 
	#PRIu16
 "u"

	)

109 
	#PRIu32
 "u"

	)

110 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuLEAST8
 "u"

	)

113 
	#PRIuLEAST16
 "u"

	)

114 
	#PRIuLEAST32
 "u"

	)

115 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

117 
	#PRIuFAST8
 "u"

	)

118 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

119 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

123 
	#PRIx8
 "x"

	)

124 
	#PRIx16
 "x"

	)

125 
	#PRIx32
 "x"

	)

126 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxLEAST8
 "x"

	)

129 
	#PRIxLEAST16
 "x"

	)

130 
	#PRIxLEAST32
 "x"

	)

131 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

133 
	#PRIxFAST8
 "x"

	)

134 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

135 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

139 
	#PRIX8
 "X"

	)

140 
	#PRIX16
 "X"

	)

141 
	#PRIX32
 "X"

	)

142 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXLEAST8
 "X"

	)

145 
	#PRIXLEAST16
 "X"

	)

146 
	#PRIXLEAST32
 "X"

	)

147 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

149 
	#PRIXFAST8
 "X"

	)

150 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

151 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

156 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

157 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

158 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

159 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

160 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

161 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

165 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

166 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

167 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

168 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

169 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

170 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

176 
	#SCNd8
 "hhd"

	)

177 
	#SCNd16
 "hd"

	)

178 
	#SCNd32
 "d"

	)

179 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdLEAST8
 "hhd"

	)

182 
	#SCNdLEAST16
 "hd"

	)

183 
	#SCNdLEAST32
 "d"

	)

184 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

186 
	#SCNdFAST8
 "hhd"

	)

187 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

188 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

192 
	#SCNi8
 "hhi"

	)

193 
	#SCNi16
 "hi"

	)

194 
	#SCNi32
 "i"

	)

195 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiLEAST8
 "hhi"

	)

198 
	#SCNiLEAST16
 "hi"

	)

199 
	#SCNiLEAST32
 "i"

	)

200 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

202 
	#SCNiFAST8
 "hhi"

	)

203 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

204 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

208 
	#SCNu8
 "hhu"

	)

209 
	#SCNu16
 "hu"

	)

210 
	#SCNu32
 "u"

	)

211 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuLEAST8
 "hhu"

	)

214 
	#SCNuLEAST16
 "hu"

	)

215 
	#SCNuLEAST32
 "u"

	)

216 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

218 
	#SCNuFAST8
 "hhu"

	)

219 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

220 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

224 
	#SCNo8
 "hho"

	)

225 
	#SCNo16
 "ho"

	)

226 
	#SCNo32
 "o"

	)

227 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoLEAST8
 "hho"

	)

230 
	#SCNoLEAST16
 "ho"

	)

231 
	#SCNoLEAST32
 "o"

	)

232 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

234 
	#SCNoFAST8
 "hho"

	)

235 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

236 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

240 
	#SCNx8
 "hhx"

	)

241 
	#SCNx16
 "hx"

	)

242 
	#SCNx32
 "x"

	)

243 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxLEAST8
 "hhx"

	)

246 
	#SCNxLEAST16
 "hx"

	)

247 
	#SCNxLEAST32
 "x"

	)

248 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

250 
	#SCNxFAST8
 "hhx"

	)

251 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

252 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

257 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

258 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

259 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

260 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

261 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

264 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

265 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

266 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

267 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

268 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

273 
	g__BEGIN_DECLS


275 #i‡
__WORDSIZE
 == 64

280 
	mquŸ
;

281 
	mªm
;

282 } 
	timaxdiv_t
;

289 
	mquŸ
;

290 
	mªm
;

291 } 
	timaxdiv_t
;

297 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

300 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

301 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

304 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

308 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

309 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

312 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

313 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

314 
__THROW
;

317 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

318 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

319 
__THROW
;

321 #ifde‡
__USE_EXTERN_INLINES


323 #i‡
__WORDSIZE
 == 64

325 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

326 **
__ª°ri˘
 
__íd±r
,

327 
__ba£
, 
__group
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

330 
__exã∫_ölöe
 
ötmax_t


331 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

332 
ba£
))

334  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

335 
	}
}

337 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 ** 
__ª°ri˘
 
__íd±r
,

339 
__ba£
, 
__group
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

342 
__exã∫_ölöe
 
uötmax_t


343 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

344 
ba£
))

346  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

347 
	}
}

349 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

351 
__ba£
, 
__group
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

354 
__exã∫_ölöe
 
ötmax_t


355 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

356 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

358  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

359 
	}
}

361 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

362 
__ª°ri˘
 
__≈å
,

363 
__gwch¨_t
 **

364 
__ª°ri˘
 
__íd±r
,

365 
__ba£
, 
__group
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

368 
__exã∫_ölöe
 
uötmax_t


369 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

370 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

372  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

373 
	}
}

377 
__exãnsi⁄__


378 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

379 **
__ª°ri˘
 
__íd±r
,

380 
__ba£
, 
__group
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

383 
__exã∫_ölöe
 
ötmax_t


384 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

385 
ba£
))

387  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

388 
	}
}

390 
__exãnsi⁄__


391 
	$__°πouŒ_öã∫Æ
 (const *

392 
__ª°ri˘
 
__≈å
,

394 
__ª°ri˘
 
__íd±r
,

395 
__ba£
,

396 
__group
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

399 
__exã∫_ölöe
 
uötmax_t


400 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

401 
ba£
))

403  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

404 
	}
}

406 
__exãnsi⁄__


407 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

409 
__ba£
, 
__group
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

412 
__exã∫_ölöe
 
ötmax_t


413 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

414 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

416  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

417 
	}
}

420 
__exãnsi⁄__


421 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

422 
__ª°ri˘
 
__≈å
,

423 
__gwch¨_t
 **

424 
__ª°ri˘
 
__íd±r
,

425 
__ba£
,

426 
__group
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

429 
__exã∫_ölöe
 
uötmax_t


430 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

431 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

433  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

434 
	}
}

439 
	g__END_DECLS


	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	#__mÆloc_±r_t
 *

	)

29 
	#__mÆloc_size_t
 
size_t


	)

30 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

32 #ifde‡
__GNUC__


34 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

37 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

39 #ifde‡
_LIBC


40 
	#__MALLOC_HOOK_VOLATILE


	)

41 
	#__MALLOC_DEPRECATED


	)

43 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

44 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

49 
	#__MALLOC_P
(
¨gs
Ë
	)
args

50 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

51 
	#__MALLOC_HOOK_VOLATILE


	)

52 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

57 
__BEGIN_DECLS


60 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

64 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

72 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

75 
	$‰ì
 (*
__±r
Ë
__THROW
;

78 
	$c‰ì
 (*
__±r
Ë
__THROW
;

81 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

85 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

89 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

93 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

96 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

97 
__THROW
 
__©åibuã_mÆloc__
;

101 
	smÆlöfo


103 
¨ía
;

104 
‹dblks
;

105 
smblks
;

106 
hblks
;

107 
hblkhd
;

108 
usmblks
;

109 
fsmblks
;

110 
u‹dblks
;

111 
f‹dblks
;

112 
kìpco°
;

116 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

119 #i‚de‡
M_MXFAST


120 
	#M_MXFAST
 1

	)

122 #i‚de‡
M_NLBLKS


123 
	#M_NLBLKS
 2

	)

125 #i‚de‡
M_GRAIN


126 
	#M_GRAIN
 3

	)

128 #i‚de‡
M_KEEP


129 
	#M_KEEP
 4

	)

133 
	#M_TRIM_THRESHOLD
 -1

	)

134 
	#M_TOP_PAD
 -2

	)

135 
	#M_MMAP_THRESHOLD
 -3

	)

136 
	#M_MMAP_MAX
 -4

	)

137 
	#M_CHECK_ACTION
 -5

	)

138 
	#M_PERTURB
 -6

	)

139 
	#M_ARENA_TEST
 -7

	)

140 
	#M_ARENA_MAX
 -8

	)

143 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

147 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

151 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

154 
	$mÆloc_°©s
 (Ë
__THROW
;

157 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

160 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

164 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

169 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

170 
__MALLOC_DEPRECATED
;

172 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

173 c⁄° 
__mÆloc_±r_t
)

174 
__MALLOC_DEPRECATED
;

175 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

176 c⁄° 
__mÆloc_±r_t
)

177 
__MALLOC_DEPRECATED
;

178 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

179 
size_t
 
__size
,

180 c⁄° 
__mÆloc_±r_t
)

181 
__MALLOC_DEPRECATED
;

182 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

183 
size_t
 
__size
,

184 c⁄° 
__mÆloc_±r_t
)

185 
__MALLOC_DEPRECATED
;

186 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

189 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

192 
__END_DECLS


	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
,

193 
	#FP_NAN
 
FP_NAN


	)

194 
FP_INFINITE
,

195 
	#FP_INFINITE
 
FP_INFINITE


	)

196 
FP_ZERO
,

197 
	#FP_ZERO
 
FP_ZERO


	)

198 
FP_SUBNORMAL
,

199 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

200 
FP_NORMAL


201 
	#FP_NORMAL
 
FP_NORMAL


	)

205 #ifde‡
__NO_LONG_DOUBLE_MATH


206 
	#Â˛assify
(
x
) \

207 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

209 
	#Â˛assify
(
x
) \

210 ( (
x
) ==  () \

211 ? 
	`__Â˛assifyf
 (
x
) \

212 :  (
x
) ==  () \

213 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#signbô
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

221 
	#signbô
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__signbôf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#isföôe
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

233 
	#isföôe
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__föôef
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

241 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

245 #ifde‡
__NO_LONG_DOUBLE_MATH


246 
	#i¢™
(
x
) \

247 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

249 
	#i¢™
(
x
) \

250 ( (
x
) ==  () \

251 ? 
	`__i¢™f
 (
x
) \

252 :  (
x
) ==  () \

253 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#isöf
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

261 
	#isöf
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__isöff
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

269 
	#MATH_ERRNO
 1

	)

270 
	#MATH_ERREXCEPT
 2

	)

275 #i‚de‡
__FAST_MATH__


276 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

281 #ifdef 
__USE_MISC


285 
_IEEE_
 = -1,

286 
_SVID_
,

287 
_XOPEN_
,

288 
_POSIX_
,

289 
_ISOC_


290 } 
	t_LIB_VERSION_TYPE
;

295 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

299 #ifde‡
__USE_SVID


305 #ifde‡
__˝lu•lus


306 
__ex˚±i⁄


308 
ex˚±i⁄


311 
ty≥
;

312 *
«me
;

313 
¨g1
;

314 
¨g2
;

315 
ªtvÆ
;

316 
	}
};

318 #ifde‡
__˝lu•lus


319 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

321 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

324 
	#X_TLOSS
 1.41484755040568800000e+16

	)

327 
	#DOMAIN
 1

	)

328 
	#SING
 2

	)

329 
	#OVERFLOW
 3

	)

330 
	#UNDERFLOW
 4

	)

331 
	#TLOSS
 5

	)

332 
	#PLOSS
 6

	)

335 
	#HUGE
 3.40282347e+38F

	)

339 #ifde‡
__USE_XOPEN


341 
	#MAXFLOAT
 3.40282347e+38F

	)

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


349 
	#M_E
 2.7182818284590452354

	)

350 
	#M_LOG2E
 1.4426950408889634074

	)

351 
	#M_LOG10E
 0.43429448190325182765

	)

352 
	#M_LN2
 0.69314718055994530942

	)

353 
	#M_LN10
 2.30258509299404568402

	)

354 
	#M_PI
 3.14159265358979323846

	)

355 
	#M_PI_2
 1.57079632679489661923

	)

356 
	#M_PI_4
 0.78539816339744830962

	)

357 
	#M_1_PI
 0.31830988618379067154

	)

358 
	#M_2_PI
 0.63661977236758134308

	)

359 
	#M_2_SQRTPI
 1.12837916709551257390

	)

360 
	#M_SQRT2
 1.41421356237309504880

	)

361 
	#M_SQRT1_2
 0.70710678118654752440

	)

367 #ifde‡
__USE_GNU


368 
	#M_El
 2.718281828459045235360287471352662498L

	)

369 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

370 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

371 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

372 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

373 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

374 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

375 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

376 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

377 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

378 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

379 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

380 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

387 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


388 
	#__NO_MATH_INLINES
 1

	)

391 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

398 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

399 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

400 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

401 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

402 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

403 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

407 #ifde‡
__USE_EXTERN_INLINES


408 
	~<bôs/m©hölöe.h
>

413 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

414 
	~<bôs/m©h-föôe.h
>

417 #ifde‡
__USE_ISOC99


421 #i‚de‡
isgª©î


422 
	#isgª©î
(
x
, 
y
) \

423 (
__exãnsi⁄__
 \

424 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

425 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

429 #i‚de‡
isgª©îequÆ


430 
	#isgª©îequÆ
(
x
, 
y
) \

431 (
__exãnsi⁄__
 \

432 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

433 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

437 #i‚de‡
i¶ess


438 
	#i¶ess
(
x
, 
y
) \

439 (
__exãnsi⁄__
 \

440 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

441 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

445 #i‚de‡
i¶es£quÆ


446 
	#i¶es£quÆ
(
x
, 
y
) \

447 (
__exãnsi⁄__
 \

448 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

449 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

453 #i‚de‡
i¶essgª©î


454 
	#i¶essgª©î
(
x
, 
y
) \

455 (
__exãnsi⁄__
 \

456 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

457 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

461 #i‚de‡
isun‹dîed


462 
	#isun‹dîed
(
u
, 
v
) \

463 (
__exãnsi⁄__
 \

464 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

465 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

470 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

171 #ifde‡
__STDC__


173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_BSD


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

870 
deföed
 
__USE_MISC
)

875 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

881 
	`p˛o£
 (
FILE
 *
__°ªam
);

885 #ifdef 
__USE_POSIX


887 *
	$˘îmid
 (*
__s
Ë
__THROW
;

891 #ifde‡
__USE_XOPEN


893 *
	`cu£rid
 (*
__s
);

897 #ifdef 
__USE_GNU


898 
ob°ack
;

901 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

903 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

904 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

905 c⁄° *
__ª°ri˘
 
__f‹m©
,

906 
_G_va_li°
 
__¨gs
)

907 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

911 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


915 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

919 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

922 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

925 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


929 
	#__√ed_gë›t


	)

930 
	~<gë›t.h
>

935 #ifde‡
__USE_EXTERN_INLINES


936 
	~<bôs/°dio.h
>

938 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


939 
	~<bôs/°dio2.h
>

941 #ifde‡
__LDBL_COMPAT


942 
	~<bôs/°dio-ldbl.h
>

945 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©of
 (c⁄° *
__≈å
))

280  
	`°πod
 (
__≈å
, (**Ë
NULL
);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

285  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
__exã∫_ölöe
 

288 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

290  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

291 
	}
}

292 
	g__END_NAMESPACE_STD


294 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


295 
__BEGIN_NAMESPACE_C99


296 
__exãnsi⁄__
 
__exã∫_ölöe
 

297 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

299  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

300 
	}
}

301 
	g__END_NAMESPACE_C99


306 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


310 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

313 
	$a64l
 (c⁄° *
__s
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

318 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


319 
	~<sys/ty≥s.h
>

326 
	$øndom
 (Ë
__THROW
;

329 
	$§™dom
 (
__£ed
Ë
__THROW
;

335 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

336 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

343 #ifde‡
__USE_MISC


348 
	søndom_d©a


350 
öt32_t
 *
Âå
;

351 
öt32_t
 *
Ωå
;

352 
öt32_t
 *
°©e
;

353 
ønd_ty≥
;

354 
ønd_deg
;

355 
ønd_£p
;

356 
öt32_t
 *
íd_±r
;

359 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

360 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

365 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

366 
size_t
 
__°©ñí
,

367 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

370 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

371 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
__BEGIN_NAMESPACE_STD


379 
	$ønd
 (Ë
__THROW
;

381 
	$§™d
 (
__£ed
Ë
__THROW
;

382 
__END_NAMESPACE_STD


384 #ifde‡
__USE_POSIX


386 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

390 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


394 
	$dønd48
 (Ë
__THROW
;

395 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$Ã™d48
 (Ë
__THROW
;

399 
	$ƒ™d48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$mønd48
 (Ë
__THROW
;

404 
	$jønd48
 (
__xsubi
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

408 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

409 *
	$£ed48
 (
__£ed16v
[3])

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

413 #ifde‡
__USE_MISC


417 
	sdønd48_d©a


419 
__x
[3];

420 
__ﬁd_x
[3];

421 
__c
;

422 
__öô
;

423 
__a
;

427 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

428 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$î™d48_r
 (
__xsubi
[3],

430 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

434 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$ƒ™d48_r
 (
__xsubi
[3],

438 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

443 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

446 
	$jønd48_r
 (
__xsubi
[3],

447 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

448 *
__ª°ri˘
 
__ªsu…
)

449 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

455 
	$£ed48_r
 (
__£ed16v
[3],

456 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$lc⁄g48_r
 (
__∑øm
[7],

459 
dønd48_d©a
 *
__buf„r
)

460 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

466 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


467 
	#__mÆloc_™d_ˇŒoc_deföed


	)

468 
__BEGIN_NAMESPACE_STD


470 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

472 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

473 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

474 
__END_NAMESPACE_STD


477 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


478 
__BEGIN_NAMESPACE_STD


484 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

485 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

487 
	$‰ì
 (*
__±r
Ë
__THROW
;

488 
__END_NAMESPACE_STD


490 #ifdef 
__USE_MISC


492 
	$c‰ì
 (*
__±r
Ë
__THROW
;

495 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


496 
	~<Æloˇ.h
>

499 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

500 || 
deföed
 
__USE_BSD


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 #ifde‡
__USE_ISOC11


513 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

514 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

517 
__BEGIN_NAMESPACE_STD


519 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

523 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

525 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


527 #ifde‡
__˝lu•lus


528 "C++" 
	`©_quick_exô
 ((*
__func
) ())

529 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

531 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

534 
__END_NAMESPACE_STD


536 #ifdef 
__USE_MISC


539 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

540 
__THROW
 
	`__n⁄nuŒ
 ((1));

543 
__BEGIN_NAMESPACE_STD


547 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

549 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


553 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

555 
__END_NAMESPACE_STD


557 #ifde‡
__USE_ISOC99


558 
__BEGIN_NAMESPACE_C99


561 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

562 
__END_NAMESPACE_C99


566 
__BEGIN_NAMESPACE_STD


568 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

569 
__END_NAMESPACE_STD


573 *
	$__£cuª_gëív
 (c⁄° *
__«me
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

576 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


580 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

583 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


586 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

587 
__THROW
 
	`__n⁄nuŒ
 ((2));

590 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #ifdef 
__USE_MISC


597 
	$˛óªnv
 (Ë
__THROW
;

601 #i‡
deföed
 
__USE_MISC
 \

602 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

608 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

611 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

612 || 
deföed
 
__USE_XOPEN2K8


621 #i‚de‡
__USE_FILE_OFFSET64


622 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

624 #ifde‡
__REDIRECT


625 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

626 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

628 
	#mk°emp
 
mk°emp64


	)

631 #ifde‡
__USE_LARGEFILE64


632 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_MISC


643 #i‚de‡
__USE_FILE_OFFSET64


644 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

646 #ifde‡
__REDIRECT


647 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

648 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 
	#mk°emps
 
mk°emps64


	)

653 #ifde‡
__USE_LARGEFILE64


654 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

659 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


665 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

668 #ifde‡
__USE_GNU


675 #i‚de‡
__USE_FILE_OFFSET64


676 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

678 #ifde‡
__REDIRECT


679 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

680 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

682 
	#mko°emp
 
mko°emp64


	)

685 #ifde‡
__USE_LARGEFILE64


686 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

695 #i‚de‡
__USE_FILE_OFFSET64


696 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

697 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

701 
__Êags
), 
mko°emps64
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

704 
	#mko°emps
 
mko°emps64


	)

707 #ifde‡
__USE_LARGEFILE64


708 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

709 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

714 
__BEGIN_NAMESPACE_STD


719 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

720 
__END_NAMESPACE_STD


723 #ifdef 
__USE_GNU


726 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


736 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

737 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

742 #i‚de‡
__COMPAR_FN_T


743 
	#__COMPAR_FN_T


	)

744 (*
	t__com∑r_‚_t
) (const *, const *);

746 #ifdef 
__USE_GNU


747 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

750 #ifde‡
__USE_GNU


751 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

754 
__BEGIN_NAMESPACE_STD


757 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

758 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

759 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

763 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

765 #ifde‡
__USE_GNU


766 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

767 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

768 
	`__n⁄nuŒ
 ((1, 4));

773 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

774 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
__END_NAMESPACE_STD


777 #ifde‡
__USE_ISOC99


778 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

779 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

783 
__BEGIN_NAMESPACE_STD


787 
div_t
 
	$div
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_STD


793 #ifde‡
__USE_ISOC99


794 
__BEGIN_NAMESPACE_C99


795 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

796 
__díom
)

797 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

798 
__END_NAMESPACE_C99


802 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

803 || 
deföed
 
__USE_SVID


810 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

811 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

816 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

817 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

822 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

823 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

826 #ifde‡
__USE_MISC


828 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

832 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

834 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

840 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

844 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

845 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

848 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

849 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

850 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_SVID


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_BSD


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

956 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


957 
	~<bôs/°dlib.h
>

959 #ifde‡
__LDBL_COMPAT


960 
	~<bôs/°dlib-ldbl.h
>

964 #unde‡
__√ed_mÆloc_™d_ˇŒoc


966 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

32 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

33 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

36 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


40 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

41 
__THROW
 
__©åibuã_puª__
;

44 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

47 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

50 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


53 *
	`ödex
 (*
__s
, 
__c
)

54 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

55 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

56 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


59 
__exã∫_Æways_ölöe
 *

60 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


62  
	`__buûtö_ödex
 (
__s
, 
__c
);

65 
__exã∫_Æways_ölöe
 const *

66 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


68  
	`__buûtö_ödex
 (
__s
, 
__c
);

71 
	}
}

73 *
	$ödex
 (c⁄° *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


81 *
	`rödex
 (*
__s
, 
__c
)

82 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

83 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

84 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


87 
__exã∫_Æways_ölöe
 *

88 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


90  
	`__buûtö_rödex
 (
__s
, 
__c
);

93 
__exã∫_Æways_ölöe
 const *

94 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


96  
	`__buûtö_rödex
 (
__s
, 
__c
);

99 
	}
}

101 *
	$rödex
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


109 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

113 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

114 
__THROW
 
__©åibuã_puª__
;

117 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
;

120 #ifdef 
__USE_XOPEN2K8


124 
	~<xloˇÀ.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

131 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

132 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

133 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

136 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@mylib

2 c⁄° 
	gSCREEN_WIDTH
 = 1024;

3 c⁄° 
	gSCREEN_HEIGHT
 = 640;

4 c⁄° 
	gSCREEN_BPP
 = 32;

5 
boﬁ
 
öô
();

6 
boﬁ
 
lﬂd_fûes
();

7 
˛ón_up
();

8 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

9 
SDL_Evít
 
	gevít
;

10 
SDL_SurÁ˚
 *
	gbﬂt
 = 
NULL
;

	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

4 #ifde‡
__˝lu•lus


34 
	#GL_GLEXT_VERSION
 85

	)

37 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

38 
	#WIN32_LEAN_AND_MEAN
 1

	)

39 
	~<wödows.h
>

42 #i‚de‡
APIENTRY


43 
	#APIENTRY


	)

45 #i‚de‡
APIENTRYP


46 
	#APIENTRYP
 
APIENTRY
 *

	)

48 #i‚de‡
GLAPI


49 
	#GLAPI
 

	)

54 #i‚de‡
GL_VERSION_1_2


55 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

56 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

57 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

58 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

59 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

60 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

61 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

62 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

63 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

64 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

65 
	#GL_TEXTURE_3D
 0x806F

	)

66 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

67 
	#GL_TEXTURE_DEPTH
 0x8071

	)

68 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

69 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

70 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

71 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

72 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

73 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

74 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

75 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

76 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

77 
	#GL_BGR
 0x80E0

	)

78 
	#GL_BGRA
 0x80E1

	)

79 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

80 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

81 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

82 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

83 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

84 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

85 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

86 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

87 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

88 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

89 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

90 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

91 
	#GL_RESCALE_NORMAL
 0x803A

	)

92 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

93 
	#GL_SINGLE_COLOR
 0x81F9

	)

94 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

95 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

98 #i‚de‡
GL_ARB_imagög


99 
	#GL_CONSTANT_COLOR
 0x8001

	)

100 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

101 
	#GL_CONSTANT_ALPHA
 0x8003

	)

102 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

103 
	#GL_BLEND_COLOR
 0x8005

	)

104 
	#GL_FUNC_ADD
 0x8006

	)

105 
	#GL_MIN
 0x8007

	)

106 
	#GL_MAX
 0x8008

	)

107 
	#GL_BLEND_EQUATION
 0x8009

	)

108 
	#GL_FUNC_SUBTRACT
 0x800A

	)

109 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

110 
	#GL_CONVOLUTION_1D
 0x8010

	)

111 
	#GL_CONVOLUTION_2D
 0x8011

	)

112 
	#GL_SEPARABLE_2D
 0x8012

	)

113 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

114 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

115 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

116 
	#GL_REDUCE
 0x8016

	)

117 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

118 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

119 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

120 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

121 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

122 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

123 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

124 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

125 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

126 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

127 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

128 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

129 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

130 
	#GL_HISTOGRAM
 0x8024

	)

131 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

132 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

133 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

134 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

135 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

136 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

137 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

138 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

139 
	#GL_HISTOGRAM_SINK
 0x802D

	)

140 
	#GL_MINMAX
 0x802E

	)

141 
	#GL_MINMAX_FORMAT
 0x802F

	)

142 
	#GL_MINMAX_SINK
 0x8030

	)

143 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

144 
	#GL_COLOR_MATRIX
 0x80B1

	)

145 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

146 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

147 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

148 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

149 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

150 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

151 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

152 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

153 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

154 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

155 
	#GL_COLOR_TABLE
 0x80D0

	)

156 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

157 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

158 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

159 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

160 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

161 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

162 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

163 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

164 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

165 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

166 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

167 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

168 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

169 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

170 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

171 
	#GL_CONSTANT_BORDER
 0x8151

	)

172 
	#GL_REPLICATE_BORDER
 0x8153

	)

173 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

176 #i‚de‡
GL_VERSION_1_3


177 
	#GL_TEXTURE0
 0x84C0

	)

178 
	#GL_TEXTURE1
 0x84C1

	)

179 
	#GL_TEXTURE2
 0x84C2

	)

180 
	#GL_TEXTURE3
 0x84C3

	)

181 
	#GL_TEXTURE4
 0x84C4

	)

182 
	#GL_TEXTURE5
 0x84C5

	)

183 
	#GL_TEXTURE6
 0x84C6

	)

184 
	#GL_TEXTURE7
 0x84C7

	)

185 
	#GL_TEXTURE8
 0x84C8

	)

186 
	#GL_TEXTURE9
 0x84C9

	)

187 
	#GL_TEXTURE10
 0x84CA

	)

188 
	#GL_TEXTURE11
 0x84CB

	)

189 
	#GL_TEXTURE12
 0x84CC

	)

190 
	#GL_TEXTURE13
 0x84CD

	)

191 
	#GL_TEXTURE14
 0x84CE

	)

192 
	#GL_TEXTURE15
 0x84CF

	)

193 
	#GL_TEXTURE16
 0x84D0

	)

194 
	#GL_TEXTURE17
 0x84D1

	)

195 
	#GL_TEXTURE18
 0x84D2

	)

196 
	#GL_TEXTURE19
 0x84D3

	)

197 
	#GL_TEXTURE20
 0x84D4

	)

198 
	#GL_TEXTURE21
 0x84D5

	)

199 
	#GL_TEXTURE22
 0x84D6

	)

200 
	#GL_TEXTURE23
 0x84D7

	)

201 
	#GL_TEXTURE24
 0x84D8

	)

202 
	#GL_TEXTURE25
 0x84D9

	)

203 
	#GL_TEXTURE26
 0x84DA

	)

204 
	#GL_TEXTURE27
 0x84DB

	)

205 
	#GL_TEXTURE28
 0x84DC

	)

206 
	#GL_TEXTURE29
 0x84DD

	)

207 
	#GL_TEXTURE30
 0x84DE

	)

208 
	#GL_TEXTURE31
 0x84DF

	)

209 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

210 
	#GL_MULTISAMPLE
 0x809D

	)

211 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

212 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

213 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

214 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

215 
	#GL_SAMPLES
 0x80A9

	)

216 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

217 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

218 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

219 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

220 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

221 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

222 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

223 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

224 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

225 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

226 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

227 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

228 
	#GL_COMPRESSED_RGB
 0x84ED

	)

229 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

230 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

231 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

232 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

233 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

234 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

235 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

236 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

237 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

238 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

239 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

240 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

241 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

242 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

243 
	#GL_NORMAL_MAP
 0x8511

	)

244 
	#GL_REFLECTION_MAP
 0x8512

	)

245 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

246 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

247 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

248 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

249 
	#GL_COMBINE
 0x8570

	)

250 
	#GL_COMBINE_RGB
 0x8571

	)

251 
	#GL_COMBINE_ALPHA
 0x8572

	)

252 
	#GL_SOURCE0_RGB
 0x8580

	)

253 
	#GL_SOURCE1_RGB
 0x8581

	)

254 
	#GL_SOURCE2_RGB
 0x8582

	)

255 
	#GL_SOURCE0_ALPHA
 0x8588

	)

256 
	#GL_SOURCE1_ALPHA
 0x8589

	)

257 
	#GL_SOURCE2_ALPHA
 0x858A

	)

258 
	#GL_OPERAND0_RGB
 0x8590

	)

259 
	#GL_OPERAND1_RGB
 0x8591

	)

260 
	#GL_OPERAND2_RGB
 0x8592

	)

261 
	#GL_OPERAND0_ALPHA
 0x8598

	)

262 
	#GL_OPERAND1_ALPHA
 0x8599

	)

263 
	#GL_OPERAND2_ALPHA
 0x859A

	)

264 
	#GL_RGB_SCALE
 0x8573

	)

265 
	#GL_ADD_SIGNED
 0x8574

	)

266 
	#GL_INTERPOLATE
 0x8575

	)

267 
	#GL_SUBTRACT
 0x84E7

	)

268 
	#GL_CONSTANT
 0x8576

	)

269 
	#GL_PRIMARY_COLOR
 0x8577

	)

270 
	#GL_PREVIOUS
 0x8578

	)

271 
	#GL_DOT3_RGB
 0x86AE

	)

272 
	#GL_DOT3_RGBA
 0x86AF

	)

275 #i‚de‡
GL_VERSION_1_4


276 
	#GL_BLEND_DST_RGB
 0x80C8

	)

277 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

278 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

279 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

280 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

281 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

282 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

283 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

284 
	#GL_MIRRORED_REPEAT
 0x8370

	)

285 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

286 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

287 
	#GL_INCR_WRAP
 0x8507

	)

288 
	#GL_DECR_WRAP
 0x8508

	)

289 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

290 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

291 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

292 
	#GL_POINT_SIZE_MIN
 0x8126

	)

293 
	#GL_POINT_SIZE_MAX
 0x8127

	)

294 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

295 
	#GL_GENERATE_MIPMAP
 0x8191

	)

296 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

297 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

298 
	#GL_FOG_COORDINATE
 0x8451

	)

299 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

300 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

301 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

302 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

303 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

304 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

305 
	#GL_COLOR_SUM
 0x8458

	)

306 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

307 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

308 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

309 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

310 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

311 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

312 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

313 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

314 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

317 #i‚de‡
GL_VERSION_1_5


318 
	#GL_BUFFER_SIZE
 0x8764

	)

319 
	#GL_BUFFER_USAGE
 0x8765

	)

320 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

321 
	#GL_CURRENT_QUERY
 0x8865

	)

322 
	#GL_QUERY_RESULT
 0x8866

	)

323 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

324 
	#GL_ARRAY_BUFFER
 0x8892

	)

325 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

326 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

327 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

328 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

329 
	#GL_READ_ONLY
 0x88B8

	)

330 
	#GL_WRITE_ONLY
 0x88B9

	)

331 
	#GL_READ_WRITE
 0x88BA

	)

332 
	#GL_BUFFER_ACCESS
 0x88BB

	)

333 
	#GL_BUFFER_MAPPED
 0x88BC

	)

334 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

335 
	#GL_STREAM_DRAW
 0x88E0

	)

336 
	#GL_STREAM_READ
 0x88E1

	)

337 
	#GL_STREAM_COPY
 0x88E2

	)

338 
	#GL_STATIC_DRAW
 0x88E4

	)

339 
	#GL_STATIC_READ
 0x88E5

	)

340 
	#GL_STATIC_COPY
 0x88E6

	)

341 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

342 
	#GL_DYNAMIC_READ
 0x88E9

	)

343 
	#GL_DYNAMIC_COPY
 0x88EA

	)

344 
	#GL_SAMPLES_PASSED
 0x8914

	)

345 
	#GL_SRC1_ALPHA
 0x8589

	)

346 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

347 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

348 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

349 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

350 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

351 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

353 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

354 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

355 
	#GL_FOG_COORD_SRC
 0x8450

	)

356 
	#GL_FOG_COORD
 0x8451

	)

357 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

358 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

359 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

360 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

361 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

362 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

363 
	#GL_SRC0_RGB
 0x8580

	)

364 
	#GL_SRC1_RGB
 0x8581

	)

365 
	#GL_SRC2_RGB
 0x8582

	)

366 
	#GL_SRC0_ALPHA
 0x8588

	)

367 
	#GL_SRC2_ALPHA
 0x858A

	)

370 #i‚de‡
GL_VERSION_2_0


371 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

372 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

373 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

374 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

375 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

376 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

377 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

378 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

379 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

380 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

381 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

382 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

383 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

384 
	#GL_DRAW_BUFFER0
 0x8825

	)

385 
	#GL_DRAW_BUFFER1
 0x8826

	)

386 
	#GL_DRAW_BUFFER2
 0x8827

	)

387 
	#GL_DRAW_BUFFER3
 0x8828

	)

388 
	#GL_DRAW_BUFFER4
 0x8829

	)

389 
	#GL_DRAW_BUFFER5
 0x882A

	)

390 
	#GL_DRAW_BUFFER6
 0x882B

	)

391 
	#GL_DRAW_BUFFER7
 0x882C

	)

392 
	#GL_DRAW_BUFFER8
 0x882D

	)

393 
	#GL_DRAW_BUFFER9
 0x882E

	)

394 
	#GL_DRAW_BUFFER10
 0x882F

	)

395 
	#GL_DRAW_BUFFER11
 0x8830

	)

396 
	#GL_DRAW_BUFFER12
 0x8831

	)

397 
	#GL_DRAW_BUFFER13
 0x8832

	)

398 
	#GL_DRAW_BUFFER14
 0x8833

	)

399 
	#GL_DRAW_BUFFER15
 0x8834

	)

400 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

401 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

403 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

404 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

405 
	#GL_VERTEX_SHADER
 0x8B31

	)

406 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

407 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

408 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

409 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

410 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

411 
	#GL_SHADER_TYPE
 0x8B4F

	)

412 
	#GL_FLOAT_VEC2
 0x8B50

	)

413 
	#GL_FLOAT_VEC3
 0x8B51

	)

414 
	#GL_FLOAT_VEC4
 0x8B52

	)

415 
	#GL_INT_VEC2
 0x8B53

	)

416 
	#GL_INT_VEC3
 0x8B54

	)

417 
	#GL_INT_VEC4
 0x8B55

	)

418 
	#GL_BOOL
 0x8B56

	)

419 
	#GL_BOOL_VEC2
 0x8B57

	)

420 
	#GL_BOOL_VEC3
 0x8B58

	)

421 
	#GL_BOOL_VEC4
 0x8B59

	)

422 
	#GL_FLOAT_MAT2
 0x8B5A

	)

423 
	#GL_FLOAT_MAT3
 0x8B5B

	)

424 
	#GL_FLOAT_MAT4
 0x8B5C

	)

425 
	#GL_SAMPLER_1D
 0x8B5D

	)

426 
	#GL_SAMPLER_2D
 0x8B5E

	)

427 
	#GL_SAMPLER_3D
 0x8B5F

	)

428 
	#GL_SAMPLER_CUBE
 0x8B60

	)

429 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

430 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

431 
	#GL_DELETE_STATUS
 0x8B80

	)

432 
	#GL_COMPILE_STATUS
 0x8B81

	)

433 
	#GL_LINK_STATUS
 0x8B82

	)

434 
	#GL_VALIDATE_STATUS
 0x8B83

	)

435 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

436 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

437 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

438 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

439 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

440 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

441 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

442 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

443 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

444 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

445 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

446 
	#GL_LOWER_LEFT
 0x8CA1

	)

447 
	#GL_UPPER_LEFT
 0x8CA2

	)

448 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

449 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

450 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

451 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

452 
	#GL_POINT_SPRITE
 0x8861

	)

453 
	#GL_COORD_REPLACE
 0x8862

	)

454 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

457 #i‚de‡
GL_VERSION_2_1


458 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

459 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

460 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

461 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

462 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

463 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

464 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

465 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

466 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

467 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

468 
	#GL_SRGB
 0x8C40

	)

469 
	#GL_SRGB8
 0x8C41

	)

470 
	#GL_SRGB_ALPHA
 0x8C42

	)

471 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

472 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

473 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

474 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

475 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

476 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

477 
	#GL_SLUMINANCE
 0x8C46

	)

478 
	#GL_SLUMINANCE8
 0x8C47

	)

479 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

480 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

483 #i‚de‡
GL_VERSION_3_0


484 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

485 
	#GL_CLIP_DISTANCE0
 0x3000

	)

486 
	#GL_CLIP_DISTANCE1
 0x3001

	)

487 
	#GL_CLIP_DISTANCE2
 0x3002

	)

488 
	#GL_CLIP_DISTANCE3
 0x3003

	)

489 
	#GL_CLIP_DISTANCE4
 0x3004

	)

490 
	#GL_CLIP_DISTANCE5
 0x3005

	)

491 
	#GL_CLIP_DISTANCE6
 0x3006

	)

492 
	#GL_CLIP_DISTANCE7
 0x3007

	)

493 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

494 
	#GL_MAJOR_VERSION
 0x821B

	)

495 
	#GL_MINOR_VERSION
 0x821C

	)

496 
	#GL_NUM_EXTENSIONS
 0x821D

	)

497 
	#GL_CONTEXT_FLAGS
 0x821E

	)

498 
	#GL_COMPRESSED_RED
 0x8225

	)

499 
	#GL_COMPRESSED_RG
 0x8226

	)

500 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

501 
	#GL_RGBA32F
 0x8814

	)

502 
	#GL_RGB32F
 0x8815

	)

503 
	#GL_RGBA16F
 0x881A

	)

504 
	#GL_RGB16F
 0x881B

	)

505 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

506 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

507 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

508 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

509 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

510 
	#GL_FIXED_ONLY
 0x891D

	)

511 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

512 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

513 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

514 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

515 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

516 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

517 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

518 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

519 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

520 
	#GL_RGB9_E5
 0x8C3D

	)

521 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

522 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

523 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

524 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

525 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

526 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

527 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

528 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

529 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

530 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

531 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

532 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

533 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

534 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

535 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

536 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

537 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

538 
	#GL_RGBA32UI
 0x8D70

	)

539 
	#GL_RGB32UI
 0x8D71

	)

540 
	#GL_RGBA16UI
 0x8D76

	)

541 
	#GL_RGB16UI
 0x8D77

	)

542 
	#GL_RGBA8UI
 0x8D7C

	)

543 
	#GL_RGB8UI
 0x8D7D

	)

544 
	#GL_RGBA32I
 0x8D82

	)

545 
	#GL_RGB32I
 0x8D83

	)

546 
	#GL_RGBA16I
 0x8D88

	)

547 
	#GL_RGB16I
 0x8D89

	)

548 
	#GL_RGBA8I
 0x8D8E

	)

549 
	#GL_RGB8I
 0x8D8F

	)

550 
	#GL_RED_INTEGER
 0x8D94

	)

551 
	#GL_GREEN_INTEGER
 0x8D95

	)

552 
	#GL_BLUE_INTEGER
 0x8D96

	)

553 
	#GL_RGB_INTEGER
 0x8D98

	)

554 
	#GL_RGBA_INTEGER
 0x8D99

	)

555 
	#GL_BGR_INTEGER
 0x8D9A

	)

556 
	#GL_BGRA_INTEGER
 0x8D9B

	)

557 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

558 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

559 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

560 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

561 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

562 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

563 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

564 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

565 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

566 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

567 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

568 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

569 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

570 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

571 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

572 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

573 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

574 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

575 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

576 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

577 
	#GL_QUERY_WAIT
 0x8E13

	)

578 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

579 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

580 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

581 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

582 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

583 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

708 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

709 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

710 
	#GL_ALPHA_INTEGER
 0x8D97

	)

716 #i‚de‡
GL_VERSION_3_1


717 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

718 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

719 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

720 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

721 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

722 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

723 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

724 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

725 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

726 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

727 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

728 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

729 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

730 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

731 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

732 
	#GL_RED_SNORM
 0x8F90

	)

733 
	#GL_RG_SNORM
 0x8F91

	)

734 
	#GL_RGB_SNORM
 0x8F92

	)

735 
	#GL_RGBA_SNORM
 0x8F93

	)

736 
	#GL_R8_SNORM
 0x8F94

	)

737 
	#GL_RG8_SNORM
 0x8F95

	)

738 
	#GL_RGB8_SNORM
 0x8F96

	)

739 
	#GL_RGBA8_SNORM
 0x8F97

	)

740 
	#GL_R16_SNORM
 0x8F98

	)

741 
	#GL_RG16_SNORM
 0x8F99

	)

742 
	#GL_RGB16_SNORM
 0x8F9A

	)

743 
	#GL_RGBA16_SNORM
 0x8F9B

	)

744 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

745 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

746 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

784 #i‚de‡
GL_VERSION_3_2


785 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

786 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

787 
	#GL_LINES_ADJACENCY
 0x000A

	)

788 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

789 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

790 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

791 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

792 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

793 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

794 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

795 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

796 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

797 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

798 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

799 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

800 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

801 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

802 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

803 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

804 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

805 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

806 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

862 #i‚de‡
GL_VERSION_3_3


863 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

890 #i‚de‡
GL_VERSION_4_0


891 
	#GL_SAMPLE_SHADING
 0x8C36

	)

892 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

893 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

894 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

895 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

896 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

897 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

898 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

899 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

900 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

901 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

981 #i‚de‡
GL_VERSION_4_1


1025 #i‚de‡
GL_VERSION_4_2


1143 #i‚de‡
GL_VERSION_4_3


1144 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

1145 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

1427 #i‚de‡
GL_ARB_mu…ôextuª


1428 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1429 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1430 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1431 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1432 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1433 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1434 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1435 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1436 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1437 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1438 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1439 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1440 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1441 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1442 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1443 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1444 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1445 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1446 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1447 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1448 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1449 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1450 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1451 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1452 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1453 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1454 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1455 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1456 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1457 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1458 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1459 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1460 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1461 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1462 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1465 #i‚de‡
GL_ARB_å™•o£_m©rix


1466 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

1467 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

1468 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

1469 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

1472 #i‚de‡
GL_ARB_mu…ißm∂e


1473 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

1474 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

1475 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

1476 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

1477 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

1478 
	#GL_SAMPLES_ARB
 0x80A9

	)

1479 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

1480 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

1481 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

1484 #i‚de‡
GL_ARB_ãxtuª_ív_add


1487 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


1488 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

1489 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

1490 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

1491 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

1492 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

1493 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

1494 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

1495 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

1496 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

1497 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

1498 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

1499 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

1502 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


1503 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

1504 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

1505 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

1506 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

1507 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

1508 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

1509 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

1510 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

1511 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

1512 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

1513 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

1516 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


1517 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

1520 #i‚de‡
GL_ARB_poöt_∑ømëîs


1521 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

1522 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

1523 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

1524 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

1527 #i‚de‡
GL_ARB_vîãx_bÀnd


1528 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

1529 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

1530 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

1531 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

1532 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

1533 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

1534 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

1535 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

1536 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

1537 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

1538 
	#GL_MODELVIEW0_ARB
 0x1700

	)

1539 
	#GL_MODELVIEW1_ARB
 0x850A

	)

1540 
	#GL_MODELVIEW2_ARB
 0x8722

	)

1541 
	#GL_MODELVIEW3_ARB
 0x8723

	)

1542 
	#GL_MODELVIEW4_ARB
 0x8724

	)

1543 
	#GL_MODELVIEW5_ARB
 0x8725

	)

1544 
	#GL_MODELVIEW6_ARB
 0x8726

	)

1545 
	#GL_MODELVIEW7_ARB
 0x8727

	)

1546 
	#GL_MODELVIEW8_ARB
 0x8728

	)

1547 
	#GL_MODELVIEW9_ARB
 0x8729

	)

1548 
	#GL_MODELVIEW10_ARB
 0x872A

	)

1549 
	#GL_MODELVIEW11_ARB
 0x872B

	)

1550 
	#GL_MODELVIEW12_ARB
 0x872C

	)

1551 
	#GL_MODELVIEW13_ARB
 0x872D

	)

1552 
	#GL_MODELVIEW14_ARB
 0x872E

	)

1553 
	#GL_MODELVIEW15_ARB
 0x872F

	)

1554 
	#GL_MODELVIEW16_ARB
 0x8730

	)

1555 
	#GL_MODELVIEW17_ARB
 0x8731

	)

1556 
	#GL_MODELVIEW18_ARB
 0x8732

	)

1557 
	#GL_MODELVIEW19_ARB
 0x8733

	)

1558 
	#GL_MODELVIEW20_ARB
 0x8734

	)

1559 
	#GL_MODELVIEW21_ARB
 0x8735

	)

1560 
	#GL_MODELVIEW22_ARB
 0x8736

	)

1561 
	#GL_MODELVIEW23_ARB
 0x8737

	)

1562 
	#GL_MODELVIEW24_ARB
 0x8738

	)

1563 
	#GL_MODELVIEW25_ARB
 0x8739

	)

1564 
	#GL_MODELVIEW26_ARB
 0x873A

	)

1565 
	#GL_MODELVIEW27_ARB
 0x873B

	)

1566 
	#GL_MODELVIEW28_ARB
 0x873C

	)

1567 
	#GL_MODELVIEW29_ARB
 0x873D

	)

1568 
	#GL_MODELVIEW30_ARB
 0x873E

	)

1569 
	#GL_MODELVIEW31_ARB
 0x873F

	)

1572 #i‚de‡
GL_ARB_m©rix_∑Àâe


1573 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

1574 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

1575 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

1576 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

1577 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

1578 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

1579 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

1580 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

1581 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

1582 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

1585 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


1586 
	#GL_COMBINE_ARB
 0x8570

	)

1587 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

1588 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

1589 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

1590 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

1591 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

1592 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

1593 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

1594 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

1595 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

1596 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

1597 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

1598 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

1599 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

1600 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

1601 
	#GL_RGB_SCALE_ARB
 0x8573

	)

1602 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

1603 
	#GL_INTERPOLATE_ARB
 0x8575

	)

1604 
	#GL_SUBTRACT_ARB
 0x84E7

	)

1605 
	#GL_CONSTANT_ARB
 0x8576

	)

1606 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

1607 
	#GL_PREVIOUS_ARB
 0x8578

	)

1610 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


1613 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


1614 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

1615 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

1618 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


1619 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

1622 #i‚de‡
GL_ARB_dïth_ãxtuª


1623 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

1624 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

1625 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

1626 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

1627 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

1630 #i‚de‡
GL_ARB_shadow


1631 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

1632 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

1633 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

1636 #i‚de‡
GL_ARB_shadow_ambõ¡


1637 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

1640 #i‚de‡
GL_ARB_wödow_pos


1643 #i‚de‡
GL_ARB_vîãx_¥ogøm


1644 
	#GL_COLOR_SUM_ARB
 0x8458

	)

1645 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

1646 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

1647 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

1648 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

1649 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

1650 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

1651 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

1652 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

1653 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

1654 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

1655 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

1656 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

1657 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1658 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

1659 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

1660 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

1661 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

1662 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

1663 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

1664 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

1665 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

1666 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

1667 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

1668 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

1669 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

1670 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

1671 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

1672 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

1673 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

1674 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

1675 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

1676 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

1677 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

1678 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

1679 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

1680 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

1681 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

1682 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

1683 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

1684 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

1685 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

1686 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

1687 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

1688 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

1689 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

1690 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

1691 
	#GL_MATRIX0_ARB
 0x88C0

	)

1692 
	#GL_MATRIX1_ARB
 0x88C1

	)

1693 
	#GL_MATRIX2_ARB
 0x88C2

	)

1694 
	#GL_MATRIX3_ARB
 0x88C3

	)

1695 
	#GL_MATRIX4_ARB
 0x88C4

	)

1696 
	#GL_MATRIX5_ARB
 0x88C5

	)

1697 
	#GL_MATRIX6_ARB
 0x88C6

	)

1698 
	#GL_MATRIX7_ARB
 0x88C7

	)

1699 
	#GL_MATRIX8_ARB
 0x88C8

	)

1700 
	#GL_MATRIX9_ARB
 0x88C9

	)

1701 
	#GL_MATRIX10_ARB
 0x88CA

	)

1702 
	#GL_MATRIX11_ARB
 0x88CB

	)

1703 
	#GL_MATRIX12_ARB
 0x88CC

	)

1704 
	#GL_MATRIX13_ARB
 0x88CD

	)

1705 
	#GL_MATRIX14_ARB
 0x88CE

	)

1706 
	#GL_MATRIX15_ARB
 0x88CF

	)

1707 
	#GL_MATRIX16_ARB
 0x88D0

	)

1708 
	#GL_MATRIX17_ARB
 0x88D1

	)

1709 
	#GL_MATRIX18_ARB
 0x88D2

	)

1710 
	#GL_MATRIX19_ARB
 0x88D3

	)

1711 
	#GL_MATRIX20_ARB
 0x88D4

	)

1712 
	#GL_MATRIX21_ARB
 0x88D5

	)

1713 
	#GL_MATRIX22_ARB
 0x88D6

	)

1714 
	#GL_MATRIX23_ARB
 0x88D7

	)

1715 
	#GL_MATRIX24_ARB
 0x88D8

	)

1716 
	#GL_MATRIX25_ARB
 0x88D9

	)

1717 
	#GL_MATRIX26_ARB
 0x88DA

	)

1718 
	#GL_MATRIX27_ARB
 0x88DB

	)

1719 
	#GL_MATRIX28_ARB
 0x88DC

	)

1720 
	#GL_MATRIX29_ARB
 0x88DD

	)

1721 
	#GL_MATRIX30_ARB
 0x88DE

	)

1722 
	#GL_MATRIX31_ARB
 0x88DF

	)

1725 #i‚de‡
GL_ARB_‰agmít_¥ogøm


1726 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

1727 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

1728 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

1729 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

1730 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

1731 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

1732 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

1733 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

1734 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

1735 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

1736 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

1737 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

1738 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

1739 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

1740 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

1743 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


1744 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

1745 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

1746 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

1747 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

1748 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

1749 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

1750 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

1751 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

1752 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

1753 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

1754 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

1755 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

1756 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

1757 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

1758 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

1759 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

1760 
	#GL_READ_ONLY_ARB
 0x88B8

	)

1761 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

1762 
	#GL_READ_WRITE_ARB
 0x88BA

	)

1763 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

1764 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

1765 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

1766 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

1767 
	#GL_STREAM_READ_ARB
 0x88E1

	)

1768 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

1769 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

1770 
	#GL_STATIC_READ_ARB
 0x88E5

	)

1771 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

1772 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

1773 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

1774 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

1777 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


1778 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

1779 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

1780 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

1781 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

1782 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

1785 #i‚de‡
GL_ARB_shadî_obje˘s


1786 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

1787 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

1788 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

1789 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

1790 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

1791 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

1792 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

1793 
	#GL_INT_VEC2_ARB
 0x8B53

	)

1794 
	#GL_INT_VEC3_ARB
 0x8B54

	)

1795 
	#GL_INT_VEC4_ARB
 0x8B55

	)

1796 
	#GL_BOOL_ARB
 0x8B56

	)

1797 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

1798 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

1799 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

1800 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

1801 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

1802 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

1803 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

1804 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

1805 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

1806 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

1807 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

1808 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

1809 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

1810 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

1811 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

1812 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

1813 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

1814 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

1815 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

1816 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

1817 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

1818 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

1819 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

1822 #i‚de‡
GL_ARB_vîãx_shadî


1823 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

1824 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

1825 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

1826 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

1827 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

1828 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

1829 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

1832 #i‚de‡
GL_ARB_‰agmít_shadî


1833 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

1834 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

1835 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

1838 #i‚de‡
GL_ARB_shadög_œnguage_100


1839 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

1842 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


1845 #i‚de‡
GL_ARB_poöt_•rôe


1846 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

1847 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

1850 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


1853 #i‚de‡
GL_ARB_døw_buf„rs


1854 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

1855 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

1856 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

1857 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

1858 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

1859 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

1860 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

1861 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

1862 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

1863 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

1864 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

1865 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

1866 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

1867 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

1868 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

1869 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

1870 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

1873 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


1874 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

1875 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

1876 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

1877 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

1880 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


1881 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

1882 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

1883 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

1884 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

1885 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

1888 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


1889 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

1892 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


1893 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

1894 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

1895 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

1896 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

1897 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

1898 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

1899 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

1900 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

1901 
	#GL_RGBA32F_ARB
 0x8814

	)

1902 
	#GL_RGB32F_ARB
 0x8815

	)

1903 
	#GL_ALPHA32F_ARB
 0x8816

	)

1904 
	#GL_INTENSITY32F_ARB
 0x8817

	)

1905 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1906 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1907 
	#GL_RGBA16F_ARB
 0x881A

	)

1908 
	#GL_RGB16F_ARB
 0x881B

	)

1909 
	#GL_ALPHA16F_ARB
 0x881C

	)

1910 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1911 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1912 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1915 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1916 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1917 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1918 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1919 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1922 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


1923 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1924 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1925 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1928 #i‚de‡
GL_ARB_døw_ö°™˚d


1931 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


1932 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1933 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1934 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1935 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1936 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1937 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1938 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1939 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1940 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1941 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1942 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1943 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1944 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1945 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1946 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1947 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1948 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1949 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1950 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1951 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1952 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1953 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1954 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1955 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1956 
	#GL_DRAW_FRAMEBUFFER_BINDING
 
GL_FRAMEBUFFER_BINDING


	)

1957 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1958 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1959 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1960 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1961 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1962 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1963 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1964 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1965 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1966 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1967 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1968 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1969 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1970 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1971 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1972 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1973 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1974 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1975 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1976 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1977 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1978 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1979 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1980 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1981 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1982 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1983 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1984 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1985 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1986 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1987 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1988 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1989 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1990 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1991 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1992 
	#GL_FRAMEBUFFER
 0x8D40

	)

1993 
	#GL_RENDERBUFFER
 0x8D41

	)

1994 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1995 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1996 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1997 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1998 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1999 
	#GL_STENCIL_INDEX8
 0x8D48

	)

2000 
	#GL_STENCIL_INDEX16
 0x8D49

	)

2001 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

2002 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

2003 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

2004 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

2005 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

2006 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

2007 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

2008 
	#GL_MAX_SAMPLES
 0x8D57

	)

2009 
	#GL_INDEX
 0x8222

	)

2010 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

2011 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

2014 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


2015 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

2018 #i‚de‡
GL_ARB_geomëry_shadî4


2019 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

2020 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

2021 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

2022 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

2023 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

2024 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

2025 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

2026 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

2027 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

2028 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

2029 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

2030 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

2031 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

2032 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

2033 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

2034 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

2035 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

2036 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

2041 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


2042 
	#GL_HALF_FLOAT
 0x140B

	)

2045 #i‚de‡
GL_ARB_ö°™˚d_¨øys


2046 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

2049 #i‚de‡
GL_ARB_m≠_buf„r_ønge


2050 
	#GL_MAP_READ_BIT
 0x0001

	)

2051 
	#GL_MAP_WRITE_BIT
 0x0002

	)

2052 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

2053 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

2054 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

2055 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

2058 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


2059 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

2060 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

2061 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

2062 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

2063 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

2066 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


2067 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

2068 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

2069 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

2070 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

2073 #i‚de‡
GL_ARB_ãxtuª_rg


2074 
	#GL_RG
 0x8227

	)

2075 
	#GL_RG_INTEGER
 0x8228

	)

2076 
	#GL_R8
 0x8229

	)

2077 
	#GL_R16
 0x822A

	)

2078 
	#GL_RG8
 0x822B

	)

2079 
	#GL_RG16
 0x822C

	)

2080 
	#GL_R16F
 0x822D

	)

2081 
	#GL_R32F
 0x822E

	)

2082 
	#GL_RG16F
 0x822F

	)

2083 
	#GL_RG32F
 0x8230

	)

2084 
	#GL_R8I
 0x8231

	)

2085 
	#GL_R8UI
 0x8232

	)

2086 
	#GL_R16I
 0x8233

	)

2087 
	#GL_R16UI
 0x8234

	)

2088 
	#GL_R32I
 0x8235

	)

2089 
	#GL_R32UI
 0x8236

	)

2090 
	#GL_RG8I
 0x8237

	)

2091 
	#GL_RG8UI
 0x8238

	)

2092 
	#GL_RG16I
 0x8239

	)

2093 
	#GL_RG16UI
 0x823A

	)

2094 
	#GL_RG32I
 0x823B

	)

2095 
	#GL_RG32UI
 0x823C

	)

2098 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


2099 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

2102 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


2103 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

2104 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

2105 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

2106 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

2107 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

2108 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

2109 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

2110 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

2111 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

2112 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

2113 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

2114 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

2115 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

2116 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

2117 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

2118 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

2119 
	#GL_UNIFORM_TYPE
 0x8A37

	)

2120 
	#GL_UNIFORM_SIZE
 0x8A38

	)

2121 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

2122 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

2123 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

2124 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

2125 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

2126 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

2127 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

2128 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

2129 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

2130 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

2131 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

2132 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

2133 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

2134 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

2135 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

2138 #i‚de‡
GL_ARB_com∑tibûôy


2142 #i‚de‡
GL_ARB_c›y_buf„r


2143 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2144 
	#GL_COPY_READ_BUFFER
 
GL_COPY_READ_BUFFER_BINDING


	)

2145 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2146 
	#GL_COPY_WRITE_BUFFER
 
GL_COPY_WRITE_BUFFER_BINDING


	)

2149 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


2152 #i‚de‡
GL_ARB_dïth_˛amp


2153 
	#GL_DEPTH_CLAMP
 0x864F

	)

2156 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


2159 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


2162 #i‚de‡
GL_ARB_¥ovokög_vîãx


2163 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

2164 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

2165 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

2166 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

2169 #i‚de‡
GL_ARB_£amÀss_cube_m≠


2170 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

2173 #i‚de‡
GL_ARB_sync


2174 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

2175 
	#GL_OBJECT_TYPE
 0x9112

	)

2176 
	#GL_SYNC_CONDITION
 0x9113

	)

2177 
	#GL_SYNC_STATUS
 0x9114

	)

2178 
	#GL_SYNC_FLAGS
 0x9115

	)

2179 
	#GL_SYNC_FENCE
 0x9116

	)

2180 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

2181 
	#GL_UNSIGNALED
 0x9118

	)

2182 
	#GL_SIGNALED
 0x9119

	)

2183 
	#GL_ALREADY_SIGNALED
 0x911A

	)

2184 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

2185 
	#GL_CONDITION_SATISFIED
 0x911C

	)

2186 
	#GL_WAIT_FAILED
 0x911D

	)

2187 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

2188 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

2191 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


2192 
	#GL_SAMPLE_POSITION
 0x8E50

	)

2193 
	#GL_SAMPLE_MASK
 0x8E51

	)

2194 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

2195 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

2196 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

2197 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

2198 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

2199 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

2200 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

2201 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

2202 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

2203 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

2204 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

2205 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

2206 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

2207 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

2208 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

2209 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

2210 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

2211 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

2212 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

2215 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


2219 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


2222 #i‚de‡
GL_ARB_ßm∂e_shadög


2223 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

2224 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

2227 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


2228 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

2229 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

2230 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

2231 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

2232 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

2233 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

2234 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

2237 #i‚de‡
GL_ARB_ãxtuª_g©hî


2238 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

2239 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

2240 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

2243 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


2246 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


2247 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

2248 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

2249 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

2252 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


2253 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

2254 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

2255 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

2256 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

2259 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2260 
	#GL_SRC1_COLOR
 0x88F9

	)

2262 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

2263 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

2264 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

2267 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


2270 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


2271 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

2274 #i‚de‡
GL_ARB_ßm∂î_obje˘s


2275 
	#GL_SAMPLER_BINDING
 0x8919

	)

2278 #i‚de‡
GL_ARB_shadî_bô_ícodög


2281 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


2282 
	#GL_RGB10_A2UI
 0x906F

	)

2285 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


2286 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

2287 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

2288 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

2289 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

2290 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

2293 #i‚de‡
GL_ARB_timî_quîy


2294 
	#GL_TIME_ELAPSED
 0x88BF

	)

2295 
	#GL_TIMESTAMP
 0x8E28

	)

2298 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


2300 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

2303 #i‚de‡
GL_ARB_døw_ödúe˘


2304 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

2305 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

2308 #i‚de‡
GL_ARB_gpu_shadî5


2309 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

2310 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

2311 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

2312 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

2313 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

2317 #i‚de‡
GL_ARB_gpu_shadî_Â64


2319 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

2320 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

2321 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

2322 
	#GL_DOUBLE_MAT2
 0x8F46

	)

2323 
	#GL_DOUBLE_MAT3
 0x8F47

	)

2324 
	#GL_DOUBLE_MAT4
 0x8F48

	)

2325 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

2326 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

2327 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

2328 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

2329 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

2330 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

2333 #i‚de‡
GL_ARB_shadî_subroutöe


2334 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

2335 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

2336 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

2337 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

2338 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

2339 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

2340 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

2341 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

2342 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

2347 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


2348 
	#GL_PATCHES
 0x000E

	)

2349 
	#GL_PATCH_VERTICES
 0x8E72

	)

2350 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

2351 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

2352 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

2353 
	#GL_TESS_GEN_MODE
 0x8E76

	)

2354 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

2355 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

2356 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

2359 
	#GL_ISOLINES
 0x8E7A

	)

2361 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

2362 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

2365 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

2366 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

2367 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

2368 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

2369 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

2370 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

2371 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

2372 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

2373 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

2374 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

2375 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

2376 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

2377 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

2378 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

2379 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

2380 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

2381 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

2382 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

2383 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

2384 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

2387 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


2393 #i‚de‡
GL_ARB_å™sf‹m_„edback2


2394 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

2395 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2396 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 
GL_TRANSFORM_FEEDBACK_PAUSED


	)

2397 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2398 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 
GL_TRANSFORM_FEEDBACK_ACTIVE


	)

2399 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

2402 #i‚de‡
GL_ARB_å™sf‹m_„edback3


2403 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

2404 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

2407 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2408 
	#GL_FIXED
 0x140C

	)

2409 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

2410 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

2411 
	#GL_LOW_FLOAT
 0x8DF0

	)

2412 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

2413 
	#GL_HIGH_FLOAT
 0x8DF2

	)

2414 
	#GL_LOW_INT
 0x8DF3

	)

2415 
	#GL_MEDIUM_INT
 0x8DF4

	)

2416 
	#GL_HIGH_INT
 0x8DF5

	)

2417 
	#GL_SHADER_COMPILER
 0x8DFA

	)

2418 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

2419 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

2420 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

2421 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

2422 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

2423 
	#GL_RGB565
 0x8D62

	)

2426 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


2427 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

2428 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

2429 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

2430 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

2433 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


2434 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

2435 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

2436 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

2437 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

2438 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

2439 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

2440 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

2441 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

2442 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

2445 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


2448 #i‚de‡
GL_ARB_vîãx_©åib_64bô


2464 #i‚de‡
GL_ARB_võwp‹t_¨øy


2469 
	#GL_MAX_VIEWPORTS
 0x825B

	)

2470 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

2471 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

2472 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

2473 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

2474 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

2480 #i‚de‡
GL_ARB_˛_evít


2481 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2482 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2485 #i‚de‡
GL_ARB_debug_ouçut


2486 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

2487 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

2488 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

2489 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

2490 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

2491 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

2492 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

2493 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

2494 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

2495 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

2496 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

2497 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

2498 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

2499 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

2500 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

2501 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

2502 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

2503 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

2504 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

2505 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

2506 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

2507 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

2510 #i‚de‡
GL_ARB_robu°√ss


2512 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

2513 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

2514 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

2515 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

2516 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

2517 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

2518 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

2521 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


2524 #i‚de‡
GL_ARB_ba£_ö°™˚


2527 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


2530 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


2533 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2534 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2535 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2536 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2537 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2538 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2539 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2540 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2541 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2544 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


2547 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


2548 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2551 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


2552 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2555 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


2556 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2557 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2558 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2559 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2560 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2561 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2562 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2563 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2564 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2565 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2566 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2567 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2568 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2569 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2570 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2571 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2572 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2573 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2574 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2575 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2576 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2577 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2578 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2579 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2580 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2581 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2582 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2583 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2584 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2587 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


2588 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2589 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2590 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2591 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2592 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2593 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2594 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2595 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2596 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2597 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2598 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2599 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2600 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2601 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2602 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2603 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2604 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2605 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2606 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2607 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2608 
	#GL_IMAGE_1D
 0x904C

	)

2609 
	#GL_IMAGE_2D
 0x904D

	)

2610 
	#GL_IMAGE_3D
 0x904E

	)

2611 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2612 
	#GL_IMAGE_CUBE
 0x9050

	)

2613 
	#GL_IMAGE_BUFFER
 0x9051

	)

2614 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2615 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2616 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2617 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2618 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2619 
	#GL_INT_IMAGE_1D
 0x9057

	)

2620 
	#GL_INT_IMAGE_2D
 0x9058

	)

2621 
	#GL_INT_IMAGE_3D
 0x9059

	)

2622 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2623 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2624 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2625 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2626 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2627 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2628 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2629 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2630 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2631 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2632 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2633 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2634 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2635 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2636 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2637 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2638 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2639 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2640 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2641 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2642 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2643 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2644 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2645 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2646 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2647 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2648 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2649 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2650 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2651 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2654 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


2657 #i‚de‡
GL_ARB_ãxtuª_°‹age


2658 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2661 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


2662 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

2663 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

2664 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

2665 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

2666 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

2667 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

2668 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

2669 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

2670 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

2671 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

2672 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

2673 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

2674 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

2675 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

2676 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

2677 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

2678 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

2679 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

2680 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

2681 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

2682 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

2683 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

2684 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

2685 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

2686 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

2687 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

2688 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

2689 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

2692 #i‚de‡
GL_KHR_debug


2693 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2694 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2695 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2696 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2697 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2698 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2699 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2700 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2701 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2702 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2703 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2704 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2705 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2706 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2707 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2708 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2709 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2710 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2711 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2712 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2713 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2714 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2715 
	#GL_BUFFER
 0x82E0

	)

2716 
	#GL_SHADER
 0x82E1

	)

2717 
	#GL_PROGRAM
 0x82E2

	)

2718 
	#GL_QUERY
 0x82E3

	)

2719 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2720 
	#GL_SAMPLER
 0x82E6

	)

2721 
	#GL_DISPLAY_LIST
 0x82E7

	)

2723 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2724 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2725 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2726 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2727 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2728 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2729 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2730 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2731 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2736 #i‚de‡
GL_ARB_¨øys_of_¨øys


2739 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2742 #i‚de‡
GL_ARB_compuã_shadî


2743 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2744 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2745 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2746 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2747 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2748 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2749 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2750 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2751 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2752 
	#GL_MAX_COMPUTE_LOCAL_INVOCATIONS
 0x90EB

	)

2753 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2754 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2755 
	#GL_COMPUTE_LOCAL_WORK_SIZE
 0x8267

	)

2756 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2757 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2758 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2759 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2760 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2763 #i‚de‡
GL_ARB_c›y_image


2766 #i‚de‡
GL_ARB_ãxtuª_võw


2767 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2768 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2769 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2770 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2771 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2774 #i‚de‡
GL_ARB_vîãx_©åib_bödög


2775 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2776 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2777 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2778 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2779 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2780 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2781 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2784 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


2787 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2788 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2789 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2790 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2791 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2792 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2793 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2794 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2795 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2796 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2797 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2798 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2799 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2800 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2803 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


2804 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2807 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


2810 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


2811 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2812 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2813 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2814 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2815 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2816 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2817 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2818 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2819 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2822 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


2839 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2840 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2841 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2842 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2843 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2844 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2845 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2846 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2847 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2848 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2849 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2850 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2851 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2852 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2853 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2854 
	#GL_MAX_WIDTH
 0x827E

	)

2855 
	#GL_MAX_HEIGHT
 0x827F

	)

2856 
	#GL_MAX_DEPTH
 0x8280

	)

2857 
	#GL_MAX_LAYERS
 0x8281

	)

2858 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2859 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2860 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2861 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2862 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2863 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2864 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2865 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2866 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2867 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2868 
	#GL_READ_PIXELS
 0x828C

	)

2869 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2870 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2871 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2872 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2873 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2874 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2875 
	#GL_MIPMAP
 0x8293

	)

2876 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2877 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2878 
	#GL_COLOR_ENCODING
 0x8296

	)

2879 
	#GL_SRGB_READ
 0x8297

	)

2880 
	#GL_SRGB_WRITE
 0x8298

	)

2881 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

2882 
	#GL_FILTER
 0x829A

	)

2883 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2884 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2885 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2886 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2887 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2888 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2889 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2890 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2891 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2892 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2893 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2894 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2895 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2896 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2897 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2898 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2899 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2900 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2901 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2902 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2903 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2904 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2905 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2906 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2907 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2908 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2909 
	#GL_FULL_SUPPORT
 0x82B7

	)

2910 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2911 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2912 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2913 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2914 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2915 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2916 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2917 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2918 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2919 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2920 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2921 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2922 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2923 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2924 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2925 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2926 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2927 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2928 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2929 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2930 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2931 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2932 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2933 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2934 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2935 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2936 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2937 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2940 #i‚de‡
GL_ARB_övÆid©e_subd©a


2943 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


2946 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


2947 
	#GL_UNIFORM
 0x92E1

	)

2948 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2949 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2950 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2951 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2952 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2954 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2955 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2956 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2957 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2958 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2959 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2960 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2961 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2962 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2963 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2964 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2965 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2966 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2967 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2968 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2969 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2970 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2971 
	#GL_NAME_LENGTH
 0x92F9

	)

2972 
	#GL_TYPE
 0x92FA

	)

2973 
	#GL_ARRAY_SIZE
 0x92FB

	)

2974 
	#GL_OFFSET
 0x92FC

	)

2975 
	#GL_BLOCK_INDEX
 0x92FD

	)

2976 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2977 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2978 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2979 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2980 
	#GL_BUFFER_BINDING
 0x9302

	)

2981 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2982 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2983 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2984 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2985 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2986 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2987 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2988 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2989 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2990 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2991 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2992 
	#GL_LOCATION
 0x930E

	)

2993 
	#GL_LOCATION_INDEX
 0x930F

	)

2994 
	#GL_IS_PER_PATCH
 0x92E7

	)

2999 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3002 #i‚de‡
GL_ARB_shadî_image_size


3005 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3006 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

3007 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

3008 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

3009 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

3010 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

3011 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

3012 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

3013 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

3014 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

3015 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

3016 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

3017 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

3018 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

3019 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

3020 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x2000

	)

3021 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS


	)

3025 #i‚de‡
GL_ARB_°ícû_ãxturög


3026 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

3029 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3030 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

3031 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

3032 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

3035 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3038 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


3041 #i‚de‡
GL_EXT_abgr


3042 
	#GL_ABGR_EXT
 0x8000

	)

3045 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


3046 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

3047 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

3048 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

3049 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

3050 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

3053 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


3054 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

3055 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

3056 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

3059 #i‚de‡
GL_EXT_ãxtuª


3060 
	#GL_ALPHA4_EXT
 0x803B

	)

3061 
	#GL_ALPHA8_EXT
 0x803C

	)

3062 
	#GL_ALPHA12_EXT
 0x803D

	)

3063 
	#GL_ALPHA16_EXT
 0x803E

	)

3064 
	#GL_LUMINANCE4_EXT
 0x803F

	)

3065 
	#GL_LUMINANCE8_EXT
 0x8040

	)

3066 
	#GL_LUMINANCE12_EXT
 0x8041

	)

3067 
	#GL_LUMINANCE16_EXT
 0x8042

	)

3068 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

3069 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

3070 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

3071 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

3072 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

3073 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

3074 
	#GL_INTENSITY_EXT
 0x8049

	)

3075 
	#GL_INTENSITY4_EXT
 0x804A

	)

3076 
	#GL_INTENSITY8_EXT
 0x804B

	)

3077 
	#GL_INTENSITY12_EXT
 0x804C

	)

3078 
	#GL_INTENSITY16_EXT
 0x804D

	)

3079 
	#GL_RGB2_EXT
 0x804E

	)

3080 
	#GL_RGB4_EXT
 0x804F

	)

3081 
	#GL_RGB5_EXT
 0x8050

	)

3082 
	#GL_RGB8_EXT
 0x8051

	)

3083 
	#GL_RGB10_EXT
 0x8052

	)

3084 
	#GL_RGB12_EXT
 0x8053

	)

3085 
	#GL_RGB16_EXT
 0x8054

	)

3086 
	#GL_RGBA2_EXT
 0x8055

	)

3087 
	#GL_RGBA4_EXT
 0x8056

	)

3088 
	#GL_RGB5_A1_EXT
 0x8057

	)

3089 
	#GL_RGBA8_EXT
 0x8058

	)

3090 
	#GL_RGB10_A2_EXT
 0x8059

	)

3091 
	#GL_RGBA12_EXT
 0x805A

	)

3092 
	#GL_RGBA16_EXT
 0x805B

	)

3093 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

3094 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

3095 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

3096 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

3097 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

3098 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

3099 
	#GL_REPLACE_EXT
 0x8062

	)

3100 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

3101 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

3102 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

3105 #i‚de‡
GL_EXT_ãxtuª3D


3106 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

3107 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

3108 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

3109 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

3110 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

3111 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

3112 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

3113 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

3114 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

3117 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


3118 
	#GL_FILTER4_SGIS
 0x8146

	)

3119 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

3122 #i‚de‡
GL_EXT_subãxtuª


3125 #i‚de‡
GL_EXT_c›y_ãxtuª


3128 #i‚de‡
GL_EXT_hi°ogøm


3129 
	#GL_HISTOGRAM_EXT
 0x8024

	)

3130 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

3131 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

3132 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

3133 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

3134 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

3135 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

3136 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

3137 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

3138 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

3139 
	#GL_MINMAX_EXT
 0x802E

	)

3140 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

3141 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

3142 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

3145 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


3146 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

3147 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

3148 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

3149 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

3150 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

3151 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

3152 
	#GL_REDUCE_EXT
 0x8016

	)

3153 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

3154 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

3155 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

3156 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

3157 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

3158 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

3159 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

3160 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

3161 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

3162 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

3163 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

3164 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

3165 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

3168 #i‚de‡
GL_SGI_cﬁ‹_m©rix


3169 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

3170 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

3171 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

3172 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

3173 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

3174 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

3175 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

3176 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

3177 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

3178 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

3179 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

3182 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


3183 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

3184 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

3185 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

3186 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

3187 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

3188 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

3189 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

3190 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

3191 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

3192 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

3193 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

3194 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

3195 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

3196 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

3197 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

3198 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

3201 #i‚de‡
GL_SGIS_pixñ_ãxtuª


3202 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

3203 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

3204 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

3205 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

3208 #i‚de‡
GL_SGIX_pixñ_ãxtuª


3209 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

3210 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

3213 #i‚de‡
GL_SGIS_ãxtuª4D


3214 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

3215 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

3216 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

3217 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

3218 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

3219 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

3220 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

3221 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

3222 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

3223 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

3226 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


3227 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

3228 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

3231 #i‚de‡
GL_EXT_cmyka


3232 
	#GL_CMYK_EXT
 0x800C

	)

3233 
	#GL_CMYKA_EXT
 0x800D

	)

3234 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

3235 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

3238 #i‚de‡
GL_EXT_ãxtuª_obje˘


3239 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

3240 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

3241 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

3242 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

3243 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

3246 #i‚de‡
GL_SGIS_dëaû_ãxtuª


3247 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

3248 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

3249 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

3250 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

3251 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

3252 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

3253 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

3254 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

3257 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


3258 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

3259 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

3260 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

3261 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

3264 #i‚de‡
GL_EXT_∑cked_pixñs


3265 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

3266 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

3267 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

3268 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

3269 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

3272 #i‚de‡
GL_SGIS_ãxtuª_lod


3273 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

3274 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

3275 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

3276 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

3279 #i‚de‡
GL_SGIS_mu…ißm∂e


3280 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

3281 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

3282 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

3283 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

3284 
	#GL_1PASS_SGIS
 0x80A1

	)

3285 
	#GL_2PASS_0_SGIS
 0x80A2

	)

3286 
	#GL_2PASS_1_SGIS
 0x80A3

	)

3287 
	#GL_4PASS_0_SGIS
 0x80A4

	)

3288 
	#GL_4PASS_1_SGIS
 0x80A5

	)

3289 
	#GL_4PASS_2_SGIS
 0x80A6

	)

3290 
	#GL_4PASS_3_SGIS
 0x80A7

	)

3291 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

3292 
	#GL_SAMPLES_SGIS
 0x80A9

	)

3293 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

3294 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

3295 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

3298 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


3299 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

3302 #i‚de‡
GL_EXT_vîãx_¨øy


3303 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

3304 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

3305 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

3306 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

3307 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

3308 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

3309 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

3310 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

3311 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

3312 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

3313 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

3314 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

3315 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

3316 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

3317 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

3318 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

3319 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

3320 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

3321 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

3322 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

3323 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

3324 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

3325 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

3326 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

3327 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

3328 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

3329 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

3330 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

3331 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

3332 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

3333 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

3334 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

3337 #i‚de‡
GL_EXT_misc_©åibuã


3340 #i‚de‡
GL_SGIS_gíî©e_mùm≠


3341 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

3342 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

3345 #i‚de‡
GL_SGIX_˛ùm≠


3346 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

3347 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

3348 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

3349 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

3350 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

3351 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

3352 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

3353 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

3354 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

3355 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

3356 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

3357 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

3360 #i‚de‡
GL_SGIX_shadow


3361 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

3362 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

3363 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

3364 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

3367 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


3368 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

3371 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


3372 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

3375 #i‚de‡
GL_EXT_bÀnd_mömax


3376 
	#GL_FUNC_ADD_EXT
 0x8006

	)

3377 
	#GL_MIN_EXT
 0x8007

	)

3378 
	#GL_MAX_EXT
 0x8008

	)

3379 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

3382 #i‚de‡
GL_EXT_bÀnd_subåa˘


3383 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

3384 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

3387 #i‚de‡
GL_EXT_bÀnd_logic_›


3390 #i‚de‡
GL_SGIX_öãæa˚


3391 
	#GL_INTERLACE_SGIX
 0x8094

	)

3394 #i‚de‡
GL_SGIX_pixñ_tûes


3395 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

3396 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

3397 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

3398 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

3399 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

3400 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

3401 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

3402 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

3405 #i‚de‡
GL_SGIS_ãxtuª_£À˘


3406 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

3407 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

3408 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

3409 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

3410 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

3411 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

3412 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

3413 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

3414 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

3415 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

3416 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

3417 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

3418 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

3419 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

3420 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

3421 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

3422 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

3423 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

3424 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

3425 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

3426 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

3427 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

3430 #i‚de‡
GL_SGIX_•rôe


3431 
	#GL_SPRITE_SGIX
 0x8148

	)

3432 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

3433 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

3434 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

3435 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

3436 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

3437 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

3440 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


3441 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

3444 #i‚de‡
GL_EXT_poöt_∑ømëîs


3445 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

3446 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

3447 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

3448 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

3451 #i‚de‡
GL_SGIS_poöt_∑ømëîs


3452 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

3453 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

3454 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

3455 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

3458 #i‚de‡
GL_SGIX_ö°rumíts


3459 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

3460 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

3463 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


3464 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

3465 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

3466 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

3467 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

3470 #i‚de‡
GL_SGIX_‰amezoom


3471 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

3472 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

3473 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

3476 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


3479 #i‚de‡
GL_FfdMaskSGIX


3480 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

3481 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

3484 #i‚de‡
GL_SGIX_pﬁynomül_ffd


3485 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

3486 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

3487 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

3488 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

3491 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


3492 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

3493 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

3496 #i‚de‡
GL_SGIX_Êush_ø°î


3499 #i‚de‡
GL_SGIX_dïth_ãxtuª


3500 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

3501 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

3502 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

3505 #i‚de‡
GL_SGIS_fog_fun˘i⁄


3506 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

3507 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

3508 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

3511 #i‚de‡
GL_SGIX_fog_off£t


3512 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

3513 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

3516 #i‚de‡
GL_HP_image_å™sf‹m


3517 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

3518 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

3519 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

3520 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

3521 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

3522 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

3523 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

3524 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

3525 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

3526 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

3527 
	#GL_CUBIC_HP
 0x815F

	)

3528 
	#GL_AVERAGE_HP
 0x8160

	)

3529 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

3530 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

3531 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

3534 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


3535 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

3536 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

3537 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

3538 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

3541 #i‚de‡
GL_INGR_∑Àâe_buf„r


3544 #i‚de‡
GL_SGIX_ãxtuª_add_ív


3545 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

3548 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


3551 #i‚de‡
GL_PGI_vîãx_höts


3552 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

3553 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

3554 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

3555 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

3556 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

3557 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

3558 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

3559 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

3560 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

3561 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

3562 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

3563 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

3564 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

3565 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

3566 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

3567 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

3568 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

3569 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

3570 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

3571 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

3572 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

3573 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

3576 #i‚de‡
GL_PGI_misc_höts


3577 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

3578 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

3579 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

3580 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

3581 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

3582 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

3583 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

3584 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

3585 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

3586 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

3587 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

3588 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

3589 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

3590 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

3591 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

3592 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

3593 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

3594 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

3595 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

3596 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

3599 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


3600 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

3601 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

3602 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

3603 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

3604 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

3605 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

3606 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

3609 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


3610 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

3613 #i‚de‡
GL_SGIX_li°_¥i‹ôy


3614 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

3617 #i‚de‡
GL_SGIX_ú_ö°rumít1


3618 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

3621 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


3622 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

3625 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


3626 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

3627 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

3628 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

3631 #i‚de‡
GL_SGIX_shadow_ambõ¡


3632 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

3635 #i‚de‡
GL_EXT_ödex_ãxtuª


3638 #i‚de‡
GL_EXT_ödex_m©îül


3639 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

3640 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

3641 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

3644 #i‚de‡
GL_EXT_ödex_func


3645 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

3646 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

3647 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

3650 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


3651 
	#GL_IUI_V2F_EXT
 0x81AD

	)

3652 
	#GL_IUI_V3F_EXT
 0x81AE

	)

3653 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

3654 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

3655 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

3656 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

3657 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

3658 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

3661 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


3662 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

3663 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

3666 #i‚de‡
GL_EXT_cuŒ_vîãx


3667 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

3668 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

3669 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

3672 #i‚de‡
GL_SGIX_y¸cb


3673 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

3674 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

3677 #i‚de‡
GL_SGIX_‰agmít_lightög


3678 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

3679 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

3680 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

3681 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

3682 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

3683 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

3684 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

3685 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

3686 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

3687 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

3688 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

3689 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

3690 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

3691 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

3692 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

3693 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

3694 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

3695 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

3696 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

3697 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

3700 #i‚de‡
GL_IBM_ø°îpos_˛ù


3701 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

3704 #i‚de‡
GL_HP_ãxtuª_lightög


3705 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

3706 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

3707 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

3710 #i‚de‡
GL_EXT_døw_ønge_ñemíts


3711 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

3712 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

3715 #i‚de‡
GL_WIN_ph⁄g_shadög


3716 
	#GL_PHONG_WIN
 0x80EA

	)

3717 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

3720 #i‚de‡
GL_WIN_•ecuœr_fog


3721 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

3724 #i‚de‡
GL_EXT_light_ãxtuª


3725 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

3726 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

3727 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

3728 
	#GL_ATTENUATION_EXT
 0x834D

	)

3729 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

3730 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

3731 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

3732 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

3733 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

3737 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


3738 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

3739 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

3742 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


3743 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

3744 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

3745 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

3746 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

3747 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

3748 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

3749 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

3752 #i‚de‡
GL_EXT_bgø


3753 
	#GL_BGR_EXT
 0x80E0

	)

3754 
	#GL_BGRA_EXT
 0x80E1

	)

3757 #i‚de‡
GL_SGIX_async


3758 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

3761 #i‚de‡
GL_SGIX_async_pixñ


3762 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

3763 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

3764 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

3765 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

3766 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

3767 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

3770 #i‚de‡
GL_SGIX_async_hi°ogøm


3771 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

3772 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

3775 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


3778 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


3779 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

3780 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

3781 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

3782 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

3783 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

3786 #i‚de‡
GL_HP_oc˛usi⁄_ã°


3787 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

3788 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

3791 #i‚de‡
GL_EXT_pixñ_å™sf‹m


3792 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

3793 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

3794 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

3795 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

3796 
	#GL_CUBIC_EXT
 0x8334

	)

3797 
	#GL_AVERAGE_EXT
 0x8335

	)

3798 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

3799 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

3800 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

3803 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


3806 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


3807 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

3810 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


3811 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

3812 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

3813 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

3816 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


3817 
	#GL_COLOR_SUM_EXT
 0x8458

	)

3818 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

3819 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

3820 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

3821 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

3822 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

3823 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

3826 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


3827 
	#GL_PERTURB_EXT
 0x85AE

	)

3828 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

3831 #i‚de‡
GL_EXT_mu…i_døw_¨øys


3834 #i‚de‡
GL_EXT_fog_co‹d


3835 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

3836 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

3837 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

3838 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

3839 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

3840 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

3841 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

3842 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

3845 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


3846 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

3847 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

3850 #i‚de‡
GL_EXT_co‹dö©e_‰ame


3851 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

3852 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

3853 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

3854 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

3855 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

3856 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

3857 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

3858 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

3859 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

3860 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

3861 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

3862 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

3863 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

3864 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

3867 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


3868 
	#GL_COMBINE_EXT
 0x8570

	)

3869 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

3870 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

3871 
	#GL_RGB_SCALE_EXT
 0x8573

	)

3872 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

3873 
	#GL_INTERPOLATE_EXT
 0x8575

	)

3874 
	#GL_CONSTANT_EXT
 0x8576

	)

3875 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

3876 
	#GL_PREVIOUS_EXT
 0x8578

	)

3877 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

3878 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

3879 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

3880 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

3881 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

3882 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

3883 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

3884 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

3885 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

3886 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

3887 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

3888 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

3891 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


3892 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

3895 #i‚de‡
GL_APPLE_å™sf‹m_höt


3896 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

3899 #i‚de‡
GL_SGIX_fog_sˇÀ


3900 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

3901 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

3904 #i‚de‡
GL_SUNX_c⁄°™t_d©a


3905 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

3906 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

3909 #i‚de‡
GL_SUN_globÆ_Æpha


3910 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

3911 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

3914 #i‚de‡
GL_SUN_åüngÀ_li°


3915 
	#GL_RESTART_SUN
 0x0001

	)

3916 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

3917 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

3918 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

3919 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

3920 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

3921 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

3922 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

3923 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

3924 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

3925 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

3926 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

3927 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

3928 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

3929 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

3930 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

3931 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

3934 #i‚de‡
GL_SUN_vîãx


3937 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


3938 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

3939 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

3940 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

3941 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

3944 #i‚de‡
GL_INGR_cﬁ‹_˛amp


3945 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

3946 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

3947 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

3948 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

3949 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

3950 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

3951 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

3952 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

3955 #i‚de‡
GL_INGR_öãæa˚_ªad


3956 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

3959 #i‚de‡
GL_EXT_°ícû_wøp


3960 
	#GL_INCR_WRAP_EXT
 0x8507

	)

3961 
	#GL_DECR_WRAP_EXT
 0x8508

	)

3964 #i‚de‡
GL_EXT_422_pixñs


3965 
	#GL_422_EXT
 0x80CC

	)

3966 
	#GL_422_REV_EXT
 0x80CD

	)

3967 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

3968 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

3971 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


3972 
	#GL_NORMAL_MAP_NV
 0x8511

	)

3973 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

3976 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


3977 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

3978 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

3979 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

3980 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

3981 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

3982 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

3983 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

3984 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

3985 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

3986 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

3987 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

3988 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

3991 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


3992 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

3995 #i‚de‡
GL_EXT_ãxtuª_ív_add


3998 #i‚de‡
GL_EXT_ãxtuª_lod_büs


3999 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

4000 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

4001 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

4004 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


4005 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

4006 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

4009 #i‚de‡
GL_EXT_vîãx_weightög


4010 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

4011 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

4012 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

4013 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

4014 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

4015 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

4016 
	#GL_MODELVIEW1_EXT
 0x850A

	)

4017 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

4018 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

4019 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

4020 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

4021 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

4022 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

4025 #i‚de‡
GL_NV_light_max_exp⁄ít


4026 
	#GL_MAX_SHININESS_NV
 0x8504

	)

4027 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

4030 #i‚de‡
GL_NV_vîãx_¨øy_ønge


4031 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

4032 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

4033 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

4034 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

4035 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

4038 #i‚de‡
GL_NV_ªgi°î_comböîs


4039 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

4040 
	#GL_VARIABLE_A_NV
 0x8523

	)

4041 
	#GL_VARIABLE_B_NV
 0x8524

	)

4042 
	#GL_VARIABLE_C_NV
 0x8525

	)

4043 
	#GL_VARIABLE_D_NV
 0x8526

	)

4044 
	#GL_VARIABLE_E_NV
 0x8527

	)

4045 
	#GL_VARIABLE_F_NV
 0x8528

	)

4046 
	#GL_VARIABLE_G_NV
 0x8529

	)

4047 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

4048 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

4049 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

4050 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

4051 
	#GL_SPARE0_NV
 0x852E

	)

4052 
	#GL_SPARE1_NV
 0x852F

	)

4053 
	#GL_DISCARD_NV
 0x8530

	)

4054 
	#GL_E_TIMES_F_NV
 0x8531

	)

4055 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

4056 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

4057 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

4058 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

4059 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

4060 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

4061 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

4062 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

4063 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

4064 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

4065 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

4066 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

4067 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

4068 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

4069 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

4070 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

4071 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

4072 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

4073 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

4074 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

4075 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

4076 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

4077 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

4078 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

4079 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

4080 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

4081 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

4082 
	#GL_COMBINER0_NV
 0x8550

	)

4083 
	#GL_COMBINER1_NV
 0x8551

	)

4084 
	#GL_COMBINER2_NV
 0x8552

	)

4085 
	#GL_COMBINER3_NV
 0x8553

	)

4086 
	#GL_COMBINER4_NV
 0x8554

	)

4087 
	#GL_COMBINER5_NV
 0x8555

	)

4088 
	#GL_COMBINER6_NV
 0x8556

	)

4089 
	#GL_COMBINER7_NV
 0x8557

	)

4097 #i‚de‡
GL_NV_fog_di°™˚


4098 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

4099 
	#GL_EYE_RADIAL_NV
 0x855B

	)

4100 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

4104 #i‚de‡
GL_NV_ãxgí_emboss


4105 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

4106 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

4107 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

4110 #i‚de‡
GL_NV_bÀnd_squ¨e


4113 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


4114 
	#GL_COMBINE4_NV
 0x8503

	)

4115 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

4116 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

4117 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

4118 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

4121 #i‚de‡
GL_MESA_ªsize_buf„rs


4124 #i‚de‡
GL_MESA_wödow_pos


4127 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


4128 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

4129 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

4130 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

4131 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

4134 #i‚de‡
GL_IBM_cuŒ_vîãx


4135 
	#GL_CULL_VERTEX_IBM
 103050

	)

4138 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


4141 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


4142 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

4143 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

4144 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

4145 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

4146 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

4147 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

4148 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

4149 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

4150 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

4151 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

4152 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

4153 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

4154 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

4155 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

4156 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

4157 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

4160 #i‚de‡
GL_SGIX_subßm∂e


4161 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

4162 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

4163 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

4164 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

4165 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

4168 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


4171 #i‚de‡
GL_SGIX_y¸cba


4172 
	#GL_YCRCB_SGIX
 0x8318

	)

4173 
	#GL_YCRCBA_SGIX
 0x8319

	)

4176 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


4177 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

4178 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

4179 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

4182 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


4183 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

4184 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

4187 #i‚de‡
GL_3DFX_mu…ißm∂e


4188 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

4189 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

4190 
	#GL_SAMPLES_3DFX
 0x86B4

	)

4191 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

4194 #i‚de‡
GL_3DFX_tbuf„r


4197 #i‚de‡
GL_EXT_mu…ißm∂e


4198 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

4199 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

4200 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

4201 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

4202 
	#GL_1PASS_EXT
 0x80A1

	)

4203 
	#GL_2PASS_0_EXT
 0x80A2

	)

4204 
	#GL_2PASS_1_EXT
 0x80A3

	)

4205 
	#GL_4PASS_0_EXT
 0x80A4

	)

4206 
	#GL_4PASS_1_EXT
 0x80A5

	)

4207 
	#GL_4PASS_2_EXT
 0x80A6

	)

4208 
	#GL_4PASS_3_EXT
 0x80A7

	)

4209 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

4210 
	#GL_SAMPLES_EXT
 0x80A9

	)

4211 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

4212 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

4213 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

4214 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

4217 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


4218 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

4219 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

4222 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


4223 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

4226 #i‚de‡
GL_SGIX_ªßm∂e


4227 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

4228 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

4229 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

4230 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

4231 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

4234 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


4235 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

4236 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

4237 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

4238 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

4239 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

4240 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

4241 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

4242 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

4245 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


4246 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

4249 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


4250 
	#GL_DOT3_RGB_EXT
 0x8740

	)

4251 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

4254 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


4255 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

4256 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

4259 #i‚de‡
GL_NV_„n˚


4260 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

4261 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

4262 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

4265 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


4266 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

4269 #i‚de‡
GL_NV_evÆu©‹s


4270 
	#GL_EVAL_2D_NV
 0x86C0

	)

4271 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

4272 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

4273 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

4274 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

4275 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

4276 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

4277 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

4278 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

4279 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

4280 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

4281 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

4282 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

4283 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

4284 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

4285 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

4286 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

4287 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

4288 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

4289 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

4290 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

4291 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

4292 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

4293 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

4296 #i‚de‡
GL_NV_∑cked_dïth_°ícû


4297 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

4298 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

4301 #i‚de‡
GL_NV_ªgi°î_comböîs2


4302 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

4305 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


4308 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


4309 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

4310 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

4311 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

4312 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

4315 #i‚de‡
GL_NV_ãxtuª_shadî


4316 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

4317 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

4318 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

4319 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

4320 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

4321 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

4322 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

4323 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

4324 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

4325 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

4326 
	#GL_CULL_MODES_NV
 0x86E0

	)

4327 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

4328 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

4329 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

4330 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

4331 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

4332 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

4333 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

4334 
	#GL_CONST_EYE_NV
 0x86E5

	)

4335 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

4336 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

4337 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

4338 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

4339 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

4340 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

4341 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

4342 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

4343 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

4344 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

4345 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

4346 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

4347 
	#GL_HILO_NV
 0x86F4

	)

4348 
	#GL_DSDT_NV
 0x86F5

	)

4349 
	#GL_DSDT_MAG_NV
 0x86F6

	)

4350 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

4351 
	#GL_HILO16_NV
 0x86F8

	)

4352 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

4353 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

4354 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

4355 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

4356 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

4357 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

4358 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

4359 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

4360 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

4361 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

4362 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

4363 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

4364 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

4365 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

4366 
	#GL_DSDT8_NV
 0x8709

	)

4367 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

4368 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

4369 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

4370 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

4371 
	#GL_HI_SCALE_NV
 0x870E

	)

4372 
	#GL_LO_SCALE_NV
 0x870F

	)

4373 
	#GL_DS_SCALE_NV
 0x8710

	)

4374 
	#GL_DT_SCALE_NV
 0x8711

	)

4375 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

4376 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

4377 
	#GL_HI_BIAS_NV
 0x8714

	)

4378 
	#GL_LO_BIAS_NV
 0x8715

	)

4379 
	#GL_DS_BIAS_NV
 0x8716

	)

4380 
	#GL_DT_BIAS_NV
 0x8717

	)

4381 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

4382 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

4383 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

4384 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

4385 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

4386 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

4387 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

4388 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

4391 #i‚de‡
GL_NV_ãxtuª_shadî2


4392 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

4395 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


4396 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

4399 #i‚de‡
GL_NV_vîãx_¥ogøm


4400 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

4401 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

4402 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

4403 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

4404 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

4405 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

4406 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

4407 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

4408 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

4409 
	#GL_IDENTITY_NV
 0x862A

	)

4410 
	#GL_INVERSE_NV
 0x862B

	)

4411 
	#GL_TRANSPOSE_NV
 0x862C

	)

4412 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

4413 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

4414 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

4415 
	#GL_MATRIX0_NV
 0x8630

	)

4416 
	#GL_MATRIX1_NV
 0x8631

	)

4417 
	#GL_MATRIX2_NV
 0x8632

	)

4418 
	#GL_MATRIX3_NV
 0x8633

	)

4419 
	#GL_MATRIX4_NV
 0x8634

	)

4420 
	#GL_MATRIX5_NV
 0x8635

	)

4421 
	#GL_MATRIX6_NV
 0x8636

	)

4422 
	#GL_MATRIX7_NV
 0x8637

	)

4423 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

4424 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

4425 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

4426 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

4427 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

4428 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

4429 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

4430 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

4431 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

4432 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

4433 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

4434 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

4435 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

4436 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

4437 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

4438 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

4439 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

4440 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

4441 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

4442 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

4443 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

4444 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

4445 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

4446 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

4447 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

4448 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

4449 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

4450 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

4451 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

4452 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

4453 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

4454 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

4455 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

4456 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

4457 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

4458 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

4459 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

4460 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

4461 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

4462 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

4463 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

4464 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

4465 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

4466 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

4467 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

4468 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

4469 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

4470 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

4471 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

4472 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

4473 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

4474 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

4475 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

4476 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

4477 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

4478 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

4479 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

4480 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

4481 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

4482 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

4485 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


4486 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

4487 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

4488 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

4491 #i‚de‡
GL_SGIX_sˇÀbüs_höt


4492 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

4495 #i‚de‡
GL_OML_öãæa˚


4496 
	#GL_INTERLACE_OML
 0x8980

	)

4497 
	#GL_INTERLACE_READ_OML
 0x8981

	)

4500 #i‚de‡
GL_OML_subßm∂e


4501 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

4502 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

4505 #i‚de‡
GL_OML_ªßm∂e


4506 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

4507 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

4508 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

4509 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

4510 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

4511 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

4514 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


4515 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

4516 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

4519 #i‚de‡
GL_ATI_ívm≠_bumpm≠


4520 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

4521 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

4522 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

4523 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

4524 
	#GL_DUDV_ATI
 0x8779

	)

4525 
	#GL_DU8DV8_ATI
 0x877A

	)

4526 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

4527 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

4530 #i‚de‡
GL_ATI_‰agmít_shadî


4531 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

4532 
	#GL_REG_0_ATI
 0x8921

	)

4533 
	#GL_REG_1_ATI
 0x8922

	)

4534 
	#GL_REG_2_ATI
 0x8923

	)

4535 
	#GL_REG_3_ATI
 0x8924

	)

4536 
	#GL_REG_4_ATI
 0x8925

	)

4537 
	#GL_REG_5_ATI
 0x8926

	)

4538 
	#GL_REG_6_ATI
 0x8927

	)

4539 
	#GL_REG_7_ATI
 0x8928

	)

4540 
	#GL_REG_8_ATI
 0x8929

	)

4541 
	#GL_REG_9_ATI
 0x892A

	)

4542 
	#GL_REG_10_ATI
 0x892B

	)

4543 
	#GL_REG_11_ATI
 0x892C

	)

4544 
	#GL_REG_12_ATI
 0x892D

	)

4545 
	#GL_REG_13_ATI
 0x892E

	)

4546 
	#GL_REG_14_ATI
 0x892F

	)

4547 
	#GL_REG_15_ATI
 0x8930

	)

4548 
	#GL_REG_16_ATI
 0x8931

	)

4549 
	#GL_REG_17_ATI
 0x8932

	)

4550 
	#GL_REG_18_ATI
 0x8933

	)

4551 
	#GL_REG_19_ATI
 0x8934

	)

4552 
	#GL_REG_20_ATI
 0x8935

	)

4553 
	#GL_REG_21_ATI
 0x8936

	)

4554 
	#GL_REG_22_ATI
 0x8937

	)

4555 
	#GL_REG_23_ATI
 0x8938

	)

4556 
	#GL_REG_24_ATI
 0x8939

	)

4557 
	#GL_REG_25_ATI
 0x893A

	)

4558 
	#GL_REG_26_ATI
 0x893B

	)

4559 
	#GL_REG_27_ATI
 0x893C

	)

4560 
	#GL_REG_28_ATI
 0x893D

	)

4561 
	#GL_REG_29_ATI
 0x893E

	)

4562 
	#GL_REG_30_ATI
 0x893F

	)

4563 
	#GL_REG_31_ATI
 0x8940

	)

4564 
	#GL_CON_0_ATI
 0x8941

	)

4565 
	#GL_CON_1_ATI
 0x8942

	)

4566 
	#GL_CON_2_ATI
 0x8943

	)

4567 
	#GL_CON_3_ATI
 0x8944

	)

4568 
	#GL_CON_4_ATI
 0x8945

	)

4569 
	#GL_CON_5_ATI
 0x8946

	)

4570 
	#GL_CON_6_ATI
 0x8947

	)

4571 
	#GL_CON_7_ATI
 0x8948

	)

4572 
	#GL_CON_8_ATI
 0x8949

	)

4573 
	#GL_CON_9_ATI
 0x894A

	)

4574 
	#GL_CON_10_ATI
 0x894B

	)

4575 
	#GL_CON_11_ATI
 0x894C

	)

4576 
	#GL_CON_12_ATI
 0x894D

	)

4577 
	#GL_CON_13_ATI
 0x894E

	)

4578 
	#GL_CON_14_ATI
 0x894F

	)

4579 
	#GL_CON_15_ATI
 0x8950

	)

4580 
	#GL_CON_16_ATI
 0x8951

	)

4581 
	#GL_CON_17_ATI
 0x8952

	)

4582 
	#GL_CON_18_ATI
 0x8953

	)

4583 
	#GL_CON_19_ATI
 0x8954

	)

4584 
	#GL_CON_20_ATI
 0x8955

	)

4585 
	#GL_CON_21_ATI
 0x8956

	)

4586 
	#GL_CON_22_ATI
 0x8957

	)

4587 
	#GL_CON_23_ATI
 0x8958

	)

4588 
	#GL_CON_24_ATI
 0x8959

	)

4589 
	#GL_CON_25_ATI
 0x895A

	)

4590 
	#GL_CON_26_ATI
 0x895B

	)

4591 
	#GL_CON_27_ATI
 0x895C

	)

4592 
	#GL_CON_28_ATI
 0x895D

	)

4593 
	#GL_CON_29_ATI
 0x895E

	)

4594 
	#GL_CON_30_ATI
 0x895F

	)

4595 
	#GL_CON_31_ATI
 0x8960

	)

4596 
	#GL_MOV_ATI
 0x8961

	)

4597 
	#GL_ADD_ATI
 0x8963

	)

4598 
	#GL_MUL_ATI
 0x8964

	)

4599 
	#GL_SUB_ATI
 0x8965

	)

4600 
	#GL_DOT3_ATI
 0x8966

	)

4601 
	#GL_DOT4_ATI
 0x8967

	)

4602 
	#GL_MAD_ATI
 0x8968

	)

4603 
	#GL_LERP_ATI
 0x8969

	)

4604 
	#GL_CND_ATI
 0x896A

	)

4605 
	#GL_CND0_ATI
 0x896B

	)

4606 
	#GL_DOT2_ADD_ATI
 0x896C

	)

4607 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

4608 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

4609 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

4610 
	#GL_NUM_PASSES_ATI
 0x8970

	)

4611 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

4612 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

4613 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

4614 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

4615 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

4616 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

4617 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

4618 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

4619 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

4620 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

4621 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

4622 
	#GL_RED_BIT_ATI
 0x00000001

	)

4623 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

4624 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

4625 
	#GL_2X_BIT_ATI
 0x00000001

	)

4626 
	#GL_4X_BIT_ATI
 0x00000002

	)

4627 
	#GL_8X_BIT_ATI
 0x00000004

	)

4628 
	#GL_HALF_BIT_ATI
 0x00000008

	)

4629 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

4630 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

4631 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

4632 
	#GL_COMP_BIT_ATI
 0x00000002

	)

4633 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

4634 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

4637 #i‚de‡
GL_ATI_≤_åüngÀs


4638 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

4639 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

4640 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

4641 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

4642 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

4643 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

4644 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

4645 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

4646 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

4649 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


4650 
	#GL_STATIC_ATI
 0x8760

	)

4651 
	#GL_DYNAMIC_ATI
 0x8761

	)

4652 
	#GL_PRESERVE_ATI
 0x8762

	)

4653 
	#GL_DISCARD_ATI
 0x8763

	)

4654 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

4655 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

4656 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

4657 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

4660 #i‚de‡
GL_EXT_vîãx_shadî


4661 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

4662 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

4663 
	#GL_OP_INDEX_EXT
 0x8782

	)

4664 
	#GL_OP_NEGATE_EXT
 0x8783

	)

4665 
	#GL_OP_DOT3_EXT
 0x8784

	)

4666 
	#GL_OP_DOT4_EXT
 0x8785

	)

4667 
	#GL_OP_MUL_EXT
 0x8786

	)

4668 
	#GL_OP_ADD_EXT
 0x8787

	)

4669 
	#GL_OP_MADD_EXT
 0x8788

	)

4670 
	#GL_OP_FRAC_EXT
 0x8789

	)

4671 
	#GL_OP_MAX_EXT
 0x878A

	)

4672 
	#GL_OP_MIN_EXT
 0x878B

	)

4673 
	#GL_OP_SET_GE_EXT
 0x878C

	)

4674 
	#GL_OP_SET_LT_EXT
 0x878D

	)

4675 
	#GL_OP_CLAMP_EXT
 0x878E

	)

4676 
	#GL_OP_FLOOR_EXT
 0x878F

	)

4677 
	#GL_OP_ROUND_EXT
 0x8790

	)

4678 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

4679 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

4680 
	#GL_OP_POWER_EXT
 0x8793

	)

4681 
	#GL_OP_RECIP_EXT
 0x8794

	)

4682 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

4683 
	#GL_OP_SUB_EXT
 0x8796

	)

4684 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

4685 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

4686 
	#GL_OP_MOV_EXT
 0x8799

	)

4687 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

4688 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

4689 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

4690 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

4691 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

4692 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

4693 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

4694 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

4695 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

4696 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

4697 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

4698 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

4699 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

4700 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

4701 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

4702 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

4703 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

4704 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

4705 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

4706 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

4707 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

4708 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

4709 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

4710 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

4711 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

4712 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

4713 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

4714 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

4715 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

4716 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

4717 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

4718 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

4719 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

4720 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

4721 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

4722 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

4723 
	#GL_SCALAR_EXT
 0x87BE

	)

4724 
	#GL_VECTOR_EXT
 0x87BF

	)

4725 
	#GL_MATRIX_EXT
 0x87C0

	)

4726 
	#GL_VARIANT_EXT
 0x87C1

	)

4727 
	#GL_INVARIANT_EXT
 0x87C2

	)

4728 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

4729 
	#GL_LOCAL_EXT
 0x87C4

	)

4730 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

4731 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

4732 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

4733 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

4734 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

4735 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

4736 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

4737 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

4738 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

4739 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

4740 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

4741 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

4742 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

4743 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

4744 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

4745 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

4746 
	#GL_X_EXT
 0x87D5

	)

4747 
	#GL_Y_EXT
 0x87D6

	)

4748 
	#GL_Z_EXT
 0x87D7

	)

4749 
	#GL_W_EXT
 0x87D8

	)

4750 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

4751 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

4752 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

4753 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

4754 
	#GL_ZERO_EXT
 0x87DD

	)

4755 
	#GL_ONE_EXT
 0x87DE

	)

4756 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

4757 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

4758 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

4759 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

4760 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

4761 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

4762 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

4763 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

4764 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

4765 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

4766 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

4767 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

4768 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

4769 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

4770 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

4773 #i‚de‡
GL_ATI_vîãx_°ªams


4774 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

4775 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

4776 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

4777 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

4778 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

4779 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

4780 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

4781 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

4782 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

4783 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

4786 #i‚de‡
GL_ATI_ñemít_¨øy


4787 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

4788 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

4789 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

4792 #i‚de‡
GL_SUN_mesh_¨øy


4793 
	#GL_QUAD_MESH_SUN
 0x8614

	)

4794 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

4797 #i‚de‡
GL_SUN_¶i˚_accum


4798 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

4801 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


4802 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

4805 #i‚de‡
GL_NV_dïth_˛amp


4806 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

4809 #i‚de‡
GL_NV_oc˛usi⁄_quîy


4810 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

4811 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

4812 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

4813 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

4816 #i‚de‡
GL_NV_poöt_•rôe


4817 
	#GL_POINT_SPRITE_NV
 0x8861

	)

4818 
	#GL_COORD_REPLACE_NV
 0x8862

	)

4819 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

4822 #i‚de‡
GL_NV_ãxtuª_shadî3


4823 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

4824 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

4825 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

4826 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

4827 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

4828 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

4829 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

4830 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

4831 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

4832 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

4833 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

4834 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

4835 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

4836 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

4837 
	#GL_HILO8_NV
 0x885E

	)

4838 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

4839 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

4842 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


4845 #i‚de‡
GL_EXT_shadow_funcs


4848 #i‚de‡
GL_EXT_°ícû_two_side


4849 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

4850 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

4853 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


4854 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

4857 #i‚de‡
GL_APPLE_˛õ¡_°‹age


4858 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

4861 #i‚de‡
GL_APPLE_ñemít_¨øy


4862 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

4863 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

4864 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

4867 #i‚de‡
GL_APPLE_„n˚


4868 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

4869 
	#GL_FENCE_APPLE
 0x8A0B

	)

4872 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


4873 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

4876 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


4877 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

4878 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

4879 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

4880 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

4881 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

4882 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

4883 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

4886 #i‚de‡
GL_APPLE_ycb¸_422


4887 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

4888 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

4889 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

4892 #i‚de‡
GL_S3_s3tc


4893 
	#GL_RGB_S3TC
 0x83A0

	)

4894 
	#GL_RGB4_S3TC
 0x83A1

	)

4895 
	#GL_RGBA_S3TC
 0x83A2

	)

4896 
	#GL_RGBA4_S3TC
 0x83A3

	)

4897 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

4898 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

4901 #i‚de‡
GL_ATI_døw_buf„rs


4902 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

4903 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

4904 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

4905 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

4906 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

4907 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

4908 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

4909 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

4910 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

4911 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

4912 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

4913 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

4914 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

4915 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

4916 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

4917 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

4918 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

4921 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


4922 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

4923 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

4926 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


4927 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

4928 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

4929 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

4932 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


4933 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

4934 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

4935 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

4936 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

4937 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

4938 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

4939 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

4940 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

4941 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

4942 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

4943 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

4944 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

4947 #i‚de‡
GL_NV_Êﬂt_buf„r


4948 
	#GL_FLOAT_R_NV
 0x8880

	)

4949 
	#GL_FLOAT_RG_NV
 0x8881

	)

4950 
	#GL_FLOAT_RGB_NV
 0x8882

	)

4951 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

4952 
	#GL_FLOAT_R16_NV
 0x8884

	)

4953 
	#GL_FLOAT_R32_NV
 0x8885

	)

4954 
	#GL_FLOAT_RG16_NV
 0x8886

	)

4955 
	#GL_FLOAT_RG32_NV
 0x8887

	)

4956 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

4957 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

4958 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

4959 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

4960 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

4961 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

4962 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

4965 #i‚de‡
GL_NV_‰agmít_¥ogøm


4966 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

4967 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

4968 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

4969 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

4970 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

4971 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

4974 #i‚de‡
GL_NV_hÆf_Êﬂt


4975 
	#GL_HALF_FLOAT_NV
 0x140B

	)

4978 #i‚de‡
GL_NV_pixñ_d©a_ønge


4979 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

4980 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

4981 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

4982 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

4983 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

4984 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

4987 #i‚de‡
GL_NV_¥imôive_ª°¨t


4988 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

4989 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

4992 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


4993 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

4996 #i‚de‡
GL_NV_vîãx_¥ogøm2


4999 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


5002 #i‚de‡
GL_ATI_£∑øã_°ícû


5003 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

5004 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

5005 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

5006 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

5009 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


5012 #i‚de‡
GL_OES_ªad_f‹m©


5013 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5014 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5017 #i‚de‡
GL_EXT_dïth_bounds_ã°


5018 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

5019 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

5022 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


5023 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

5024 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

5025 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

5028 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


5029 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

5030 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

5033 #i‚de‡
GL_MESA_∑ck_övît


5034 
	#GL_PACK_INVERT_MESA
 0x8758

	)

5037 #i‚de‡
GL_MESA_ycb¸_ãxtuª


5038 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

5039 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

5040 
	#GL_YCBCR_MESA
 0x8757

	)

5043 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


5044 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

5045 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

5046 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

5047 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

5050 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


5053 #i‚de‡
GL_NV_‰agmít_¥ogøm2


5054 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

5055 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

5056 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

5057 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

5058 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

5061 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


5066 #i‚de‡
GL_NV_vîãx_¥ogøm3


5070 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


5071 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

5072 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

5073 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

5074 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

5075 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

5076 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

5077 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

5078 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

5079 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

5080 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

5081 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

5082 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

5083 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

5084 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

5085 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

5086 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

5087 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

5088 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

5089 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

5090 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

5091 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

5092 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

5093 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

5094 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

5095 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

5096 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

5097 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

5098 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

5099 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

5100 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

5101 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

5102 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

5103 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

5104 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

5105 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

5106 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

5107 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

5108 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

5109 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

5110 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

5111 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

5112 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

5113 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

5114 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

5115 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

5116 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

5117 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

5118 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

5119 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

5120 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

5121 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

5124 #i‚de‡
GL_GREMEDY_°rög_m¨kî


5127 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


5128 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

5129 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

5130 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

5131 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

5134 #i‚de‡
GL_EXT_°ícû_˛ór_èg


5135 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

5136 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

5139 #i‚de‡
GL_EXT_ãxtuª_sRGB


5140 
	#GL_SRGB_EXT
 0x8C40

	)

5141 
	#GL_SRGB8_EXT
 0x8C41

	)

5142 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

5143 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

5144 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

5145 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

5146 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

5147 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

5148 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

5149 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

5150 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

5151 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

5152 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

5153 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

5154 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

5155 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

5158 #i‚de‡
GL_EXT_‰amebuf„r_blô


5159 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

5160 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

5161 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 
GL_FRAMEBUFFER_BINDING_EXT


	)

5162 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

5165 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


5166 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

5167 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

5168 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

5171 #i‚de‡
GL_MESAX_ãxtuª_°ack


5172 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

5173 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

5174 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

5175 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

5176 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

5177 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

5180 #i‚de‡
GL_EXT_timî_quîy


5181 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

5184 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


5187 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5188 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5189 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5192 #i‚de‡
GL_NV_gpu_¥ogøm4


5193 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

5194 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

5195 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

5196 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

5197 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

5198 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

5199 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

5200 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

5203 #i‚de‡
GL_NV_geomëry_¥ogøm4


5204 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

5205 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

5206 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

5207 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

5208 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

5209 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

5210 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

5211 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

5212 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

5213 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

5214 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

5215 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

5216 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

5217 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

5218 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

5219 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

5222 #i‚de‡
GL_EXT_geomëry_shadî4


5223 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

5228 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

5229 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

5230 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

5231 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

5232 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

5233 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

5245 #i‚de‡
GL_NV_vîãx_¥ogøm4


5246 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

5249 #i‚de‡
GL_EXT_gpu_shadî4


5250 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

5251 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

5252 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

5253 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

5254 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

5255 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

5256 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

5257 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

5258 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

5259 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

5260 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

5261 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

5262 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

5263 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

5264 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

5265 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

5266 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

5267 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

5268 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

5269 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

5270 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

5271 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

5272 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

5273 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

5274 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

5277 #i‚de‡
GL_EXT_døw_ö°™˚d


5280 #i‚de‡
GL_EXT_∑cked_Êﬂt


5281 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

5282 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

5283 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

5286 #i‚de‡
GL_EXT_ãxtuª_¨øy


5287 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

5288 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

5289 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

5290 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

5291 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

5292 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

5293 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

5294 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

5298 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


5299 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

5300 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

5301 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

5302 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

5303 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

5306 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


5307 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

5308 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

5309 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

5310 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

5313 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


5314 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

5315 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

5316 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

5317 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

5320 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


5321 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

5322 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

5323 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

5326 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


5327 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

5328 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

5329 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

5330 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

5333 #i‚de‡
GL_NV_‰agmít_¥ogøm4


5336 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


5337 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

5338 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

5339 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

5340 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

5343 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


5344 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

5345 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

5348 #i‚de‡
GL_NV_geomëry_shadî4


5351 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


5352 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

5353 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

5354 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

5355 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

5356 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

5359 #i‚de‡
GL_EXT_døw_buf„rs2


5362 #i‚de‡
GL_NV_å™sf‹m_„edback


5363 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

5364 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

5365 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

5366 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

5367 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

5368 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

5369 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

5370 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

5371 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

5372 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

5373 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

5374 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

5375 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

5376 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

5377 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

5378 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

5379 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

5380 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

5381 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

5382 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

5383 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

5384 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

5385 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

5386 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

5387 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

5388 
	#GL_LAYER_NV
 0x8DAA

	)

5389 
	#GL_NEXT_BUFFER_NV
 -2

	)

5390 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

5391 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

5392 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

5393 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

5396 #i‚de‡
GL_EXT_bödabÀ_unif‹m


5397 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

5398 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

5399 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

5400 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

5401 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

5402 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

5405 #i‚de‡
GL_EXT_ãxtuª_öãgî


5406 
	#GL_RGBA32UI_EXT
 0x8D70

	)

5407 
	#GL_RGB32UI_EXT
 0x8D71

	)

5408 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

5409 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

5410 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

5411 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

5412 
	#GL_RGBA16UI_EXT
 0x8D76

	)

5413 
	#GL_RGB16UI_EXT
 0x8D77

	)

5414 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

5415 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

5416 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

5417 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

5418 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

5419 
	#GL_RGB8UI_EXT
 0x8D7D

	)

5420 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

5421 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

5422 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

5423 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

5424 
	#GL_RGBA32I_EXT
 0x8D82

	)

5425 
	#GL_RGB32I_EXT
 0x8D83

	)

5426 
	#GL_ALPHA32I_EXT
 0x8D84

	)

5427 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

5428 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

5429 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

5430 
	#GL_RGBA16I_EXT
 0x8D88

	)

5431 
	#GL_RGB16I_EXT
 0x8D89

	)

5432 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

5433 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

5434 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

5435 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

5436 
	#GL_RGBA8I_EXT
 0x8D8E

	)

5437 
	#GL_RGB8I_EXT
 0x8D8F

	)

5438 
	#GL_ALPHA8I_EXT
 0x8D90

	)

5439 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

5440 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

5441 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

5442 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

5443 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

5444 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

5445 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

5446 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

5447 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

5448 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

5449 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

5450 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

5451 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

5452 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

5455 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


5458 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


5459 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

5460 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

5461 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

5462 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

5465 #i‚de‡
GL_NV_¥e£¡_video


5466 
	#GL_FRAME_NV
 0x8E26

	)

5467 
	#GL_FIELDS_NV
 0x8E27

	)

5468 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

5469 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

5470 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

5471 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

5474 #i‚de‡
GL_EXT_å™sf‹m_„edback


5475 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

5476 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

5477 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

5478 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

5479 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

5480 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

5481 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

5482 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

5483 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

5484 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

5485 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

5486 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

5487 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

5488 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

5489 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

5492 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


5493 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

5494 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

5495 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

5498 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


5502 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


5503 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

5504 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

5505 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

5506 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

5507 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

5510 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


5511 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

5512 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

5513 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

5514 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

5515 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

5516 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

5517 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

5518 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

5519 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

5520 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

5523 #i‚de‡
GL_NV_å™sf‹m_„edback2


5524 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

5525 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

5526 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

5527 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

5530 #i‚de‡
GL_ATI_memöfo


5531 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

5532 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

5533 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

5536 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5537 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5538 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5539 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5540 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5541 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5542 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5543 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5546 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5549 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


5550 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5551 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5552 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5553 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5554 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5555 
	#GL_DISCRETE_AMD
 0x9006

	)

5556 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5559 #i‚de‡
GL_EXT_¥ovokög_vîãx


5560 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

5561 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

5562 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

5563 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

5566 #i‚de‡
GL_EXT_ãxtuª_¢‹m


5567 
	#GL_ALPHA_SNORM
 0x9010

	)

5568 
	#GL_LUMINANCE_SNORM
 0x9011

	)

5569 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

5570 
	#GL_INTENSITY_SNORM
 0x9013

	)

5571 
	#GL_ALPHA8_SNORM
 0x9014

	)

5572 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

5573 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

5574 
	#GL_INTENSITY8_SNORM
 0x9017

	)

5575 
	#GL_ALPHA16_SNORM
 0x9018

	)

5576 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

5577 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

5578 
	#GL_INTENSITY16_SNORM
 0x901B

	)

5594 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5597 #i‚de‡
GL_APPLE_ãxtuª_ønge


5598 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5599 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5600 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5601 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5606 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5607 
	#GL_HALF_APPLE
 0x140B

	)

5608 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5609 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5610 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5611 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5612 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5613 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5614 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5615 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5616 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5617 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5618 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5619 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5620 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5623 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5624 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5625 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5626 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5627 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5628 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5629 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5630 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5631 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5632 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5633 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5636 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5637 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5640 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5641 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5642 
	#GL_RELEASED_APPLE
 0x8A19

	)

5643 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5644 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5645 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5646 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5649 #i‚de‡
GL_APPLE_row_byãs


5650 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5651 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5654 #i‚de‡
GL_APPLE_rgb_422


5655 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5660 #i‚de‡
GL_NV_video_ˇ±uª


5661 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

5662 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

5663 
	#GL_FIELD_UPPER_NV
 0x9022

	)

5664 
	#GL_FIELD_LOWER_NV
 0x9023

	)

5665 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

5666 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

5667 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

5668 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

5669 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

5670 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

5671 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

5672 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

5673 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

5674 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

5675 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

5676 
	#GL_SUCCESS_NV
 0x902F

	)

5677 
	#GL_FAILURE_NV
 0x9030

	)

5678 
	#GL_YCBYCR8_422_NV
 0x9031

	)

5679 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

5680 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

5681 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

5682 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

5683 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

5684 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

5685 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

5686 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

5687 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

5688 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

5689 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

5692 #i‚de‡
GL_NV_c›y_image


5695 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


5696 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

5699 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


5702 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


5703 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

5704 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

5705 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

5708 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


5709 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

5710 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

5711 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

5712 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

5713 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

5714 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

5715 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

5716 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

5717 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

5718 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

5719 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

5720 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

5721 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

5722 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

5723 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

5724 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

5725 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

5726 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

5727 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

5728 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

5729 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

5730 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

5731 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

5732 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

5733 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

5736 #i‚de‡
GL_NV_ãxtuª_b¨rõr


5739 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5742 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5746 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5749 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


5750 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

5751 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

5752 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

5753 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

5754 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

5755 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

5756 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

5757 
	#GL_IMAGE_1D_EXT
 0x904C

	)

5758 
	#GL_IMAGE_2D_EXT
 0x904D

	)

5759 
	#GL_IMAGE_3D_EXT
 0x904E

	)

5760 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

5761 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

5762 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

5763 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

5764 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

5765 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

5766 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

5767 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

5768 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

5769 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

5770 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

5771 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

5772 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

5773 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

5774 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

5775 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

5776 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

5777 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

5778 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

5779 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

5780 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

5781 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

5782 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

5783 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

5784 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

5785 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

5786 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

5787 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

5788 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

5789 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

5790 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

5791 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

5792 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

5793 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

5794 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

5795 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

5796 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

5797 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

5798 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

5799 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

5800 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

5801 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

5802 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

5803 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

5804 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

5807 #i‚de‡
GL_EXT_vîãx_©åib_64bô


5809 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

5810 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

5811 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

5812 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

5813 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

5814 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

5815 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

5816 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

5817 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

5818 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

5819 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

5820 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

5823 #i‚de‡
GL_NV_gpu_¥ogøm5


5824 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

5825 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

5826 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

5827 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

5828 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

5829 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

5830 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

5831 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

5834 #i‚de‡
GL_NV_gpu_shadî5


5835 
	#GL_INT64_NV
 0x140E

	)

5836 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5837 
	#GL_INT8_NV
 0x8FE0

	)

5838 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5839 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5840 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5841 
	#GL_INT16_NV
 0x8FE4

	)

5842 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5843 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5844 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5845 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5846 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5847 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5848 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5849 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5850 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5851 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5852 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5853 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5854 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5855 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5856 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5857 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5858 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5859 
	#GL_FLOAT16_NV
 0x8FF8

	)

5860 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5861 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5862 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5866 #i‚de‡
GL_NV_shadî_buf„r_°‹e


5867 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

5872 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


5873 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

5874 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

5875 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

5876 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

5877 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

5880 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


5885 #i‚de‡
GL_NV_mu…ißm∂e_covîage


5886 
	#GL_COVERAGE_SAMPLES_NV
 0x80A9

	)

5887 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

5890 #i‚de‡
GL_AMD_«me_gí_dñëe


5891 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5892 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5893 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5894 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5895 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5898 #i‚de‡
GL_AMD_debug_ouçut


5899 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5900 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5901 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5902 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5903 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5904 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5905 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5906 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5907 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5908 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5909 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5910 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5911 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5912 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5915 #i‚de‡
GL_NV_vd∑u_öãr›


5916 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

5917 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

5918 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

5919 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

5922 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5925 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5926 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5927 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5930 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


5931 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

5932 
	#GL_DECODE_EXT
 0x8A49

	)

5933 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

5936 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


5937 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

5938 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

5941 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5942 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5943 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5946 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5947 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5950 #i‚de‡
GL_EXT_x11_sync_obje˘


5951 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

5954 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5957 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


5958 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

5959 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

5962 #i‚de‡
GL_NV_∑th_ªndîög


5963 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

5964 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

5965 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

5966 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

5967 
	#GL_FILE_NAME_NV
 0x9074

	)

5968 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

5969 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

5970 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

5971 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

5972 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

5973 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

5974 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

5975 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

5976 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

5977 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

5978 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

5979 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

5980 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

5981 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

5982 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

5983 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

5984 
	#GL_PATH_SAMPLE_QUALITY_NV
 0x9085

	)

5985 
	#GL_PATH_STROKE_BOUND_NV
 0x9086

	)

5986 
	#GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
 0x9087

	)

5987 
	#GL_COUNT_UP_NV
 0x9088

	)

5988 
	#GL_COUNT_DOWN_NV
 0x9089

	)

5989 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

5990 
	#GL_CONVEX_HULL_NV
 0x908B

	)

5991 
	#GL_MULTI_HULLS_NV
 0x908C

	)

5992 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

5993 
	#GL_TRANSLATE_X_NV
 0x908E

	)

5994 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

5995 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

5996 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

5997 
	#GL_AFFINE_2D_NV
 0x9092

	)

5998 
	#GL_PROJECTIVE_2D_NV
 0x9093

	)

5999 
	#GL_AFFINE_3D_NV
 0x9094

	)

6000 
	#GL_PROJECTIVE_3D_NV
 0x9095

	)

6001 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

6002 
	#GL_TRANSPOSE_PROJECTIVE_2D_NV
 0x9097

	)

6003 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

6004 
	#GL_TRANSPOSE_PROJECTIVE_3D_NV
 0x9099

	)

6005 
	#GL_UTF8_NV
 0x909A

	)

6006 
	#GL_UTF16_NV
 0x909B

	)

6007 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

6008 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

6009 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

6010 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

6011 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

6012 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

6013 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

6014 
	#GL_SQUARE_NV
 0x90A3

	)

6015 
	#GL_ROUND_NV
 0x90A4

	)

6016 
	#GL_TRIANGULAR_NV
 0x90A5

	)

6017 
	#GL_BEVEL_NV
 0x90A6

	)

6018 
	#GL_MITER_REVERT_NV
 0x90A7

	)

6019 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

6020 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

6021 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

6022 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

6023 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

6024 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

6025 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

6026 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

6027 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

6028 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

6029 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

6030 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

6031 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

6032 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

6033 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

6034 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

6035 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

6036 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

6037 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

6038 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

6039 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

6040 
	#GL_CLOSE_PATH_NV
 0x00

	)

6041 
	#GL_MOVE_TO_NV
 0x02

	)

6042 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

6043 
	#GL_LINE_TO_NV
 0x04

	)

6044 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

6045 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

6046 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

6047 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

6048 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

6049 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

6050 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

6051 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

6052 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

6053 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

6054 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

6055 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

6056 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

6057 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

6058 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

6059 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

6060 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

6061 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

6062 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

6063 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

6064 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

6065 
	#GL_RESTART_PATH_NV
 0xF0

	)

6066 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

6067 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

6068 
	#GL_RECT_NV
 0xF6

	)

6069 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

6070 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

6071 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

6072 
	#GL_ARC_TO_NV
 0xFE

	)

6073 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

6074 
	#GL_BOLD_BIT_NV
 0x01

	)

6075 
	#GL_ITALIC_BIT_NV
 0x02

	)

6076 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

6077 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

6078 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

6079 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

6080 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

6081 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

6082 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

6083 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

6084 
	#GL_GLYPH_HAS_KERNING_NV
 0x100

	)

6085 
	#GL_FONT_X_MIN_BOUNDS_NV
 0x00010000

	)

6086 
	#GL_FONT_Y_MIN_BOUNDS_NV
 0x00020000

	)

6087 
	#GL_FONT_X_MAX_BOUNDS_NV
 0x00040000

	)

6088 
	#GL_FONT_Y_MAX_BOUNDS_NV
 0x00080000

	)

6089 
	#GL_FONT_UNITS_PER_EM_NV
 0x00100000

	)

6090 
	#GL_FONT_ASCENDER_NV
 0x00200000

	)

6091 
	#GL_FONT_DESCENDER_NV
 0x00400000

	)

6092 
	#GL_FONT_HEIGHT_NV
 0x00800000

	)

6093 
	#GL_FONT_MAX_ADVANCE_WIDTH_NV
 0x01000000

	)

6094 
	#GL_FONT_MAX_ADVANCE_HEIGHT_NV
 0x02000000

	)

6095 
	#GL_FONT_UNDERLINE_POSITION_NV
 0x04000000

	)

6096 
	#GL_FONT_UNDERLINE_THICKNESS_NV
 0x08000000

	)

6097 
	#GL_FONT_HAS_KERNING_NV
 0x10000000

	)

6100 #i‚de‡
GL_AMD_pö√d_mem‹y


6101 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

6104 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


6105 
	#GL_SET_AMD
 0x874A

	)

6106 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

6107 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

6108 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

6111 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


6114 #i‚de‡
GL_AMD_vîãx_shadî_œyî


6117 #i‚de‡
GL_NV_bödÀss_ãxtuª


6120 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


6123 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


6124 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

6125 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

6126 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

6129 #i‚de‡
GL_AMD_•¨£_ãxtuª


6130 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

6131 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

6132 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

6133 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

6134 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

6135 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

6136 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

6137 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

6138 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

6144 
	~<°ddef.h
>

6145 #i‚de‡
GL_VERSION_2_0


6147 
	tGLch¨
;

6150 #i‚de‡
GL_VERSION_1_5


6152 
±rdiff_t
 
	tGLöçå
;

6153 
±rdiff_t
 
	tGLsizeùå
;

6156 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


6158 
±rdiff_t
 
	tGLöçåARB
;

6159 
±rdiff_t
 
	tGLsizeùåARB
;

6162 #i‚de‡
GL_ARB_shadî_obje˘s


6164 
	tGLch¨ARB
;

6165 
	tGLh™dÀARB
;

6169 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


6170 
	tGLhÆfARB
;

6173 #i‚de‡
GL_NV_hÆf_Êﬂt


6174 
	tGLhÆfNV
;

6177 #i‚de‡
GLEXT_64_TYPES_DEFINED


6179 
	#GLEXT_64_TYPES_DEFINED


	)

6182 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

6183 
	~<öây≥s.h
>

6184 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

6185 
	~<öây≥s.h
>

6186 #i‡
deföed
(
__STDC__
)

6187 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

6188 
	töt64_t
;

6189 
	tuöt64_t
;

6191 
	töt64_t
;

6192 
	tuöt64_t
;

6195 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

6196 
	~<öây≥s.h
>

6197 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

6198 
	~<°döt.h
>

6199 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

6200 
	töt32_t
;

6201 
	töt64_t
;

6202 
	tuöt64_t
;

6203 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

6204 
	~<°döt.h
>

6205 #ñi‡
deföed
(
_WIN32
)

6206 
__öt32
 
	töt32_t
;

6207 
__öt64
 
	töt64_t
;

6208 
	t__öt64
 
	tuöt64_t
;

6211 
	~<öây≥s.h
>

6215 #i‚de‡
GL_EXT_timî_quîy


6216 
öt64_t
 
	tGLöt64EXT
;

6217 
uöt64_t
 
	tGLuöt64EXT
;

6220 #i‚de‡
GL_ARB_sync


6221 
öt64_t
 
	tGLöt64
;

6222 
uöt64_t
 
	tGLuöt64
;

6223 
__GLsync
 *
	tGLsync
;

6226 #i‚de‡
GL_ARB_˛_evít


6228 
	g_˛_c⁄ãxt
;

6229 
	g_˛_evít
;

6232 #i‚de‡
GL_ARB_debug_ouçut


6233 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6236 #i‚de‡
GL_AMD_debug_ouçut


6237 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6240 #i‚de‡
GL_KHR_debug


6241 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6244 #i‚de‡
GL_NV_vd∑u_öãr›


6245 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

6248 #i‚de‡
GL_VERSION_1_2


6249 
	#GL_VERSION_1_2
 1

	)

6250 #ifde‡
GL_GLEXT_PROTOTYPES


6251 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6252 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

6253 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

6254 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6255 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6256 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6257 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

6258 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6259 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6260 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6261 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

6262 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6263 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6264 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

6265 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6266 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6267 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6268 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6269 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6270 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6271 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6272 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6273 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6274 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

6275 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6276 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6277 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

6278 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

6279 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6280 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6281 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6282 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6283 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6284 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6285 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6286 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6287 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

6288 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

6290 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6291 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

6292 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

6293 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6294 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6295 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6296 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

6297 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6298 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6299 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6300 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

6301 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6302 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6303 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

6304 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6305 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6306 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6307 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6308 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6309 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6310 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6311 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6312 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6313 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

6314 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6315 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6316 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

6317 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

6318 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6319 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6320 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6321 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6322 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6323 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6324 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6325 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6326 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

6327 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

6330 #i‚de‡
GL_VERSION_1_3


6331 
	#GL_VERSION_1_3
 1

	)

6332 #ifde‡
GL_GLEXT_PROTOTYPES


6333 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

6334 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

6335 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6336 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6337 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6338 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6339 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6340 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6341 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

6342 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

6343 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

6344 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6345 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

6346 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6347 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

6348 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6349 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

6350 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6351 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

6352 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6353 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

6354 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6355 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

6356 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6357 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

6358 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6359 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

6360 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6361 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

6362 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6363 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

6364 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6365 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

6366 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6367 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

6368 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6369 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

6370 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6371 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

6372 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6373 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

6374 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6375 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6376 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6377 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6378 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6380 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6381 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6382 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6383 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6384 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6385 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6386 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6387 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6388 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

6389 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6390 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

6391 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6392 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

6393 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6394 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

6395 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6396 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

6397 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6398 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

6399 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6400 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

6401 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6402 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

6403 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6404 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

6405 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6406 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

6407 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6408 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

6409 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6410 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

6411 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6412 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

6413 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6414 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

6415 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6416 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

6417 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6418 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

6419 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6420 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

6421 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6422 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6423 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6424 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6425 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6428 #i‚de‡
GL_VERSION_1_4


6429 
	#GL_VERSION_1_4
 1

	)

6430 #ifde‡
GL_GLEXT_PROTOTYPES


6431 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6432 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

6433 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
);

6434 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6435 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6436 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6437 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6438 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

6439 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

6440 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

6441 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

6442 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

6444 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

6445 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

6446 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6447 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

6448 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6449 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

6450 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

6451 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

6452 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

6453 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

6454 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

6455 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

6456 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

6457 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

6458 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

6459 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6460 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6461 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

6462 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

6463 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

6464 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

6465 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

6466 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

6467 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

6468 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6469 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6470 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6471 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6472 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

6473 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

6474 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6475 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

6477 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6478 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

6479 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
);

6480 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6481 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6482 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6483 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6484 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6485 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6486 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6487 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6488 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6489 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

6490 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6491 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

6492 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6493 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

6494 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6495 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

6496 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6497 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

6498 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6499 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

6500 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

6501 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

6502 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

6503 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

6504 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

6505 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6506 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6507 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6508 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6509 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6510 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

6511 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6512 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6513 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6514 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6515 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6516 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6517 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6518 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6519 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6520 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6521 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6524 #i‚de‡
GL_VERSION_1_5


6525 
	#GL_VERSION_1_5
 1

	)

6526 #ifde‡
GL_GLEXT_PROTOTYPES


6527 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

6528 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

6529 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

6530 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

6531 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

6532 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6533 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6534 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6535 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

6536 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

6537 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

6538 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

6539 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

6540 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

6541 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

6542 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

6543 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

6544 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6545 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

6547 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6548 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6549 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

6550 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6551 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

6552 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6553 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6554 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6555 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

6556 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

6557 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

6558 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6559 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

6560 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

6561 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

6562 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

6563 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

6564 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6565 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

6568 #i‚de‡
GL_VERSION_2_0


6569 
	#GL_VERSION_2_0
 1

	)

6570 #ifde‡
GL_GLEXT_PROTOTYPES


6571 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6572 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

6573 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6574 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6575 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

6576 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6577 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

6578 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

6579 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

6580 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

6581 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

6582 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

6583 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6584 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6585 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6586 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6587 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6588 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
obj
);

6589 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6590 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6591 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6592 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6593 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6594 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

6595 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6596 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

6597 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

6598 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6599 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6600 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6601 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

6602 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

6603 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

6604 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

6605 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rög
, c⁄° 
GLöt
 *
Àngth
);

6606 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

6607 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

6608 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

6609 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

6610 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

6611 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

6612 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

6613 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

6614 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

6615 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6616 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6617 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6618 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6619 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6620 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6621 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6622 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6623 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6624 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6625 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6626 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

6627 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

6628 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6629 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

6630 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6631 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

6632 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6633 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6634 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6635 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6636 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6637 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6638 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6639 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6640 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6641 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6642 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6643 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6644 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6645 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6646 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6647 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6648 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

6649 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6650 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6651 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6652 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6653 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6654 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6655 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6656 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6657 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6658 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6659 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6660 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6661 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6662 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6663 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6665 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6666 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6667 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6668 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6669 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

6670 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6671 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

6672 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6673 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

6674 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

6675 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6676 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6677 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6678 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6679 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6680 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6681 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6682 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

6683 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6684 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6685 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6686 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6688 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

6689 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6690 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

6691 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

6692 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6693 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6694 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6695 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

6696 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6697 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6698 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6699 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

6700 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6701 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6702 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6703 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6704 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6705 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6706 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6707 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6708 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6709 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6710 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6711 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6712 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6713 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6714 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6715 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6716 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6717 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6718 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6719 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6720 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

6724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

6726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

6743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6760 #i‚de‡
GL_VERSION_2_1


6761 
	#GL_VERSION_2_1
 1

	)

6762 #ifde‡
GL_GLEXT_PROTOTYPES


6763 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6764 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6765 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6766 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6767 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6768 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6772 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6773 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6778 #i‚de‡
GL_VERSION_3_0


6779 
	#GL_VERSION_3_0
 1

	)

6784 #ifde‡
GL_GLEXT_PROTOTYPES


6785 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

6786 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6787 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6788 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6789 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6790 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6791 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

6792 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

6793 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

6794 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

6795 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
v¨yögs
, 
GLíum
 
buf„rMode
);

6796 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6797 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

6798 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

6799 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

6800 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6801 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6802 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6803 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

6804 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

6805 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6806 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6807 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

6808 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

6809 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

6810 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

6811 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6812 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6813 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6814 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6815 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6816 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6817 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6818 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6819 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6820 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6821 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6822 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6823 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

6824 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

6825 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6826 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

6827 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

6828 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

6829 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6830 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6831 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6832 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6833 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6834 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6835 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

6836 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6837 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

6838 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

6839 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

6840 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

6841 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

6842 
GLAPI
 c⁄° 
GLubyã
 * 
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

6844 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

6845 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6846 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6847 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6848 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6849 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6850 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

6851 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

6852 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6853 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

6854 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

6855 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6856 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

6857 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

6858 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

6859 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6860 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6861 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6862 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

6863 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6864 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6865 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6866 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

6867 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

6868 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

6869 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6870 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6871 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6872 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6873 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6874 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6875 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6876 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6877 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6878 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6879 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6880 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6881 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6882 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

6883 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

6884 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6885 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

6886 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

6887 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6888 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6889 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6890 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6891 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6892 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6893 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6894 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6895 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6896 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6897 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

6898 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6899 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6900 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

6901 c⁄° 
	tGLubyã
 * (
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

6904 #i‚de‡
GL_VERSION_3_1


6905 
	#GL_VERSION_3_1
 1

	)

6909 #ifde‡
GL_GLEXT_PROTOTYPES


6910 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

6911 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

6912 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

6913 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

6915 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

6916 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

6917 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6918 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

6921 #i‚de‡
GL_VERSION_3_2


6922 
	#GL_VERSION_3_2
 1

	)

6928 #ifde‡
GL_GLEXT_PROTOTYPES


6929 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

6930 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6933 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

6934 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

6935 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6938 #i‚de‡
GL_VERSION_3_3


6939 
	#GL_VERSION_3_3
 1

	)

6950 #ifde‡
GL_GLEXT_PROTOTYPES


6951 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

6953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

6956 #i‚de‡
GL_VERSION_4_0


6957 
	#GL_VERSION_4_0
 1

	)

6970 #ifde‡
GL_GLEXT_PROTOTYPES


6971 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

6972 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

6973 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6974 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

6975 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

6977 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

6978 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

6979 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6980 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

6981 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

6984 #i‚de‡
GL_VERSION_4_1


6985 
	#GL_VERSION_4_1
 1

	)

6995 #i‚de‡
GL_VERSION_4_2


6996 
	#GL_VERSION_4_2
 1

	)

7011 #i‚de‡
GL_VERSION_4_3


7012 
	#GL_VERSION_4_3
 1

	)

7038 #i‚de‡
GL_ARB_mu…ôextuª


7039 
	#GL_ARB_mu…ôextuª
 1

	)

7040 #ifde‡
GL_GLEXT_PROTOTYPES


7041 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7042 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7043 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

7044 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7045 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

7046 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7047 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

7048 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7049 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

7050 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7051 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

7052 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7053 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

7054 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7055 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

7056 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7057 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

7058 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7059 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

7060 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7061 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

7062 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7063 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

7064 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7065 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

7066 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7067 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

7068 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7069 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

7070 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7071 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

7072 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7073 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

7074 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7076 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7077 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7078 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

7079 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7080 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

7081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7082 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

7083 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7084 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

7085 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7086 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

7087 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7088 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

7089 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7090 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

7091 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7092 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

7093 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7094 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

7095 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7096 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

7097 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7098 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

7099 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7100 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

7101 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7102 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

7103 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7104 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

7105 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7106 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

7107 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7108 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

7109 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7112 #i‚de‡
GL_ARB_å™•o£_m©rix


7113 
	#GL_ARB_å™•o£_m©rix
 1

	)

7114 #ifde‡
GL_GLEXT_PROTOTYPES


7115 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7116 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7117 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7118 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7120 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7121 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7122 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7123 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7126 #i‚de‡
GL_ARB_mu…ißm∂e


7127 
	#GL_ARB_mu…ißm∂e
 1

	)

7128 #ifde‡
GL_GLEXT_PROTOTYPES


7129 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

7131 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7134 #i‚de‡
GL_ARB_ãxtuª_ív_add


7135 
	#GL_ARB_ãxtuª_ív_add
 1

	)

7138 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


7139 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

7142 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


7143 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

7144 #ifde‡
GL_GLEXT_PROTOTYPES


7145 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7146 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7147 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7148 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7149 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7150 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7151 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

7153 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7154 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7155 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7156 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7157 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7158 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7159 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

7162 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


7163 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

7166 #i‚de‡
GL_ARB_poöt_∑ømëîs


7167 
	#GL_ARB_poöt_∑ømëîs
 1

	)

7168 #ifde‡
GL_GLEXT_PROTOTYPES


7169 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7170 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7172 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7173 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7176 #i‚de‡
GL_ARB_vîãx_bÀnd


7177 
	#GL_ARB_vîãx_bÀnd
 1

	)

7178 #ifde‡
GL_GLEXT_PROTOTYPES


7179 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

7180 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

7181 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

7182 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

7183 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

7184 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

7185 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

7186 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

7187 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7188 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

7190 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

7191 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

7192 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

7193 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

7194 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

7195 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

7196 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

7197 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

7198 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7199 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

7202 #i‚de‡
GL_ARB_m©rix_∑Àâe


7203 
	#GL_ARB_m©rix_∑Àâe
 1

	)

7204 #ifde‡
GL_GLEXT_PROTOTYPES


7205 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

7206 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

7207 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

7208 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

7209 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7211 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

7212 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

7213 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

7214 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

7215 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7218 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


7219 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

7222 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


7223 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

7226 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


7227 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

7230 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


7231 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

7234 #i‚de‡
GL_ARB_dïth_ãxtuª


7235 
	#GL_ARB_dïth_ãxtuª
 1

	)

7238 #i‚de‡
GL_ARB_shadow


7239 
	#GL_ARB_shadow
 1

	)

7242 #i‚de‡
GL_ARB_shadow_ambõ¡


7243 
	#GL_ARB_shadow_ambõ¡
 1

	)

7246 #i‚de‡
GL_ARB_wödow_pos


7247 
	#GL_ARB_wödow_pos
 1

	)

7248 #ifde‡
GL_GLEXT_PROTOTYPES


7249 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7250 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7251 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

7252 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7253 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

7254 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

7255 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

7256 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

7257 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7258 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7259 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7260 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7261 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

7262 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

7263 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7264 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

7266 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7267 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7268 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7269 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7270 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

7271 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7272 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7273 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7274 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7275 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7276 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7277 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7278 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7279 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7280 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7281 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7284 #i‚de‡
GL_ARB_vîãx_¥ogøm


7285 
	#GL_ARB_vîãx_¥ogøm
 1

	)

7286 #ifde‡
GL_GLEXT_PROTOTYPES


7287 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

7288 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7289 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

7290 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7291 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

7292 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7293 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7294 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7295 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

7296 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7297 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

7298 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7299 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7300 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7301 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7302 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7303 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7304 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7305 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7306 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7307 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7308 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

7309 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7310 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7311 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7312 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7313 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7314 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7315 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7316 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7317 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7318 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

7319 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7320 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7321 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7322 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7323 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7324 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7325 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7326 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

7327 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

7328 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

7329 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

7330 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7331 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7332 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7333 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7334 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7335 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7336 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7337 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7338 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7339 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7340 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7341 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7342 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7343 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

7344 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

7345 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7346 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7347 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

7348 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

7350 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7351 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7352 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

7353 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7354 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

7355 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7356 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7357 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7358 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7359 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7360 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7361 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7362 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7363 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7365 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7366 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7367 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7368 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7369 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7370 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7371 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

7372 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7373 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7374 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7375 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7376 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7377 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7378 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7379 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7380 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7381 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7382 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7383 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7384 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7385 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7386 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7387 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7388 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7389 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

7390 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

7391 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

7392 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

7393 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7394 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7395 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7396 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7397 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7398 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7399 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7400 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7401 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7402 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7403 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7404 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7405 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7406 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

7407 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7408 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7409 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7410 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

7411 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7414 #i‚de‡
GL_ARB_‰agmít_¥ogøm


7415 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

7419 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


7420 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

7421 #ifde‡
GL_GLEXT_PROTOTYPES


7422 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

7423 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

7424 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

7425 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

7426 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

7427 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
);

7428 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, 
GLvoid
 *
d©a
);

7429 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

7430 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

7431 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7432 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

7434 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

7435 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

7436 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

7437 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7438 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

7439 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

7440 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

7441 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

7442 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7443 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7444 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

7447 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


7448 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

7449 #ifde‡
GL_GLEXT_PROTOTYPES


7450 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

7451 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

7452 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

7453 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

7454 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

7455 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7456 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7457 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

7459 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

7460 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

7461 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

7462 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

7463 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7464 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7465 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7466 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7469 #i‚de‡
GL_ARB_shadî_obje˘s


7470 
	#GL_ARB_shadî_obje˘s
 1

	)

7471 #ifde‡
GL_GLEXT_PROTOTYPES


7472 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

7473 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

7474 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

7475 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

7476 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
* *
°rög
, c⁄° 
GLöt
 *
Àngth
);

7477 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

7478 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

7479 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

7480 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7481 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

7482 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7483 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7484 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7485 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7486 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7487 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

7488 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7489 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7490 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7491 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7492 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7493 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7494 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7495 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7496 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7497 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7498 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7499 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7500 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7501 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7502 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7503 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7504 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

7505 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

7506 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7507 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7508 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

7509 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

7510 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

7512 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

7513 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

7514 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

7515 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

7516 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

7517 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

7518 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

7519 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

7520 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7521 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7522 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7523 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

7524 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

7525 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

7526 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

7527 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

7528 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

7529 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

7530 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

7531 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7532 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7533 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7534 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7535 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7536 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7537 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7538 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7539 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7540 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7541 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7542 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7543 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7544 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

7545 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

7546 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7547 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7548 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

7549 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

7550 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

7553 #i‚de‡
GL_ARB_vîãx_shadî


7554 
	#GL_ARB_vîãx_shadî
 1

	)

7555 #ifde‡
GL_GLEXT_PROTOTYPES


7556 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

7557 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7558 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7560 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7561 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7562 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7565 #i‚de‡
GL_ARB_‰agmít_shadî


7566 
	#GL_ARB_‰agmít_shadî
 1

	)

7569 #i‚de‡
GL_ARB_shadög_œnguage_100


7570 
	#GL_ARB_shadög_œnguage_100
 1

	)

7573 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


7574 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

7577 #i‚de‡
GL_ARB_poöt_•rôe


7578 
	#GL_ARB_poöt_•rôe
 1

	)

7581 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


7582 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

7585 #i‚de‡
GL_ARB_døw_buf„rs


7586 
	#GL_ARB_døw_buf„rs
 1

	)

7587 #ifde‡
GL_GLEXT_PROTOTYPES


7588 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7590 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

7593 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


7594 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

7597 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


7598 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

7599 #ifde‡
GL_GLEXT_PROTOTYPES


7600 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

7602 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

7605 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


7606 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

7609 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


7610 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

7613 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


7614 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

7617 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


7618 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

7621 #i‚de‡
GL_ARB_døw_ö°™˚d


7622 
	#GL_ARB_døw_ö°™˚d
 1

	)

7623 #ifde‡
GL_GLEXT_PROTOTYPES


7624 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7625 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

7627 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7628 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7631 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


7632 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

7633 #ifde‡
GL_GLEXT_PROTOTYPES


7634 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

7635 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7636 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7637 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7638 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7639 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7640 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

7641 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7642 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7643 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7644 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

7645 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7646 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7647 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7648 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7649 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7650 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

7651 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7652 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7653 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7655 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7656 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7657 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7658 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7659 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7660 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7661 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7662 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7663 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7664 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7665 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

7666 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7667 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7668 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7669 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7670 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7671 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

7672 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7673 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7674 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7677 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


7678 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

7681 #i‚de‡
GL_ARB_geomëry_shadî4


7682 
	#GL_ARB_geomëry_shadî4
 1

	)

7683 #ifde‡
GL_GLEXT_PROTOTYPES


7684 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7685 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7686 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7687 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7689 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7690 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7691 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7692 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

7695 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


7696 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

7699 #i‚de‡
GL_ARB_ö°™˚d_¨øys


7700 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

7701 #ifde‡
GL_GLEXT_PROTOTYPES


7702 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

7704 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

7707 #i‚de‡
GL_ARB_m≠_buf„r_ønge


7708 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

7709 #ifde‡
GL_GLEXT_PROTOTYPES


7710 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7711 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7713 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

7714 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

7717 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


7718 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

7719 #ifde‡
GL_GLEXT_PROTOTYPES


7720 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7722 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7725 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


7726 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

7729 #i‚de‡
GL_ARB_ãxtuª_rg


7730 
	#GL_ARB_ãxtuª_rg
 1

	)

7733 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


7734 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

7735 #ifde‡
GL_GLEXT_PROTOTYPES


7736 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

7737 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

7738 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

7739 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

7741 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7742 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

7743 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

7744 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7747 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


7748 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

7749 #ifde‡
GL_GLEXT_PROTOTYPES


7750 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
* c⁄° *
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

7751 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7752 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

7753 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

7754 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7755 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

7756 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

7758 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

7759 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7760 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

7761 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

7762 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7763 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

7764 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

7767 #i‚de‡
GL_ARB_com∑tibûôy


7768 
	#GL_ARB_com∑tibûôy
 1

	)

7771 #i‚de‡
GL_ARB_c›y_buf„r


7772 
	#GL_ARB_c›y_buf„r
 1

	)

7773 #ifde‡
GL_GLEXT_PROTOTYPES


7774 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7776 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

7779 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


7780 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

7783 #i‚de‡
GL_ARB_dïth_˛amp


7784 
	#GL_ARB_dïth_˛amp
 1

	)

7787 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


7788 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

7789 #ifde‡
GL_GLEXT_PROTOTYPES


7790 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7791 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7792 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

7793 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

7795 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7796 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7797 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

7798 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

7801 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


7802 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

7805 #i‚de‡
GL_ARB_¥ovokög_vîãx


7806 
	#GL_ARB_¥ovokög_vîãx
 1

	)

7807 #ifde‡
GL_GLEXT_PROTOTYPES


7808 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

7810 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

7813 #i‚de‡
GL_ARB_£amÀss_cube_m≠


7814 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

7817 #i‚de‡
GL_ARB_sync


7818 
	#GL_ARB_sync
 1

	)

7819 #ifde‡
GL_GLEXT_PROTOTYPES


7820 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

7821 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

7822 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

7823 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7824 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7825 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7826 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

7828 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

7829 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

7830 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

7831 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7832 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7833 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7834 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

7837 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


7838 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

7839 #ifde‡
GL_GLEXT_PROTOTYPES


7840 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7841 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7842 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

7843 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

7845 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7846 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7847 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

7848 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

7851 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


7852 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

7855 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


7856 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

7857 #ifde‡
GL_GLEXT_PROTOTYPES


7858 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

7859 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

7860 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

7861 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

7863 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

7864 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7865 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

7866 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

7869 #i‚de‡
GL_ARB_ßm∂e_shadög


7870 
	#GL_ARB_ßm∂e_shadög
 1

	)

7871 #ifde‡
GL_GLEXT_PROTOTYPES


7872 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

7874 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

7877 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


7878 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

7881 #i‚de‡
GL_ARB_ãxtuª_g©hî


7882 
	#GL_ARB_ãxtuª_g©hî
 1

	)

7885 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


7886 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

7889 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


7890 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

7891 #ifde‡
GL_GLEXT_PROTOTYPES


7892 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

7893 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7894 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
∑th
, c⁄° 
GLöt
 *
Àngth
);

7895 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7896 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

7897 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

7899 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

7900 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7901 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

7902 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7903 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

7904 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

7907 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


7908 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

7911 #i‚de‡
GL_ARB_bÀnd_func_exãnded


7912 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

7913 #ifde‡
GL_GLEXT_PROTOTYPES


7914 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

7915 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7917 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

7918 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7921 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


7922 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

7925 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


7926 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

7929 #i‚de‡
GL_ARB_ßm∂î_obje˘s


7930 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

7931 #ifde‡
GL_GLEXT_PROTOTYPES


7932 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

7933 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

7934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

7935 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

7936 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7937 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

7938 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7939 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

7940 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

7941 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

7942 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7943 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7944 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7945 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

7947 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

7948 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

7949 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

7950 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

7951 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7952 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

7953 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7954 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

7955 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

7956 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

7957 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7958 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7959 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7960 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7963 #i‚de‡
GL_ARB_shadî_bô_ícodög


7964 
	#GL_ARB_shadî_bô_ícodög
 1

	)

7967 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


7968 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

7971 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


7972 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

7975 #i‚de‡
GL_ARB_timî_quîy


7976 
	#GL_ARB_timî_quîy
 1

	)

7977 #ifde‡
GL_GLEXT_PROTOTYPES


7978 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

7979 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7980 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

7982 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

7983 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7984 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

7987 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


7988 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

7989 #ifde‡
GL_GLEXT_PROTOTYPES


7990 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7991 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7992 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7993 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7994 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7995 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7996 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

7997 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

7998 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

7999 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8000 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8001 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8002 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8003 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8004 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8005 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8006 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8007 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8008 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8009 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8010 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8011 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8012 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8013 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8014 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8015 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8016 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8017 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8018 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8019 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8020 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8021 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8022 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8023 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8024 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8025 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8026 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8027 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8029 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8030 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8031 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8032 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8033 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8034 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8035 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8036 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8037 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8038 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8039 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8040 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8041 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8042 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8044 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8045 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8046 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8047 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8048 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8049 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8050 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8051 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8052 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8053 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8054 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8055 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8056 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8057 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8058 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8059 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8060 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8061 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8062 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8063 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8064 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8065 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8066 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8069 #i‚de‡
GL_ARB_døw_ödúe˘


8070 
	#GL_ARB_døw_ödúe˘
 1

	)

8071 #ifde‡
GL_GLEXT_PROTOTYPES


8072 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
);

8073 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
);

8075 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8076 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8079 #i‚de‡
GL_ARB_gpu_shadî5


8080 
	#GL_ARB_gpu_shadî5
 1

	)

8083 #i‚de‡
GL_ARB_gpu_shadî_Â64


8084 
	#GL_ARB_gpu_shadî_Â64
 1

	)

8085 #ifde‡
GL_GLEXT_PROTOTYPES


8086 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

8087 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8088 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8089 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8090 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8091 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8092 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8093 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8094 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8095 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8096 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8097 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8098 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8099 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8100 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8101 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8102 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8103 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

8105 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

8106 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8107 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8108 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8109 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8110 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8111 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8112 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8113 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8114 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8118 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8119 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8120 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8121 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8122 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

8125 #i‚de‡
GL_ARB_shadî_subroutöe


8126 
	#GL_ARB_shadî_subroutöe
 1

	)

8127 #ifde‡
GL_GLEXT_PROTOTYPES


8128 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8129 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8130 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8131 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8132 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8133 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

8134 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

8135 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8137 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8138 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8139 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8140 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8141 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8142 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

8143 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

8144 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8147 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


8148 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

8149 #ifde‡
GL_GLEXT_PROTOTYPES


8150 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8151 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

8153 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8154 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

8157 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


8158 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

8161 #i‚de‡
GL_ARB_å™sf‹m_„edback2


8162 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

8163 #ifde‡
GL_GLEXT_PROTOTYPES


8164 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

8165 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

8166 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

8167 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

8168 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

8169 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

8170 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

8172 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

8173 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

8174 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

8175 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

8176 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

8177 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

8178 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

8181 #i‚de‡
GL_ARB_å™sf‹m_„edback3


8182 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

8183 #ifde‡
GL_GLEXT_PROTOTYPES


8184 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

8185 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

8186 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

8187 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8189 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

8190 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

8191 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8192 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8195 #i‚de‡
GL_ARB_ES2_com∑tibûôy


8196 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

8197 #ifde‡
GL_GLEXT_PROTOTYPES


8198 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

8199 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
 *
bö¨y
, GLsizeò
Àngth
);

8200 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

8201 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

8202 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

8204 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

8205 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, GLsizeò
	tÀngth
);

8206 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

8207 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

8208 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

8211 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


8212 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

8213 #ifde‡
GL_GLEXT_PROTOTYPES


8214 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

8215 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLsizei
 
Àngth
);

8216 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8218 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

8219 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

8220 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8223 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


8224 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

8225 #ifde‡
GL_GLEXT_PROTOTYPES


8226 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

8227 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

8228 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rögs
);

8229 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

8230 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

8231 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

8232 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

8233 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8234 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

8235 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8236 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

8237 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8238 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

8239 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8240 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

8241 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8242 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

8243 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8244 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

8245 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8246 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

8247 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8248 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

8249 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8250 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

8251 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8252 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

8253 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8254 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

8255 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8256 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

8257 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8258 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

8259 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8260 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

8261 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8262 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

8263 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8264 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

8265 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8266 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8267 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8268 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8269 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8270 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8271 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8272 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8273 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8274 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8275 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8276 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8277 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8278 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8279 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8280 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8281 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8282 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8283 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8284 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

8285 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

8287 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

8288 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

8289 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rögs
);

8290 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8291 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

8292 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

8293 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8294 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8295 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

8296 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8297 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

8298 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8299 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

8300 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8301 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

8302 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8303 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

8304 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8305 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

8306 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8307 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

8308 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8309 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

8310 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8311 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

8312 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8313 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

8314 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8315 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

8316 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8317 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8318 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8319 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

8320 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8321 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

8322 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8323 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

8324 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8325 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8326 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8327 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8328 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8329 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8330 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8331 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8332 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8333 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8334 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8335 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8336 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8337 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8338 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8339 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8340 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8341 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8342 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8343 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8344 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8345 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8346 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

8349 #i‚de‡
GL_ARB_vîãx_©åib_64bô


8350 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

8351 #ifde‡
GL_GLEXT_PROTOTYPES


8352 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8353 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8354 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8355 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8356 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8357 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8358 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8359 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8360 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

8361 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8363 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8365 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8366 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8367 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8368 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8369 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8370 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8371 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8372 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8375 #i‚de‡
GL_ARB_võwp‹t_¨øy


8376 
	#GL_ARB_võwp‹t_¨øy
 1

	)

8377 #ifde‡
GL_GLEXT_PROTOTYPES


8378 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

8379 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

8380 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

8381 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

8382 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

8383 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

8384 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

8385 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

8386 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

8387 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

8389 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8390 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

8391 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8392 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

8393 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8394 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8395 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8396 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

8397 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

8398 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

8401 #i‚de‡
GL_ARB_˛_evít


8402 
	#GL_ARB_˛_evít
 1

	)

8403 #ifde‡
GL_GLEXT_PROTOTYPES


8404 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 * 
c⁄ãxt
, 
_˛_evít
 * 
evít
, 
GLbôfõld
 
Êags
);

8406 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 * 
	tc⁄ãxt
, 
	t_˛_evít
 * 
	tevít
, 
	tGLbôfõld
 
	tÊags
);

8409 #i‚de‡
GL_ARB_debug_ouçut


8410 
	#GL_ARB_debug_ouçut
 1

	)

8411 #ifde‡
GL_GLEXT_PROTOTYPES


8412 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8413 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8414 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° 
GLvoid
 *
u£rP¨am
);

8415 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8417 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8418 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8419 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° 
	tGLvoid
 *
	tu£rP¨am
);

8420 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8423 #i‚de‡
GL_ARB_robu°√ss


8424 
	#GL_ARB_robu°√ss
 1

	)

8425 #ifde‡
GL_GLEXT_PROTOTYPES


8426 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

8427 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

8428 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

8429 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

8430 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

8431 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

8432 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

8433 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

8434 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
èbÀ
);

8435 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
image
);

8436 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, 
GLvoid
 *
row
, GLsizeò
cﬁumnBufSize
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8437 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8438 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8439 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8440 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, 
GLvoid
 *
d©a
);

8441 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8442 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

8443 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

8444 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

8445 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

8447 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

8448 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

8449 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

8450 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

8451 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

8452 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

8453 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

8454 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

8455 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tèbÀ
);

8456 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timage
);

8457 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, 
	tGLvoid
 *
	trow
, GLsizeò
	tcﬁumnBufSize
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8458 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8459 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8460 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8461 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, 
	tGLvoid
 *
	td©a
);

8462 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8463 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

8464 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

8465 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

8466 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

8469 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


8470 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

8473 #i‚de‡
GL_ARB_ba£_ö°™˚


8474 
	#GL_ARB_ba£_ö°™˚
 1

	)

8475 #ifde‡
GL_GLEXT_PROTOTYPES


8476 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8477 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8478 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

8480 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8481 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8482 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

8485 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


8486 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

8489 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


8490 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

8491 #ifde‡
GL_GLEXT_PROTOTYPES


8492 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

8493 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

8495 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

8496 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

8499 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


8500 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

8503 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


8504 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

8507 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


8508 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

8509 #ifde‡
GL_GLEXT_PROTOTYPES


8510 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

8512 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

8515 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


8516 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

8519 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


8520 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

8521 #ifde‡
GL_GLEXT_PROTOTYPES


8522 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8524 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8527 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


8528 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

8529 #ifde‡
GL_GLEXT_PROTOTYPES


8530 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

8531 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

8533 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

8534 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

8537 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


8538 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

8541 #i‚de‡
GL_ARB_ãxtuª_°‹age


8542 
	#GL_ARB_ãxtuª_°‹age
 1

	)

8543 #ifde‡
GL_GLEXT_PROTOTYPES


8544 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8545 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8546 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8547 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8548 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8549 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8551 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8552 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8553 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8554 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8555 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8556 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8559 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


8560 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

8563 #i‚de‡
GL_KHR_debug


8564 
	#GL_KHR_debug
 1

	)

8565 #ifde‡
GL_GLEXT_PROTOTYPES


8566 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8567 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8568 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

8569 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8570 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

8571 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

8572 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8573 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8574 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8575 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8577 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8578 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8579 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

8580 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8581 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

8582 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

8583 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8584 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8585 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8586 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8589 #i‚de‡
GL_ARB_¨øys_of_¨øys


8590 
	#GL_ARB_¨øys_of_¨øys
 1

	)

8593 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


8594 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

8595 #ifde‡
GL_GLEXT_PROTOTYPES


8596 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8597 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8598 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8599 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, c⁄° *
d©a
);

8601 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8602 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8603 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8604 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, c⁄° *
	td©a
);

8607 #i‚de‡
GL_ARB_compuã_shadî


8608 
	#GL_ARB_compuã_shadî
 1

	)

8609 #ifde‡
GL_GLEXT_PROTOTYPES


8610 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

8611 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

8613 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

8614 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

8617 #i‚de‡
GL_ARB_c›y_image


8618 
	#GL_ARB_c›y_image
 1

	)

8619 #ifde‡
GL_GLEXT_PROTOTYPES


8620 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

8622 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

8625 #i‚de‡
GL_ARB_ãxtuª_võw


8626 
	#GL_ARB_ãxtuª_võw
 1

	)

8627 #ifde‡
GL_GLEXT_PROTOTYPES


8628 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

8630 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

8633 #i‚de‡
GL_ARB_vîãx_©åib_bödög


8634 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

8635 #ifde‡
GL_GLEXT_PROTOTYPES


8636 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8637 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8638 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8639 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8640 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

8641 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

8642 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8643 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8644 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8645 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8646 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

8647 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

8649 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

8654 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

8655 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8656 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8657 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8658 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8659 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

8660 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

8663 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


8664 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

8667 #i‚de‡
GL_ARB_ES3_com∑tibûôy


8668 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

8671 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


8672 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

8675 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


8676 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

8679 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


8680 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

8681 #ifde‡
GL_GLEXT_PROTOTYPES


8682 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8683 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8684 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

8685 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8687 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8688 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8689 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8690 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8693 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


8694 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

8695 #ifde‡
GL_GLEXT_PROTOTYPES


8696 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

8698 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

8701 #i‚de‡
GL_ARB_övÆid©e_subd©a


8702 
	#GL_ARB_övÆid©e_subd©a
 1

	)

8703 #ifde‡
GL_GLEXT_PROTOTYPES


8704 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

8705 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8706 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

8707 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

8708 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

8709 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

8711 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8712 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8713 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

8714 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8715 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

8716 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

8719 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


8720 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

8721 #ifde‡
GL_GLEXT_PROTOTYPES


8722 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8723 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8725 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8726 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8729 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


8730 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

8731 #ifde‡
GL_GLEXT_PROTOTYPES


8732 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8733 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8734 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8735 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

8736 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8737 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8739 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8740 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8741 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8742 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

8743 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8744 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8747 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


8748 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

8751 #i‚de‡
GL_ARB_shadî_image_size


8752 
	#GL_ARB_shadî_image_size
 1

	)

8755 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


8756 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

8757 #ifde‡
GL_GLEXT_PROTOTYPES


8758 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

8760 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

8763 #i‚de‡
GL_ARB_°ícû_ãxturög


8764 
	#GL_ARB_°ícû_ãxturög
 1

	)

8767 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


8768 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

8769 #ifde‡
GL_GLEXT_PROTOTYPES


8770 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8771 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8773 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8774 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8777 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


8778 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

8781 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


8782 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

8783 #ifde‡
GL_GLEXT_PROTOTYPES


8784 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8785 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8786 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8787 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8789 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8790 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8791 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8792 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8795 #i‚de‡
GL_EXT_abgr


8796 
	#GL_EXT_abgr
 1

	)

8799 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


8800 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

8801 #ifde‡
GL_GLEXT_PROTOTYPES


8802 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

8804 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

8807 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


8808 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

8809 #ifde‡
GL_GLEXT_PROTOTYPES


8810 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

8812 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

8815 #i‚de‡
GL_EXT_ãxtuª


8816 
	#GL_EXT_ãxtuª
 1

	)

8819 #i‚de‡
GL_EXT_ãxtuª3D


8820 
	#GL_EXT_ãxtuª3D
 1

	)

8821 #ifde‡
GL_GLEXT_PROTOTYPES


8822 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8823 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8825 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8826 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8829 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


8830 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

8831 #ifde‡
GL_GLEXT_PROTOTYPES


8832 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

8833 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

8835 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

8836 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

8839 #i‚de‡
GL_EXT_subãxtuª


8840 
	#GL_EXT_subãxtuª
 1

	)

8841 #ifde‡
GL_GLEXT_PROTOTYPES


8842 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8843 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8845 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8846 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8849 #i‚de‡
GL_EXT_c›y_ãxtuª


8850 
	#GL_EXT_c›y_ãxtuª
 1

	)

8851 #ifde‡
GL_GLEXT_PROTOTYPES


8852 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

8853 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

8854 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

8855 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8856 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8858 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8859 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8860 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8861 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8862 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8865 #i‚de‡
GL_EXT_hi°ogøm


8866 
	#GL_EXT_hi°ogøm
 1

	)

8867 #ifde‡
GL_GLEXT_PROTOTYPES


8868 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8869 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8870 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8871 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8872 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8873 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8874 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8875 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8876 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

8877 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

8879 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8880 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8881 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8882 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8883 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8884 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8885 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8886 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8887 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8888 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8891 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


8892 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

8893 #ifde‡
GL_GLEXT_PROTOTYPES


8894 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8895 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8896 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

8897 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8898 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

8899 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8900 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

8901 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8902 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

8903 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8904 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8905 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8906 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

8908 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8909 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8910 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

8911 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8912 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

8913 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8914 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8915 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8916 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

8917 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8918 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8919 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8920 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

8923 #i‚de‡
GL_SGI_cﬁ‹_m©rix


8924 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

8927 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


8928 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

8929 #ifde‡
GL_GLEXT_PROTOTYPES


8930 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

8931 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8932 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8933 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

8934 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

8935 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8936 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8938 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

8939 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8940 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8941 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8942 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

8943 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8944 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8947 #i‚de‡
GL_SGIX_pixñ_ãxtuª


8948 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

8949 #ifde‡
GL_GLEXT_PROTOTYPES


8950 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

8952 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

8955 #i‚de‡
GL_SGIS_pixñ_ãxtuª


8956 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

8957 #ifde‡
GL_GLEXT_PROTOTYPES


8958 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

8959 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8960 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

8961 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8962 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8963 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8965 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8966 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8967 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8968 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8969 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8970 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8973 #i‚de‡
GL_SGIS_ãxtuª4D


8974 
	#GL_SGIS_ãxtuª4D
 1

	)

8975 #ifde‡
GL_GLEXT_PROTOTYPES


8976 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8977 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8979 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8980 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8983 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


8984 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

8987 #i‚de‡
GL_EXT_cmyka


8988 
	#GL_EXT_cmyka
 1

	)

8991 #i‚de‡
GL_EXT_ãxtuª_obje˘


8992 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8993 #ifde‡
GL_GLEXT_PROTOTYPES


8994 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8995 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8996 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8997 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8998 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8999 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

9001 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

9002 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

9003 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

9004 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

9005 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9006 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

9009 #i‚de‡
GL_SGIS_dëaû_ãxtuª


9010 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

9011 #ifde‡
GL_GLEXT_PROTOTYPES


9012 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9013 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9015 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9016 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9019 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


9020 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

9021 #ifde‡
GL_GLEXT_PROTOTYPES


9022 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9023 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9025 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9026 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9029 #i‚de‡
GL_EXT_∑cked_pixñs


9030 
	#GL_EXT_∑cked_pixñs
 1

	)

9033 #i‚de‡
GL_SGIS_ãxtuª_lod


9034 
	#GL_SGIS_ãxtuª_lod
 1

	)

9037 #i‚de‡
GL_SGIS_mu…ißm∂e


9038 
	#GL_SGIS_mu…ißm∂e
 1

	)

9039 #ifde‡
GL_GLEXT_PROTOTYPES


9040 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

9041 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

9043 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

9044 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

9047 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


9048 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

9051 #i‚de‡
GL_EXT_vîãx_¨øy


9052 
	#GL_EXT_vîãx_¨øy
 1

	)

9053 #ifde‡
GL_GLEXT_PROTOTYPES


9054 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

9055 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9056 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9057 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

9058 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

9059 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9060 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9061 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9062 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9064 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

9065 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9066 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9067 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

9068 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

9069 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9070 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9071 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9072 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9075 #i‚de‡
GL_EXT_misc_©åibuã


9076 
	#GL_EXT_misc_©åibuã
 1

	)

9079 #i‚de‡
GL_SGIS_gíî©e_mùm≠


9080 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

9083 #i‚de‡
GL_SGIX_˛ùm≠


9084 
	#GL_SGIX_˛ùm≠
 1

	)

9087 #i‚de‡
GL_SGIX_shadow


9088 
	#GL_SGIX_shadow
 1

	)

9091 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


9092 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

9095 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


9096 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

9099 #i‚de‡
GL_EXT_bÀnd_mömax


9100 
	#GL_EXT_bÀnd_mömax
 1

	)

9101 #ifde‡
GL_GLEXT_PROTOTYPES


9102 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

9104 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

9107 #i‚de‡
GL_EXT_bÀnd_subåa˘


9108 
	#GL_EXT_bÀnd_subåa˘
 1

	)

9111 #i‚de‡
GL_EXT_bÀnd_logic_›


9112 
	#GL_EXT_bÀnd_logic_›
 1

	)

9115 #i‚de‡
GL_SGIX_öãæa˚


9116 
	#GL_SGIX_öãæa˚
 1

	)

9119 #i‚de‡
GL_SGIX_pixñ_tûes


9120 
	#GL_SGIX_pixñ_tûes
 1

	)

9123 #i‚de‡
GL_SGIX_ãxtuª_£À˘


9124 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

9127 #i‚de‡
GL_SGIX_•rôe


9128 
	#GL_SGIX_•rôe
 1

	)

9129 #ifde‡
GL_GLEXT_PROTOTYPES


9130 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9131 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9132 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9133 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9135 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9136 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9137 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9138 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9141 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


9142 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

9145 #i‚de‡
GL_EXT_poöt_∑ømëîs


9146 
	#GL_EXT_poöt_∑ømëîs
 1

	)

9147 #ifde‡
GL_GLEXT_PROTOTYPES


9148 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9149 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9151 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9152 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9155 #i‚de‡
GL_SGIS_poöt_∑ømëîs


9156 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

9157 #ifde‡
GL_GLEXT_PROTOTYPES


9158 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9159 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9161 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9162 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9165 #i‚de‡
GL_SGIX_ö°rumíts


9166 
	#GL_SGIX_ö°rumíts
 1

	)

9167 #ifde‡
GL_GLEXT_PROTOTYPES


9168 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

9169 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

9170 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

9171 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

9172 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

9173 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

9175 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

9176 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

9177 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

9178 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9179 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

9180 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9183 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


9184 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

9187 #i‚de‡
GL_SGIX_‰amezoom


9188 
	#GL_SGIX_‰amezoom
 1

	)

9189 #ifde‡
GL_GLEXT_PROTOTYPES


9190 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

9192 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9195 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


9196 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

9197 #ifde‡
GL_GLEXT_PROTOTYPES


9198 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

9200 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

9203 #i‚de‡
GL_SGIX_pﬁynomül_ffd


9204 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

9205 #ifde‡
GL_GLEXT_PROTOTYPES


9206 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

9207 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

9208 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

9209 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

9211 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

9212 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

9213 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9214 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9217 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


9218 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

9219 #ifde‡
GL_GLEXT_PROTOTYPES


9220 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

9222 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

9225 #i‚de‡
GL_SGIX_Êush_ø°î


9226 
	#GL_SGIX_Êush_ø°î
 1

	)

9227 #ifde‡
GL_GLEXT_PROTOTYPES


9228 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

9230 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

9233 #i‚de‡
GL_SGIX_dïth_ãxtuª


9234 
	#GL_SGIX_dïth_ãxtuª
 1

	)

9237 #i‚de‡
GL_SGIS_fog_fun˘i⁄


9238 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

9239 #ifde‡
GL_GLEXT_PROTOTYPES


9240 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9241 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

9243 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9244 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

9247 #i‚de‡
GL_SGIX_fog_off£t


9248 
	#GL_SGIX_fog_off£t
 1

	)

9251 #i‚de‡
GL_HP_image_å™sf‹m


9252 
	#GL_HP_image_å™sf‹m
 1

	)

9253 #ifde‡
GL_GLEXT_PROTOTYPES


9254 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9255 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9256 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9257 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9258 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9259 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9261 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9262 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9263 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9264 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9265 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9266 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9269 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


9270 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9273 #i‚de‡
GL_SGIX_ãxtuª_add_ív


9274 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

9277 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


9278 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

9281 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

9283 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

9284 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

9287 #i‚de‡
GL_PGI_vîãx_höts


9288 
	#GL_PGI_vîãx_höts
 1

	)

9291 #i‚de‡
GL_PGI_misc_höts


9292 
	#GL_PGI_misc_höts
 1

	)

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

9296 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

9299 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


9300 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

9301 #ifde‡
GL_GLEXT_PROTOTYPES


9302 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

9303 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
d©a
);

9304 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9305 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9307 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

9308 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

9309 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9310 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9313 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


9314 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

9317 #i‚de‡
GL_SGIX_li°_¥i‹ôy


9318 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

9319 #ifde‡
GL_GLEXT_PROTOTYPES


9320 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9321 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9322 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9323 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9324 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9325 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9327 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9328 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9329 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9330 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9331 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9332 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9335 #i‚de‡
GL_SGIX_ú_ö°rumít1


9336 
	#GL_SGIX_ú_ö°rumít1
 1

	)

9339 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


9340 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

9343 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


9344 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

9347 #i‚de‡
GL_SGIX_shadow_ambõ¡


9348 
	#GL_SGIX_shadow_ambõ¡
 1

	)

9351 #i‚de‡
GL_EXT_ödex_ãxtuª


9352 
	#GL_EXT_ödex_ãxtuª
 1

	)

9355 #i‚de‡
GL_EXT_ödex_m©îül


9356 
	#GL_EXT_ödex_m©îül
 1

	)

9357 #ifde‡
GL_GLEXT_PROTOTYPES


9358 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9360 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9363 #i‚de‡
GL_EXT_ödex_func


9364 
	#GL_EXT_ödex_func
 1

	)

9365 #ifde‡
GL_GLEXT_PROTOTYPES


9366 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

9368 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

9371 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


9372 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

9375 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


9376 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

9377 #ifde‡
GL_GLEXT_PROTOTYPES


9378 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9379 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

9381 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9382 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

9385 #i‚de‡
GL_EXT_cuŒ_vîãx


9386 
	#GL_EXT_cuŒ_vîãx
 1

	)

9387 #ifde‡
GL_GLEXT_PROTOTYPES


9388 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

9389 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9391 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9392 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9395 #i‚de‡
GL_SGIX_y¸cb


9396 
	#GL_SGIX_y¸cb
 1

	)

9399 #i‚de‡
GL_SGIX_‰agmít_lightög


9400 
	#GL_SGIX_‰agmít_lightög
 1

	)

9401 #ifde‡
GL_GLEXT_PROTOTYPES


9402 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

9403 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9404 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9405 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9406 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9407 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9408 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9409 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9410 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9411 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9412 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9413 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9414 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9415 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9416 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9417 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9418 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9419 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9421 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9422 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9423 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9424 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9425 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9426 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9427 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9428 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9429 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9430 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9431 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9432 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9433 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9434 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9435 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9436 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9437 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9438 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9441 #i‚de‡
GL_IBM_ø°îpos_˛ù


9442 
	#GL_IBM_ø°îpos_˛ù
 1

	)

9445 #i‚de‡
GL_HP_ãxtuª_lightög


9446 
	#GL_HP_ãxtuª_lightög
 1

	)

9449 #i‚de‡
GL_EXT_døw_ønge_ñemíts


9450 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

9451 #ifde‡
GL_GLEXT_PROTOTYPES


9452 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

9454 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

9457 #i‚de‡
GL_WIN_ph⁄g_shadög


9458 
	#GL_WIN_ph⁄g_shadög
 1

	)

9461 #i‚de‡
GL_WIN_•ecuœr_fog


9462 
	#GL_WIN_•ecuœr_fog
 1

	)

9465 #i‚de‡
GL_EXT_light_ãxtuª


9466 
	#GL_EXT_light_ãxtuª
 1

	)

9467 #ifde‡
GL_GLEXT_PROTOTYPES


9468 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

9469 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

9470 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9472 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

9473 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

9474 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9477 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


9478 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

9481 #i‚de‡
GL_EXT_bgø


9482 
	#GL_EXT_bgø
 1

	)

9485 #i‚de‡
GL_SGIX_async


9486 
	#GL_SGIX_async
 1

	)

9487 #ifde‡
GL_GLEXT_PROTOTYPES


9488 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9489 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9490 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9491 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

9492 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

9493 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9495 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9496 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9497 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9498 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

9499 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

9500 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9503 #i‚de‡
GL_SGIX_async_pixñ


9504 
	#GL_SGIX_async_pixñ
 1

	)

9507 #i‚de‡
GL_SGIX_async_hi°ogøm


9508 
	#GL_SGIX_async_hi°ogøm
 1

	)

9511 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


9512 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

9513 #ifde‡
GL_GLEXT_PROTOTYPES


9514 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9515 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9516 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9517 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9519 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9520 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9521 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9522 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9525 #i‚de‡
GL_HP_oc˛usi⁄_ã°


9526 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

9529 #i‚de‡
GL_EXT_pixñ_å™sf‹m


9530 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

9531 #ifde‡
GL_GLEXT_PROTOTYPES


9532 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9533 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9534 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9535 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9536 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9537 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9539 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9540 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9541 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9542 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9543 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9544 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9547 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


9548 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

9551 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


9552 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

9555 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


9556 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

9559 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


9560 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

9561 #ifde‡
GL_GLEXT_PROTOTYPES


9562 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

9563 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9564 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

9565 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9566 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

9567 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9568 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

9569 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

9570 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

9571 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9572 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

9573 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

9574 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

9575 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

9576 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

9577 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

9578 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9580 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

9581 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9582 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

9583 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9584 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

9585 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9586 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

9587 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9588 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

9589 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9590 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

9591 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

9592 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

9593 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

9594 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

9595 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

9596 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9599 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


9600 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

9601 #ifde‡
GL_GLEXT_PROTOTYPES


9602 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

9604 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

9607 #i‚de‡
GL_EXT_mu…i_døw_¨øys


9608 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

9609 #ifde‡
GL_GLEXT_PROTOTYPES


9610 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

9611 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

9613 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

9614 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

9617 #i‚de‡
GL_EXT_fog_co‹d


9618 
	#GL_EXT_fog_co‹d
 1

	)

9619 #ifde‡
GL_GLEXT_PROTOTYPES


9620 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

9621 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

9622 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

9623 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

9624 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9626 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

9627 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

9628 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

9629 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

9630 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9633 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


9634 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

9637 #i‚de‡
GL_EXT_co‹dö©e_‰ame


9638 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

9639 #ifde‡
GL_GLEXT_PROTOTYPES


9640 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

9641 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9642 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

9643 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9644 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

9645 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9646 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

9647 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

9648 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

9649 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9650 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

9651 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9652 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

9653 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9654 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

9655 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9656 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

9657 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

9658 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

9659 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9660 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9661 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9663 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

9664 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9665 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

9666 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9667 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

9668 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9669 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

9670 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9671 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

9672 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9673 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

9674 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9675 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

9676 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9677 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

9678 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9679 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

9680 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9681 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

9682 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9683 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9684 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9687 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


9688 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

9691 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


9692 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

9695 #i‚de‡
GL_APPLE_å™sf‹m_höt


9696 
	#GL_APPLE_å™sf‹m_höt
 1

	)

9699 #i‚de‡
GL_SGIX_fog_sˇÀ


9700 
	#GL_SGIX_fog_sˇÀ
 1

	)

9703 #i‚de‡
GL_SUNX_c⁄°™t_d©a


9704 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

9705 #ifde‡
GL_GLEXT_PROTOTYPES


9706 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

9708 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

9711 #i‚de‡
GL_SUN_globÆ_Æpha


9712 
	#GL_SUN_globÆ_Æpha
 1

	)

9713 #ifde‡
GL_GLEXT_PROTOTYPES


9714 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

9715 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

9716 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

9717 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

9718 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

9719 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

9720 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

9721 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

9723 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

9724 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

9725 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9726 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

9727 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

9728 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

9729 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

9730 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

9733 #i‚de‡
GL_SUN_åüngÀ_li°


9734 
	#GL_SUN_åüngÀ_li°
 1

	)

9735 #ifde‡
GL_GLEXT_PROTOTYPES


9736 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

9737 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

9738 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

9739 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

9740 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

9741 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

9742 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* *
poöãr
);

9744 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

9745 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

9746 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

9747 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

9748 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

9749 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

9750 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9753 #i‚de‡
GL_SUN_vîãx


9754 
	#GL_SUN_vîãx
 1

	)

9755 #ifde‡
GL_GLEXT_PROTOTYPES


9756 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9757 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9758 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9759 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9760 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9761 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9762 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9763 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9764 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9765 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9766 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9767 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9768 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9769 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9770 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9771 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

9772 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9773 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

9774 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9775 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9776 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9777 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9778 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9779 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9780 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9781 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

9782 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9783 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9784 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9785 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9786 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9787 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9788 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9789 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9790 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9791 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9792 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9793 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9794 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9795 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9797 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9798 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9799 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9800 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9801 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9802 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9803 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9804 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9805 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9806 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9807 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9808 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9809 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9810 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9811 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9812 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9813 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9814 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

9815 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9816 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9817 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9818 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9819 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9820 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9821 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9822 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9823 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9824 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9825 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9826 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9827 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9828 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9829 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9830 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9831 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9832 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9833 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9834 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9835 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9836 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9839 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


9840 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

9841 #ifde‡
GL_GLEXT_PROTOTYPES


9842 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9844 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9847 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


9848 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

9849 #ifde‡
GL_GLEXT_PROTOTYPES


9850 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9852 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9855 #i‚de‡
GL_INGR_cﬁ‹_˛amp


9856 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

9859 #i‚de‡
GL_INGR_öãæa˚_ªad


9860 
	#GL_INGR_öãæa˚_ªad
 1

	)

9863 #i‚de‡
GL_EXT_°ícû_wøp


9864 
	#GL_EXT_°ícû_wøp
 1

	)

9867 #i‚de‡
GL_EXT_422_pixñs


9868 
	#GL_EXT_422_pixñs
 1

	)

9871 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


9872 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

9875 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


9876 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9879 #i‚de‡
GL_EXT_ãxtuª_ív_add


9880 
	#GL_EXT_ãxtuª_ív_add
 1

	)

9883 #i‚de‡
GL_EXT_ãxtuª_lod_büs


9884 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

9887 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


9888 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

9891 #i‚de‡
GL_EXT_vîãx_weightög


9892 
	#GL_EXT_vîãx_weightög
 1

	)

9893 #ifde‡
GL_GLEXT_PROTOTYPES


9894 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

9895 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

9896 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9898 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

9899 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

9900 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9903 #i‚de‡
GL_NV_light_max_exp⁄ít


9904 
	#GL_NV_light_max_exp⁄ít
 1

	)

9907 #i‚de‡
GL_NV_vîãx_¨øy_ønge


9908 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

9909 #ifde‡
GL_GLEXT_PROTOTYPES


9910 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

9911 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

9913 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

9914 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9917 #i‚de‡
GL_NV_ªgi°î_comböîs


9918 
	#GL_NV_ªgi°î_comböîs
 1

	)

9919 #ifde‡
GL_GLEXT_PROTOTYPES


9920 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9921 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9922 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9923 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9924 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9925 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

9926 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9927 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9928 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9929 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9930 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9931 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9932 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9934 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9935 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9936 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9937 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9938 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9939 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

9940 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9941 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9942 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9943 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9944 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9945 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9946 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9949 #i‚de‡
GL_NV_fog_di°™˚


9950 
	#GL_NV_fog_di°™˚
 1

	)

9953 #i‚de‡
GL_NV_ãxgí_emboss


9954 
	#GL_NV_ãxgí_emboss
 1

	)

9957 #i‚de‡
GL_NV_bÀnd_squ¨e


9958 
	#GL_NV_bÀnd_squ¨e
 1

	)

9961 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


9962 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

9965 #i‚de‡
GL_MESA_ªsize_buf„rs


9966 
	#GL_MESA_ªsize_buf„rs
 1

	)

9967 #ifde‡
GL_GLEXT_PROTOTYPES


9968 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

9970 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

9973 #i‚de‡
GL_MESA_wödow_pos


9974 
	#GL_MESA_wödow_pos
 1

	)

9975 #ifde‡
GL_GLEXT_PROTOTYPES


9976 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

9977 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9978 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

9979 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9980 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

9981 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

9982 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

9983 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9984 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

9985 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9986 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9987 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9988 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

9989 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

9990 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

9991 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9992 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9993 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9994 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9995 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9996 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9997 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

9998 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9999 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

10001 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10002 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10003 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10004 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10005 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

10006 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10007 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10008 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10009 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10010 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10011 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10012 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10013 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10014 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10015 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10016 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10017 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10018 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10019 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10020 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10021 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10022 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10023 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10024 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10027 #i‚de‡
GL_IBM_cuŒ_vîãx


10028 
	#GL_IBM_cuŒ_vîãx
 1

	)

10031 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


10032 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

10033 #ifde‡
GL_GLEXT_PROTOTYPES


10034 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

10035 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

10037 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

10038 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

10041 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


10042 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

10043 #ifde‡
GL_GLEXT_PROTOTYPES


10044 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10045 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10046 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
* *
poöãr
, GLöà
±r°ride
);

10047 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10048 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10049 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10050 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10051 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10053 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10054 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10055 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

10056 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10057 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10058 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10059 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10060 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10063 #i‚de‡
GL_SGIX_subßm∂e


10064 
	#GL_SGIX_subßm∂e
 1

	)

10067 #i‚de‡
GL_SGIX_y¸cba


10068 
	#GL_SGIX_y¸cba
 1

	)

10071 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


10072 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

10075 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


10076 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

10079 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


10080 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

10083 #i‚de‡
GL_3DFX_mu…ißm∂e


10084 
	#GL_3DFX_mu…ißm∂e
 1

	)

10087 #i‚de‡
GL_3DFX_tbuf„r


10088 
	#GL_3DFX_tbuf„r
 1

	)

10089 #ifde‡
GL_GLEXT_PROTOTYPES


10090 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

10092 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

10095 #i‚de‡
GL_EXT_mu…ißm∂e


10096 
	#GL_EXT_mu…ißm∂e
 1

	)

10097 #ifde‡
GL_GLEXT_PROTOTYPES


10098 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

10099 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

10101 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

10102 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

10105 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


10106 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

10109 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


10110 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

10113 #i‚de‡
GL_SGIX_ªßm∂e


10114 
	#GL_SGIX_ªßm∂e
 1

	)

10117 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


10118 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

10121 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


10122 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

10123 #ifde‡
GL_GLEXT_PROTOTYPES


10124 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

10126 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

10129 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


10130 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

10131 #ifde‡
GL_GLEXT_PROTOTYPES


10132 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° 
GLvoid
 *
∑øms
);

10134 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

10137 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


10138 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

10141 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


10142 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

10145 #i‚de‡
GL_NV_„n˚


10146 
	#GL_NV_„n˚
 1

	)

10147 #ifde‡
GL_GLEXT_PROTOTYPES


10148 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10149 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10150 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

10151 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

10152 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10153 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

10154 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

10156 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10157 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10158 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10159 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10160 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10161 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10162 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

10165 #i‚de‡
GL_NV_evÆu©‹s


10166 
	#GL_NV_evÆu©‹s
 1

	)

10167 #ifde‡
GL_GLEXT_PROTOTYPES


10168 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° 
GLvoid
 *
poöts
);

10169 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10170 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10171 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, 
GLvoid
 *
poöts
);

10172 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10173 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10174 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10175 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10176 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

10178 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

10179 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10180 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10181 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

10182 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10183 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10184 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10185 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10186 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

10189 #i‚de‡
GL_NV_∑cked_dïth_°ícû


10190 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

10193 #i‚de‡
GL_NV_ªgi°î_comböîs2


10194 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10195 #ifde‡
GL_GLEXT_PROTOTYPES


10196 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10197 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10199 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10200 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10203 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10204 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10207 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10208 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10211 #i‚de‡
GL_NV_ãxtuª_shadî


10212 
	#GL_NV_ãxtuª_shadî
 1

	)

10215 #i‚de‡
GL_NV_ãxtuª_shadî2


10216 
	#GL_NV_ãxtuª_shadî2
 1

	)

10219 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10220 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10223 #i‚de‡
GL_NV_vîãx_¥ogøm


10224 
	#GL_NV_vîãx_¥ogøm
 1

	)

10225 #ifde‡
GL_GLEXT_PROTOTYPES


10226 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10227 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10228 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10229 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10230 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10231 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10232 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10233 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10234 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10235 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10236 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10237 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10238 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10239 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

10240 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10241 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10242 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10243 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10244 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10245 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10246 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10247 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10248 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10249 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10250 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

10251 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10252 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10253 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10254 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10255 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10256 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10257 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10258 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10259 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10260 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10261 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10262 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10263 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10264 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10265 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10266 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10267 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10268 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10269 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10270 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10271 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10272 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10273 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10274 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10275 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

10276 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10277 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10278 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10279 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10280 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10281 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10282 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10283 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10284 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10285 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10286 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10287 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10288 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10289 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10291 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10292 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10293 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10294 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10295 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10296 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10297 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10298 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10299 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10300 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10301 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10302 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10303 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10304 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

10305 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10306 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10307 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10308 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10309 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10310 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10311 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10312 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10313 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10314 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10315 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10316 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10317 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10318 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10319 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10320 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10321 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10322 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10323 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10324 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10325 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10326 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10327 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10328 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10329 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10330 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10331 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10332 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10333 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10334 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10335 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10336 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10337 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10338 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10339 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10340 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10341 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10342 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10343 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10344 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10345 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10346 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10347 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10348 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10349 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10350 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10351 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10352 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10353 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10354 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10357 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


10358 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

10361 #i‚de‡
GL_SGIX_sˇÀbüs_höt


10362 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

10365 #i‚de‡
GL_OML_öãæa˚


10366 
	#GL_OML_öãæa˚
 1

	)

10369 #i‚de‡
GL_OML_subßm∂e


10370 
	#GL_OML_subßm∂e
 1

	)

10373 #i‚de‡
GL_OML_ªßm∂e


10374 
	#GL_OML_ªßm∂e
 1

	)

10377 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


10378 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

10381 #i‚de‡
GL_ATI_ívm≠_bumpm≠


10382 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

10383 #ifde‡
GL_GLEXT_PROTOTYPES


10384 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

10385 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

10386 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

10387 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

10389 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

10390 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

10391 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

10392 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

10395 #i‚de‡
GL_ATI_‰agmít_shadî


10396 
	#GL_ATI_‰agmít_shadî
 1

	)

10397 #ifde‡
GL_GLEXT_PROTOTYPES


10398 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

10399 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

10400 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

10401 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

10402 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

10403 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

10404 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

10405 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10406 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10407 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10408 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10409 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10410 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10411 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

10413 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

10414 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10415 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10416 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

10417 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

10418 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

10419 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

10420 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10421 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10422 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10423 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10424 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10425 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10426 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

10429 #i‚de‡
GL_ATI_≤_åüngÀs


10430 
	#GL_ATI_≤_åüngÀs
 1

	)

10431 #ifde‡
GL_GLEXT_PROTOTYPES


10432 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10433 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10435 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10436 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10439 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


10440 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

10441 #ifde‡
GL_GLEXT_PROTOTYPES


10442 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
ußge
);

10443 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10444 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
¥e£rve
);

10445 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10446 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10447 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10448 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

10449 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10450 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10451 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

10452 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10453 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10455 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

10456 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10457 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

10458 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10459 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10460 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10461 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

10462 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10463 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10464 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

10465 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10466 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10469 #i‚de‡
GL_EXT_vîãx_shadî


10470 
	#GL_EXT_vîãx_shadî
 1

	)

10471 #ifde‡
GL_GLEXT_PROTOTYPES


10472 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

10473 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

10474 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

10475 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

10476 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

10477 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

10478 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

10479 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

10480 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10481 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10482 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10483 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10484 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

10485 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10486 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10487 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

10488 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

10489 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

10490 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

10491 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

10492 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

10493 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

10494 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

10495 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° 
GLvoid
 *
addr
);

10496 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10497 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10498 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

10499 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

10500 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

10501 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

10502 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

10503 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

10504 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10505 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10506 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10507 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLvoid
* *
d©a
);

10508 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10509 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10510 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10511 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10512 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10513 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10515 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

10516 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

10517 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10518 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

10519 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10520 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

10521 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

10522 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

10523 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10524 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10525 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10526 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10527 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

10528 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10529 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10530 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

10531 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

10532 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

10533 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

10534 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

10535 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

10536 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

10537 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

10538 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

10539 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10540 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10541 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

10542 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

10543 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

10544 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

10545 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

10546 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

10547 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10548 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10549 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10550 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

10551 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10552 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10553 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10554 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10555 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10556 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10559 #i‚de‡
GL_ATI_vîãx_°ªams


10560 
	#GL_ATI_vîãx_°ªams
 1

	)

10561 #ifde‡
GL_GLEXT_PROTOTYPES


10562 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

10563 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10564 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

10565 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10566 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

10567 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10568 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

10569 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10570 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10571 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10572 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

10573 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10574 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10575 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10576 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10577 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10578 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10579 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10580 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

10581 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10582 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10583 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10584 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10585 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10586 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10587 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10588 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10589 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10590 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10591 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10592 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10593 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10594 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

10595 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

10596 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

10597 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10598 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

10599 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10600 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

10601 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10602 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

10603 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10604 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

10605 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10606 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10608 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

10609 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10610 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

10611 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10612 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

10613 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10614 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

10615 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10616 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10617 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10618 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10619 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10620 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10621 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10622 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10623 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10624 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10625 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10626 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10627 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10628 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10629 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10630 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10631 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10632 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10633 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10634 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10635 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10636 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10637 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10638 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10639 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10640 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

10641 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

10642 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

10643 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10644 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

10645 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10646 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

10647 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10648 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

10649 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10650 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

10651 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10652 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10655 #i‚de‡
GL_ATI_ñemít_¨øy


10656 
	#GL_ATI_ñemít_¨øy
 1

	)

10657 #ifde‡
GL_GLEXT_PROTOTYPES


10658 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10659 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

10660 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

10662 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10663 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

10664 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

10667 #i‚de‡
GL_SUN_mesh_¨øy


10668 
	#GL_SUN_mesh_¨øy
 1

	)

10669 #ifde‡
GL_GLEXT_PROTOTYPES


10670 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

10672 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

10675 #i‚de‡
GL_SUN_¶i˚_accum


10676 
	#GL_SUN_¶i˚_accum
 1

	)

10679 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


10680 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

10683 #i‚de‡
GL_NV_dïth_˛amp


10684 
	#GL_NV_dïth_˛amp
 1

	)

10687 #i‚de‡
GL_NV_oc˛usi⁄_quîy


10688 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

10689 #ifde‡
GL_GLEXT_PROTOTYPES


10690 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10691 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10692 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10693 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10694 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

10695 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10696 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10698 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10699 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10700 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10701 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10702 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

10703 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10704 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10707 #i‚de‡
GL_NV_poöt_•rôe


10708 
	#GL_NV_poöt_•rôe
 1

	)

10709 #ifde‡
GL_GLEXT_PROTOTYPES


10710 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10711 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10713 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10714 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10717 #i‚de‡
GL_NV_ãxtuª_shadî3


10718 
	#GL_NV_ãxtuª_shadî3
 1

	)

10721 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10722 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10725 #i‚de‡
GL_EXT_shadow_funcs


10726 
	#GL_EXT_shadow_funcs
 1

	)

10729 #i‚de‡
GL_EXT_°ícû_two_side


10730 
	#GL_EXT_°ícû_two_side
 1

	)

10731 #ifde‡
GL_GLEXT_PROTOTYPES


10732 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

10734 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

10737 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


10738 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

10741 #i‚de‡
GL_APPLE_˛õ¡_°‹age


10742 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

10745 #i‚de‡
GL_APPLE_ñemít_¨øy


10746 
	#GL_APPLE_ñemít_¨øy
 1

	)

10747 #ifde‡
GL_GLEXT_PROTOTYPES


10748 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10749 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10750 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10751 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10752 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10754 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10755 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10756 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10757 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10758 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10761 #i‚de‡
GL_APPLE_„n˚


10762 
	#GL_APPLE_„n˚
 1

	)

10763 #ifde‡
GL_GLEXT_PROTOTYPES


10764 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10765 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10766 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

10767 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

10768 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

10769 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

10770 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

10771 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

10773 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10774 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10775 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10776 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10777 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10778 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10779 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

10780 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

10783 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


10784 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

10785 #ifde‡
GL_GLEXT_PROTOTYPES


10786 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10787 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

10788 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

10789 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10791 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10792 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

10793 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

10794 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10797 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


10798 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

10799 #ifde‡
GL_GLEXT_PROTOTYPES


10800 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10801 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10802 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10804 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10805 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10806 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10809 #i‚de‡
GL_APPLE_ycb¸_422


10810 
	#GL_APPLE_ycb¸_422
 1

	)

10813 #i‚de‡
GL_S3_s3tc


10814 
	#GL_S3_s3tc
 1

	)

10817 #i‚de‡
GL_ATI_døw_buf„rs


10818 
	#GL_ATI_døw_buf„rs
 1

	)

10819 #ifde‡
GL_GLEXT_PROTOTYPES


10820 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

10822 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

10825 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


10826 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

10832 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


10833 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

10836 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


10837 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

10840 #i‚de‡
GL_NV_Êﬂt_buf„r


10841 
	#GL_NV_Êﬂt_buf„r
 1

	)

10844 #i‚de‡
GL_NV_‰agmít_¥ogøm


10845 
	#GL_NV_‰agmít_¥ogøm
 1

	)

10847 #ifde‡
GL_GLEXT_PROTOTYPES


10848 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10849 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10850 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

10851 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

10852 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

10853 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

10855 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10856 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10857 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10858 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10859 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

10860 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

10863 #i‚de‡
GL_NV_hÆf_Êﬂt


10864 
	#GL_NV_hÆf_Êﬂt
 1

	)

10865 #ifde‡
GL_GLEXT_PROTOTYPES


10866 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10867 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10868 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10869 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10870 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10871 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10872 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

10873 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10874 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10875 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10876 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

10877 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10878 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

10879 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10880 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10881 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10882 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10883 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10884 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10885 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10886 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

10887 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10888 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10889 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10890 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10891 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10892 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10893 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10894 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

10895 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

10896 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10897 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10898 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

10899 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

10900 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

10901 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10902 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10903 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10904 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10905 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10906 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10907 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10908 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10909 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10910 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10911 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10913 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

10914 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10915 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

10916 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10917 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

10918 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10919 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

10920 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10921 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

10922 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10923 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

10924 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10925 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

10926 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10927 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

10928 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10929 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

10930 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10931 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

10932 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10933 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

10934 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10935 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

10936 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10937 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

10938 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10939 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

10940 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10941 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

10942 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

10943 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

10944 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10945 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

10946 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

10947 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

10948 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

10950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

10952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

10954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10958 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10961 #i‚de‡
GL_NV_pixñ_d©a_ønge


10962 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10963 #ifde‡
GL_GLEXT_PROTOTYPES


10964 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

10965 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10967 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10968 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10971 #i‚de‡
GL_NV_¥imôive_ª°¨t


10972 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10973 #ifde‡
GL_GLEXT_PROTOTYPES


10974 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10975 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10977 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10978 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10981 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10982 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10985 #i‚de‡
GL_NV_vîãx_¥ogøm2


10986 
	#GL_NV_vîãx_¥ogøm2
 1

	)

10989 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


10990 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

10991 #ifde‡
GL_GLEXT_PROTOTYPES


10992 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10993 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10995 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10996 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10999 #i‚de‡
GL_ATI_£∑øã_°ícû


11000 
	#GL_ATI_£∑øã_°ícû
 1

	)

11001 #ifde‡
GL_GLEXT_PROTOTYPES


11002 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

11003 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

11005 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

11006 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

11009 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


11010 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

11011 #ifde‡
GL_GLEXT_PROTOTYPES


11012 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

11013 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11014 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11016 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

11017 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11018 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11021 #i‚de‡
GL_OES_ªad_f‹m©


11022 
	#GL_OES_ªad_f‹m©
 1

	)

11025 #i‚de‡
GL_EXT_dïth_bounds_ã°


11026 
	#GL_EXT_dïth_bounds_ã°
 1

	)

11027 #ifde‡
GL_GLEXT_PROTOTYPES


11028 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

11030 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

11033 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


11034 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

11037 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


11038 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

11039 #ifde‡
GL_GLEXT_PROTOTYPES


11040 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

11042 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

11045 #i‚de‡
GL_MESA_∑ck_övît


11046 
	#GL_MESA_∑ck_övît
 1

	)

11049 #i‚de‡
GL_MESA_ycb¸_ãxtuª


11050 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

11053 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


11054 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

11057 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


11058 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

11061 #i‚de‡
GL_NV_‰agmít_¥ogøm2


11062 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

11065 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11066 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11069 #i‚de‡
GL_NV_vîãx_¥ogøm3


11070 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11073 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


11074 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

11075 #ifde‡
GL_GLEXT_PROTOTYPES


11076 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

11077 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11078 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

11079 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

11080 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11081 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11082 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

11083 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

11084 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

11085 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

11086 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

11087 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11088 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11089 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11090 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

11091 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11092 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

11094 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

11095 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11096 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

11097 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

11098 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11099 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11100 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

11101 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

11102 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

11103 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

11104 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11105 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11106 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11107 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11108 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

11109 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11110 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11113 #i‚de‡
GL_GREMEDY_°rög_m¨kî


11114 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

11115 #ifde‡
GL_GLEXT_PROTOTYPES


11116 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11118 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11121 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


11122 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

11125 #i‚de‡
GL_EXT_°ícû_˛ór_èg


11126 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

11127 #ifde‡
GL_GLEXT_PROTOTYPES


11128 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

11130 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

11133 #i‚de‡
GL_EXT_ãxtuª_sRGB


11134 
	#GL_EXT_ãxtuª_sRGB
 1

	)

11137 #i‚de‡
GL_EXT_‰amebuf„r_blô


11138 
	#GL_EXT_‰amebuf„r_blô
 1

	)

11139 #ifde‡
GL_GLEXT_PROTOTYPES


11140 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

11142 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

11145 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


11146 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

11147 #ifde‡
GL_GLEXT_PROTOTYPES


11148 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11150 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11153 #i‚de‡
GL_MESAX_ãxtuª_°ack


11154 
	#GL_MESAX_ãxtuª_°ack
 1

	)

11157 #i‚de‡
GL_EXT_timî_quîy


11158 
	#GL_EXT_timî_quîy
 1

	)

11159 #ifde‡
GL_GLEXT_PROTOTYPES


11160 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11161 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11163 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11164 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11167 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


11168 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

11169 #ifde‡
GL_GLEXT_PROTOTYPES


11170 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11171 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11173 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11174 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11177 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


11178 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

11179 #ifde‡
GL_GLEXT_PROTOTYPES


11180 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11181 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11183 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11184 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11187 #i‚de‡
GL_NV_gpu_¥ogøm4


11188 
	#GL_NV_gpu_¥ogøm4
 1

	)

11189 #ifde‡
GL_GLEXT_PROTOTYPES


11190 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11191 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11192 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11193 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11194 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11195 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11196 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11197 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11198 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11199 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11200 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11201 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11202 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11203 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11204 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11205 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11207 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11208 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11209 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11210 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11211 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11212 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11213 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11214 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11215 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11216 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11217 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11218 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11219 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11220 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11221 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11222 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11225 #i‚de‡
GL_NV_geomëry_¥ogøm4


11226 
	#GL_NV_geomëry_¥ogøm4
 1

	)

11227 #ifde‡
GL_GLEXT_PROTOTYPES


11228 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

11229 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11230 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11231 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11233 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

11234 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11235 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

11236 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

11239 #i‚de‡
GL_EXT_geomëry_shadî4


11240 
	#GL_EXT_geomëry_shadî4
 1

	)

11241 #ifde‡
GL_GLEXT_PROTOTYPES


11242 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

11244 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

11247 #i‚de‡
GL_NV_vîãx_¥ogøm4


11248 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11249 #ifde‡
GL_GLEXT_PROTOTYPES


11250 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11251 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11252 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11253 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11254 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11255 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11256 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11257 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11258 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11259 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11260 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11261 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11262 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11263 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11264 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11265 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11266 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11267 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11268 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11269 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11270 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11271 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11272 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11274 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11275 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11276 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11277 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11278 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11279 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11280 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11281 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11282 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11283 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11284 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11285 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11286 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11287 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11288 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11289 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11290 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11291 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11292 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11293 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11294 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11295 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11296 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11299 #i‚de‡
GL_EXT_gpu_shadî4


11300 
	#GL_EXT_gpu_shadî4
 1

	)

11301 #ifde‡
GL_GLEXT_PROTOTYPES


11302 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

11303 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

11304 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11305 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

11306 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

11307 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

11308 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11309 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11310 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11311 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11312 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11314 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

11315 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

11316 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11317 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

11318 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

11319 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11320 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11321 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11322 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11323 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11324 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11327 #i‚de‡
GL_EXT_døw_ö°™˚d


11328 
	#GL_EXT_døw_ö°™˚d
 1

	)

11329 #ifde‡
GL_GLEXT_PROTOTYPES


11330 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

11331 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

11333 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

11334 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

11337 #i‚de‡
GL_EXT_∑cked_Êﬂt


11338 
	#GL_EXT_∑cked_Êﬂt
 1

	)

11341 #i‚de‡
GL_EXT_ãxtuª_¨øy


11342 
	#GL_EXT_ãxtuª_¨øy
 1

	)

11345 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


11346 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

11347 #ifde‡
GL_GLEXT_PROTOTYPES


11348 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11350 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11353 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


11354 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

11357 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


11358 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

11361 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


11362 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

11365 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


11366 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

11367 #ifde‡
GL_GLEXT_PROTOTYPES


11368 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

11369 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

11370 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

11372 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

11373 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

11374 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

11377 #i‚de‡
GL_NV_‰agmít_¥ogøm4


11378 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

11381 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


11382 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

11383 #ifde‡
GL_GLEXT_PROTOTYPES


11384 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11386 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11389 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


11390 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

11393 #i‚de‡
GL_NV_geomëry_shadî4


11394 
	#GL_NV_geomëry_shadî4
 1

	)

11397 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


11398 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

11399 #ifde‡
GL_GLEXT_PROTOTYPES


11400 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11401 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11402 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11404 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11405 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11406 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11409 #i‚de‡
GL_EXT_døw_buf„rs2


11410 
	#GL_EXT_døw_buf„rs2
 1

	)

11411 #ifde‡
GL_GLEXT_PROTOTYPES


11412 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

11413 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

11414 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

11415 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11416 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11417 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11419 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

11420 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

11421 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

11422 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11423 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11424 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11427 #i‚de‡
GL_NV_å™sf‹m_„edback


11428 
	#GL_NV_å™sf‹m_„edback
 1

	)

11429 #ifde‡
GL_GLEXT_PROTOTYPES


11430 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

11431 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

11432 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

11433 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11434 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11435 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11436 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

11437 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11438 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11439 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11440 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

11441 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

11443 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11444 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

11445 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

11446 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11447 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11448 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11449 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

11450 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11451 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11452 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11453 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

11454 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

11457 #i‚de‡
GL_EXT_bödabÀ_unif‹m


11458 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

11459 #ifde‡
GL_GLEXT_PROTOTYPES


11460 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

11461 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

11462 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

11464 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

11465 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11466 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11469 #i‚de‡
GL_EXT_ãxtuª_öãgî


11470 
	#GL_EXT_ãxtuª_öãgî
 1

	)

11471 #ifde‡
GL_GLEXT_PROTOTYPES


11472 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11473 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11474 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11475 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11476 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

11477 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

11479 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11480 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11481 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11482 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11483 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

11484 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

11487 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


11488 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

11489 #ifde‡
GL_GLEXT_PROTOTYPES


11490 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

11492 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

11495 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


11496 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

11497 #ifde‡
GL_GLEXT_PROTOTYPES


11498 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

11499 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

11501 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

11502 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

11505 #i‚de‡
GL_NV_¥e£¡_video


11506 
	#GL_NV_¥e£¡_video
 1

	)

11507 #ifde‡
GL_GLEXT_PROTOTYPES


11508 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

11509 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

11510 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11511 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11512 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11513 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11515 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

11516 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

11517 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11518 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11519 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11520 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11523 #i‚de‡
GL_EXT_å™sf‹m_„edback


11524 
	#GL_EXT_å™sf‹m_„edback
 1

	)

11525 #ifde‡
GL_GLEXT_PROTOTYPES


11526 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

11527 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

11528 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11529 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11530 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11531 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
v¨yögs
, 
GLíum
 
buf„rMode
);

11532 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11534 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11535 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

11536 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11537 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11538 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11539 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

11540 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11543 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


11544 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

11545 #ifde‡
GL_GLEXT_PROTOTYPES


11546 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11547 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11548 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11549 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11550 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11551 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11552 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

11553 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11554 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11555 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11556 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11557 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11558 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11559 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11560 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11561 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

11562 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

11563 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11564 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11565 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11566 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11567 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11568 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11569 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11570 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11571 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11572 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11573 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11574 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11575 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11576 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11577 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11578 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11579 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11580 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11581 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11582 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11583 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11584 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11585 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11586 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11587 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11588 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11589 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11590 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11591 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11592 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11593 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11594 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11595 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11596 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11597 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11598 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11599 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11600 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11601 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11602 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11603 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11604 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11605 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11606 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11607 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

11608 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11609 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11610 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11611 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11612 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11613 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11614 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11615 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

11616 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11617 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11618 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11619 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11620 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11621 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11622 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11623 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11624 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11625 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11626 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

11627 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

11628 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLvoid
* *
d©a
);

11629 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11630 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11631 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11632 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11633 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11634 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11635 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11636 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11637 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11638 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11639 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11640 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11641 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11642 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11643 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11644 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11645 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

11646 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11647 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

11648 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

11649 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

11650 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11651 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

11652 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11653 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11654 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

11655 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11656 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11657 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

11658 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11659 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

11660 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

11661 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11662 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

11663 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11664 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

11665 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11666 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11667 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11668 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11669 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

11670 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

11671 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

11672 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

11673 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

11674 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

11675 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

11676 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

11677 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11678 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11679 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11680 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11681 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11682 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11683 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11684 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11685 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11686 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11687 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11688 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11689 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11690 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11691 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11692 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11693 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11694 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

11695 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

11696 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

11697 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11698 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11699 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11700 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11701 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11702 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, 
GLíum
 
ußge
);

11703 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

11704 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

11705 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

11706 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

11707 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

11708 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

11709 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11710 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

11711 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

11712 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

11713 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11714 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11715 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11716 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

11717 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11718 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11719 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11720 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

11721 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11722 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

11723 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

11724 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11725 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

11726 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11727 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11728 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11729 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11730 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11731 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11732 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11733 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

11734 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11735 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

11736 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

11737 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11738 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11739 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11740 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11741 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11742 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11743 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11744 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11745 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11746 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11747 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11748 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11749 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11750 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11751 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11753 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11754 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11755 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11756 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11757 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11758 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11759 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

11760 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11761 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11762 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11763 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11764 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11765 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11766 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11767 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11768 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

11769 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

11770 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11771 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11772 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11773 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11774 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11775 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11776 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11777 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11778 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11779 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11780 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11781 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11782 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11783 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11784 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11785 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11786 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11787 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11788 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11789 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11790 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11791 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11792 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11793 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11794 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11795 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11796 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11797 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11798 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11799 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11800 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11801 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11802 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11803 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11804 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11805 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11806 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11807 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11808 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11809 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11810 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11811 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11812 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11813 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11814 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

11815 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11816 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11817 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11818 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11819 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11820 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11821 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11822 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

11823 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11824 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11825 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11826 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11827 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11828 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11829 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11830 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11831 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11832 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11833 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

11834 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

11835 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
* *
	td©a
);

11836 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11837 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11838 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11839 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11840 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11841 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11842 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11843 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11844 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11845 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11846 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11847 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11848 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11849 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11850 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11851 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11852 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11853 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11854 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11855 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

11856 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

11857 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11858 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

11859 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11860 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11861 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11862 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11863 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11864 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

11865 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11866 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

11867 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

11868 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11869 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

11870 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11871 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

11872 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11873 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11874 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11875 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11876 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

11877 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

11878 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

11879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

11880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

11881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

11882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

11883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

11884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11896 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

11902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

11903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11909 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, 
	tGLíum
 
	tußge
);

11910 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

11911 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

11912 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

11913 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

11914 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

11915 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

11916 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11917 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

11918 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

11919 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

11920 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11921 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11922 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11923 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

11924 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11925 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11926 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11927 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

11928 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11929 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

11930 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

11931 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

11932 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

11933 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

11934 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11935 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11936 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11937 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11938 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

11939 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

11940 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

11941 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

11943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

11944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11947 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11948 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11949 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11950 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11951 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11952 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11953 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11954 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11955 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11956 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11957 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11958 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11961 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


11962 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

11965 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


11966 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

11969 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


11970 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

11971 #ifde‡
GL_GLEXT_PROTOTYPES


11972 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

11973 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

11974 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11976 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

11977 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

11978 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11981 #i‚de‡
GL_NV_å™sf‹m_„edback2


11982 
	#GL_NV_å™sf‹m_„edback2
 1

	)

11983 #ifde‡
GL_GLEXT_PROTOTYPES


11984 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

11985 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

11986 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

11987 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

11988 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

11989 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

11990 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

11992 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

11993 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

11994 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

11995 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

11996 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

11997 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

11998 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

12001 #i‚de‡
GL_ATI_memöfo


12002 
	#GL_ATI_memöfo
 1

	)

12005 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


12006 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

12007 #ifde‡
GL_GLEXT_PROTOTYPES


12008 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

12009 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

12010 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

12011 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

12012 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

12013 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12014 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12015 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

12016 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12017 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12018 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

12020 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

12021 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

12022 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

12023 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

12024 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

12025 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12026 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12027 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

12028 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12029 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12030 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

12033 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


12034 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

12037 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


12038 
	#GL_AMD_vîãx_shadî_ãs£œt‹
 1

	)

12039 #ifde‡
GL_GLEXT_PROTOTYPES


12040 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

12041 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

12043 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

12044 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

12047 #i‚de‡
GL_EXT_¥ovokög_vîãx


12048 
	#GL_EXT_¥ovokög_vîãx
 1

	)

12049 #ifde‡
GL_GLEXT_PROTOTYPES


12050 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

12052 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

12055 #i‚de‡
GL_EXT_ãxtuª_¢‹m


12056 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

12059 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


12060 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

12061 #ifde‡
GL_GLEXT_PROTOTYPES


12062 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

12063 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

12064 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

12065 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

12067 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

12068 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

12069 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

12070 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

12073 #i‚de‡
GL_APPLE_ãxtuª_ønge


12074 
	#GL_APPLE_ãxtuª_ønge
 1

	)

12075 #ifde‡
GL_GLEXT_PROTOTYPES


12076 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

12077 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

12079 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12080 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

12083 #i‚de‡
GL_APPLE_Êﬂt_pixñs


12084 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

12087 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


12088 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

12089 #ifde‡
GL_GLEXT_PROTOTYPES


12090 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12091 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12092 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12093 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

12094 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

12095 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

12096 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

12098 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12099 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12100 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12101 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12102 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12103 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12104 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12107 #i‚de‡
GL_APPLE_aux_dïth_°ícû


12108 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

12111 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


12112 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

12113 #ifde‡
GL_GLEXT_PROTOTYPES


12114 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12115 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12116 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

12118 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12119 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12120 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12123 #i‚de‡
GL_APPLE_row_byãs


12124 
	#GL_APPLE_row_byãs
 1

	)

12127 #i‚de‡
GL_APPLE_rgb_422


12128 
	#GL_APPLE_rgb_422
 1

	)

12131 #i‚de‡
GL_NV_video_ˇ±uª


12132 
	#GL_NV_video_ˇ±uª
 1

	)

12133 #ifde‡
GL_GLEXT_PROTOTYPES


12134 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12135 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

12136 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

12137 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12138 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12139 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12140 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

12141 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12142 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

12143 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

12144 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

12145 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

12147 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12148 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

12149 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

12150 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12151 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12152 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12153 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

12154 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12155 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

12156 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

12157 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

12158 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

12161 #i‚de‡
GL_NV_c›y_image


12162 
	#GL_NV_c›y_image
 1

	)

12163 #ifde‡
GL_GLEXT_PROTOTYPES


12164 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

12166 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

12169 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


12170 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

12171 #ifde‡
GL_GLEXT_PROTOTYPES


12172 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

12173 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

12174 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

12176 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

12177 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

12178 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

12181 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


12182 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

12185 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


12186 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

12187 #ifde‡
GL_GLEXT_PROTOTYPES


12188 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

12189 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

12190 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

12191 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

12192 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

12193 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

12194 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12195 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12196 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

12197 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12198 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12199 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

12200 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12201 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12203 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

12204 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12205 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12206 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

12207 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12208 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12209 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12210 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12211 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

12212 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12213 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12214 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

12215 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12216 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12219 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


12220 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

12221 #ifde‡
GL_GLEXT_PROTOTYPES


12222 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

12223 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12224 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12225 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12226 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12227 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12228 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

12229 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12230 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12231 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

12232 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12233 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

12235 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

12236 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12237 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12238 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12239 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12240 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12241 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

12242 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12243 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12244 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

12245 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12246 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

12249 #i‚de‡
GL_NV_ãxtuª_b¨rõr


12250 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

12251 #ifde‡
GL_GLEXT_PROTOTYPES


12252 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

12254 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

12257 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


12258 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

12261 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


12262 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

12265 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


12266 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

12269 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


12270 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

12271 #ifde‡
GL_GLEXT_PROTOTYPES


12272 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

12273 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

12275 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

12276 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

12279 #i‚de‡
GL_EXT_vîãx_©åib_64bô


12280 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

12281 #ifde‡
GL_GLEXT_PROTOTYPES


12282 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

12283 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

12284 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

12285 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

12286 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12287 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12288 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12289 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12290 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

12291 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12292 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

12294 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

12295 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

12296 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

12297 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12298 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12299 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12300 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12301 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12302 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12303 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12304 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

12307 #i‚de‡
GL_NV_gpu_¥ogøm5


12308 
	#GL_NV_gpu_¥ogøm5
 1

	)

12309 #ifde‡
GL_GLEXT_PROTOTYPES


12310 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

12311 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

12313 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

12314 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

12317 #i‚de‡
GL_NV_gpu_shadî5


12318 
	#GL_NV_gpu_shadî5
 1

	)

12319 #ifde‡
GL_GLEXT_PROTOTYPES


12320 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12321 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12322 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12323 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12324 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12325 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12326 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12327 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12328 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12329 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12330 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12331 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12332 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12333 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12334 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12335 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12336 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

12337 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12338 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12339 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12340 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12341 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12342 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12343 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12344 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12345 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12346 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12347 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12348 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12349 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12350 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12351 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12352 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12354 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12355 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12356 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12357 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12358 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12359 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12360 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12361 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12362 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12363 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12364 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12365 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12366 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12367 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12368 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12369 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12370 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

12371 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12372 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12373 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12374 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12375 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12376 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12377 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12378 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12379 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12380 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12381 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12382 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12383 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12384 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12385 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12386 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12389 #i‚de‡
GL_NV_shadî_buf„r_°‹e


12390 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

12393 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


12394 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

12397 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


12398 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

12399 #ifde‡
GL_GLEXT_PROTOTYPES


12400 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

12401 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12402 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12403 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12404 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12405 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12406 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12407 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12408 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

12409 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12410 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12411 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12412 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12413 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12414 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12415 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12416 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

12417 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12418 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12420 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

12421 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12425 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12426 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12427 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12428 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

12429 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12430 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12431 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12432 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12433 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12434 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12435 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12436 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

12437 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12438 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12441 #i‚de‡
GL_NV_mu…ißm∂e_covîage


12442 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

12445 #i‚de‡
GL_AMD_«me_gí_dñëe


12446 
	#GL_AMD_«me_gí_dñëe
 1

	)

12447 #ifde‡
GL_GLEXT_PROTOTYPES


12448 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

12449 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

12450 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

12452 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

12453 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

12454 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

12457 #i‚de‡
GL_AMD_debug_ouçut


12458 
	#GL_AMD_debug_ouçut
 1

	)

12459 #ifde‡
GL_GLEXT_PROTOTYPES


12460 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

12461 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

12462 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, 
GLvoid
 *
u£rP¨am
);

12463 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

12465 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

12466 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

12467 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, 
	tGLvoid
 *
	tu£rP¨am
);

12468 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

12471 #i‚de‡
GL_NV_vd∑u_öãr›


12472 
	#GL_NV_vd∑u_öãr›
 1

	)

12473 #ifde‡
GL_GLEXT_PROTOTYPES


12474 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° 
GLvoid
 *
vdpDevi˚
, c⁄° GLvoid *
gëProcAddªss
);

12475 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

12476 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° 
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12477 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12478 
GLAPI
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12479 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12480 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

12481 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

12482 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12483 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12485 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° 
	tGLvoid
 *
	tvdpDevi˚
, c⁄° GLvoid *
	tgëProcAddªss
);

12486 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

12487 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° 
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12488 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12489 (
APIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12490 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12491 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

12492 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

12493 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12494 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12497 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


12498 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

12501 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


12502 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

12505 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


12506 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

12509 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


12510 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

12511 #ifde‡
GL_GLEXT_PROTOTYPES


12512 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12513 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12514 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12515 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12516 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12517 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12519 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12520 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12521 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12522 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12523 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12524 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12527 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


12528 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

12531 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


12532 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

12533 #ifde‡
GL_GLEXT_PROTOTYPES


12534 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

12536 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

12539 #i‚de‡
GL_EXT_x11_sync_obje˘


12540 
	#GL_EXT_x11_sync_obje˘
 1

	)

12541 #ifde‡
GL_GLEXT_PROTOTYPES


12542 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

12544 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

12547 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


12548 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

12549 #ifde‡
GL_GLEXT_PROTOTYPES


12550 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12551 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12553 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12554 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12557 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


12558 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

12561 #i‚de‡
GL_NV_∑th_ªndîög


12562 
	#GL_NV_∑th_ªndîög
 1

	)

12563 #ifde‡
GL_GLEXT_PROTOTYPES


12564 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

12565 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

12566 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

12567 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12568 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12569 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12570 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12571 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
∑thSåög
);

12572 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° GLvoid *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12573 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12574 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

12575 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

12576 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

12577 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12578 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

12579 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

12580 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

12581 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

12582 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

12583 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

12584 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

12585 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

12586 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

12587 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12588 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12589 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

12590 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12591 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12592 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

12593 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12594 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12595 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12596 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12597 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

12598 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12599 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

12600 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

12601 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

12602 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12603 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12604 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

12605 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12606 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12607 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12608 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12609 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12610 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12611 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

12612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

12614 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

12615 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

12616 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

12617 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12618 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12619 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12620 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12621 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	t∑thSåög
);

12622 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° GLvoid *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12623 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12624 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

12625 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

12626 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

12627 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12628 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

12629 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

12630 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

12631 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

12632 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

12633 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

12634 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

12635 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

12636 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

12637 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12638 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12639 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

12640 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12641 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12642 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

12643 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12644 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12645 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12646 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12647 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12648 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12649 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

12650 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

12651 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

12652 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12653 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12654 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

12655 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12656 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12657 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12658 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12659 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12660 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12661 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

12662 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

12665 #i‚de‡
GL_AMD_pö√d_mem‹y


12666 
	#GL_AMD_pö√d_mem‹y
 1

	)

12669 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


12670 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

12671 #ifde‡
GL_GLEXT_PROTOTYPES


12672 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

12674 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

12677 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


12678 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

12681 #i‚de‡
GL_AMD_vîãx_shadî_œyî


12682 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

12685 #i‚de‡
GL_NV_bödÀss_ãxtuª


12686 
	#GL_NV_bödÀss_ãxtuª
 1

	)

12687 #ifde‡
GL_GLEXT_PROTOTYPES


12688 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

12689 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

12690 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12691 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12692 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

12693 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

12694 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12695 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12696 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

12697 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12698 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

12699 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12700 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12702 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

12703 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

12704 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12705 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12706 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

12707 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

12708 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12709 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12710 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

12711 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12712 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

12713 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12714 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12717 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


12718 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

12721 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


12722 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

12725 #i‚de‡
GL_AMD_•¨£_ãxtuª


12726 
	#GL_AMD_•¨£_ãxtuª
 1

	)

12727 #ifde‡
GL_GLEXT_PROTOTYPES


12728 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

12729 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

12731 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

12732 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

12736 #ifde‡
__˝lu•lus


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

81 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

83 
	#_X_SENTINEL
(
x
)

	)

87 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& !deföed(
__CYGWIN__
)

88 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

89 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

90 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

91 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

92 
	#_X_EXPORT
 
__globÆ


	)

93 
	#_X_HIDDEN
 
__hiddí


	)

94 
	#_X_INTERNAL
 
__hiddí


	)

96 
	#_X_EXPORT


	)

97 
	#_X_HIDDEN


	)

98 
	#_X_INTERNAL


	)

102 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

103 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

104 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

106 
	#_X_LIKELY
(
x
Ë(x)

	)

107 
	#_X_UNLIKELY
(
x
Ë(x)

	)

111 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)

112 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

114 
	#_X_DEPRECATED


	)

118 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

119 || (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

120 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

122 
	#_X_NORETURN


	)

126 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

127 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

129 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

135 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

136 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

137 #ñi‡
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

138 
	#_X_NONNULL
(...Ë

	)

142 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

143 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

145 
	#_X_UNUSED


	)

151 #i‡
deföed
(
ölöe
) || \

152 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

153 (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

154 
	#_X_INLINE
 
ölöe


	)

155 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

156 
	#_X_INLINE
 
__ölöe__


	)

158 
	#_X_INLINE


	)

163 #i‚de‡
_X_RESTRICT_KYWD


164 #i‡
deföed
(
ª°ri˘
) || \

165 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L))

166 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

167 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

168 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

170 
	#_X_RESTRICT_KYWD


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 2)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 2)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
__±hªad_li°_t
 
	m__li°
;

106 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	m__nu£rs
;

109 
__exãnsi⁄__
 union

111 
	m__•ös
;

112 
__±hªad_¶i°_t
 
	m__li°
;

115 } 
	m__d©a
;

116 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 
	m__Æign
;

118 } 
	t±hªad_muãx_t
;

122 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 
	m__Æign
;

124 } 
	t±hªad_muãx©å_t
;

133 
	m__lock
;

134 
	m__fuãx
;

135 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

136 
__exãnsi⁄__
 
	m__wakeup_£q
;

137 
__exãnsi⁄__
 
	m__wokí_£q
;

138 *
	m__muãx
;

139 
	m__nwaôîs
;

140 
	m__brﬂdˇ°_£q
;

141 } 
	m__d©a
;

142 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__exãnsi⁄__
 
	m__Æign
;

144 } 
	t±hªad_c⁄d_t
;

148 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 
	m__Æign
;

150 } 
	t±hªad_c⁄d©å_t
;

154 
	t±hªad_key_t
;

158 
	t±hªad_⁄˚_t
;

161 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


166 #ifde‡
__x86_64__


169 
	m__lock
;

170 
	m__ƒ_ªadîs
;

171 
	m__ªadîs_wakeup
;

172 
	m__wrôî_wakeup
;

173 
	m__ƒ_ªadîs_queued
;

174 
	m__ƒ_wrôîs_queued
;

175 
	m__wrôî
;

176 
	m__sh¨ed
;

177 
	m__∑d1
;

178 
	m__∑d2
;

181 
	m__Êags
;

182 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__d©a
;

187 
	m__lock
;

188 
	m__ƒ_ªadîs
;

189 
	m__ªadîs_wakeup
;

190 
	m__wrôî_wakeup
;

191 
	m__ƒ_ªadîs_queued
;

192 
	m__ƒ_wrôîs_queued
;

195 
	m__Êags
;

196 
	m__sh¨ed
;

197 
	m__∑d1
;

198 
	m__∑d2
;

199 
	m__wrôî
;

200 } 
	m__d©a
;

202 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 
	m__Æign
;

204 } 
	t±hªad_rwlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 
	m__Æign
;

210 } 
	t±hªad_rwlock©å_t
;

214 #ifde‡
__USE_XOPEN2K


216 vﬁ©ûê
	t±hªad_•ölock_t
;

223 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 
	m__Æign
;

225 } 
	t±hªad_b¨rõr_t
;

229 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 
	m__Æign
;

231 } 
	t±hªad_b¨rõøâr_t
;

235 #i‚de‡
__x86_64__


237 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

154 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

157 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

160 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

163 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

168 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

169 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

172 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

173 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

176 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

177 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

185 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

187 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

191 
__off64_t
 
	t__loff_t
;

192 
__quad_t
 *
	t__qaddr_t
;

193 *
	t__ˇddr_t
;

196 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

199 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

202 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 16

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 
	~<sys/cdefs.h
>

64 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

65 #i‚de‡
_G_HAVE_PRINTF_FP


66 
	#_IO_USE_DTOA
 1

	)

69 #i‚de‡
EOF


70 
	#EOF
 (-1)

	)

72 #i‚de‡
NULL


73 #i‡
deföed
 
__GNUG__
 && \

74 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

75 
	#NULL
 (
__nuŒ
)

	)

77 #i‡!
deföed
(
__˝lu•lus
)

78 
	#NULL
 ((*)0)

	)

80 
	#NULL
 (0)

	)

85 
	#_IOS_INPUT
 1

	)

86 
	#_IOS_OUTPUT
 2

	)

87 
	#_IOS_ATEND
 4

	)

88 
	#_IOS_APPEND
 8

	)

89 
	#_IOS_TRUNC
 16

	)

90 
	#_IOS_NOCREATE
 32

	)

91 
	#_IOS_NOREPLACE
 64

	)

92 
	#_IOS_BIN
 128

	)

100 
	#_IO_MAGIC
 0xFBAD0000

	)

101 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

102 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

103 
	#_IO_USER_BUF
 1

	)

104 
	#_IO_UNBUFFERED
 2

	)

105 
	#_IO_NO_READS
 4

	)

106 
	#_IO_NO_WRITES
 8

	)

107 
	#_IO_EOF_SEEN
 0x10

	)

108 
	#_IO_ERR_SEEN
 0x20

	)

109 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

110 
	#_IO_LINKED
 0x80

	)

111 
	#_IO_IN_BACKUP
 0x100

	)

112 
	#_IO_LINE_BUF
 0x200

	)

113 
	#_IO_TIED_PUT_GET
 0x400

	)

114 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

115 
	#_IO_IS_APPENDING
 0x1000

	)

116 
	#_IO_IS_FILEBUF
 0x2000

	)

117 
	#_IO_BAD_SEEN
 0x4000

	)

118 
	#_IO_USER_LOCK
 0x8000

	)

120 
	#_IO_FLAGS2_MMAP
 1

	)

121 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

122 #ifde‡
_LIBC


123 
	#_IO_FLAGS2_FORTIFY
 4

	)

125 
	#_IO_FLAGS2_USER_WBUF
 8

	)

126 #ifde‡
_LIBC


127 
	#_IO_FLAGS2_SCANF_STD
 16

	)

128 
	#_IO_FLAGS2_NOCLOSE
 32

	)

129 
	#_IO_FLAGS2_CLOEXEC
 64

	)

133 
	#_IO_SKIPWS
 01

	)

134 
	#_IO_LEFT
 02

	)

135 
	#_IO_RIGHT
 04

	)

136 
	#_IO_INTERNAL
 010

	)

137 
	#_IO_DEC
 020

	)

138 
	#_IO_OCT
 040

	)

139 
	#_IO_HEX
 0100

	)

140 
	#_IO_SHOWBASE
 0200

	)

141 
	#_IO_SHOWPOINT
 0400

	)

142 
	#_IO_UPPERCASE
 01000

	)

143 
	#_IO_SHOWPOS
 02000

	)

144 
	#_IO_SCIENTIFIC
 04000

	)

145 
	#_IO_FIXED
 010000

	)

146 
	#_IO_UNITBUF
 020000

	)

147 
	#_IO_STDIO
 040000

	)

148 
	#_IO_DONT_CLOSE
 0100000

	)

149 
	#_IO_BOOLALPHA
 0200000

	)

152 
_IO_jump_t
; 
	g_IO_FILE
;

155 #ifde‡
_IO_MTSAFE_IO


156 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

157 
	~<bôs/°dio-lock.h
>

162 
	t_IO_lock_t
;

168 
	s_IO_m¨kî
 {

169 
_IO_m¨kî
 *
	m_√xt
;

170 
_IO_FILE
 *
	m_sbuf
;

174 
	m_pos
;

176 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

177 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

178 
	mpublic
:

179 
°ªamm¨kî
(
°ªambuf
 *
sb
);

180 ~
°ªamm¨kî
();

181 
ßvög
(Ë{  
	m_•os
 == -2; }

182 
dñè
(
°ªamm¨kî
&);

183 
dñè
();

188 
	e__codecvt_ªsu…


190 
	m__codecvt_ok
,

191 
	m__codecvt_∑πül
,

192 
	m__codecvt_îr‹
,

193 
	m__codecvt_noc⁄v


196 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


199 
	s_IO_codecvt


201 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

202 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

203 
	m__mb°©e_t
 *,

204 c⁄° 
	mwch¨_t
 *,

205 c⁄° 
	mwch¨_t
 *,

206 c⁄° 
	mwch¨_t
 **, *,

208 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

209 
	m__mb°©e_t
 *, *,

211 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

212 
	m__mb°©e_t
 *,

214 c⁄° **, 
	mwch¨_t
 *,

215 
	mwch¨_t
 *, wchar_t **);

216 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

217 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

218 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

219 c⁄° *, c⁄° *, 
	m_IO_size_t
);

220 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

222 
_IO_ic⁄v_t
 
	m__cd_ö
;

223 
_IO_ic⁄v_t
 
	m__cd_out
;

227 
	s_IO_wide_d©a


229 
wch¨_t
 *
	m_IO_ªad_±r
;

230 
wch¨_t
 *
	m_IO_ªad_íd
;

231 
wch¨_t
 *
	m_IO_ªad_ba£
;

232 
wch¨_t
 *
	m_IO_wrôe_ba£
;

233 
wch¨_t
 *
	m_IO_wrôe_±r
;

234 
wch¨_t
 *
	m_IO_wrôe_íd
;

235 
wch¨_t
 *
	m_IO_buf_ba£
;

236 
wch¨_t
 *
	m_IO_buf_íd
;

238 
wch¨_t
 *
	m_IO_ßve_ba£
;

239 
wch¨_t
 *
	m_IO_backup_ba£
;

241 
wch¨_t
 *
	m_IO_ßve_íd
;

243 
__mb°©e_t
 
	m_IO_°©e
;

244 
__mb°©e_t
 
	m_IO_œ°_°©e
;

245 
_IO_codecvt
 
	m_codecvt
;

247 
wch¨_t
 
	m_sh‹tbuf
[1];

249 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

253 
	s_IO_FILE
 {

254 
	m_Êags
;

255 
	#_IO_fûe_Êags
 
_Êags


	)

259 * 
	m_IO_ªad_±r
;

260 * 
	m_IO_ªad_íd
;

261 * 
	m_IO_ªad_ba£
;

262 * 
	m_IO_wrôe_ba£
;

263 * 
	m_IO_wrôe_±r
;

264 * 
	m_IO_wrôe_íd
;

265 * 
	m_IO_buf_ba£
;

266 * 
	m_IO_buf_íd
;

268 *
	m_IO_ßve_ba£
;

269 *
	m_IO_backup_ba£
;

270 *
	m_IO_ßve_íd
;

272 
_IO_m¨kî
 *
	m_m¨kîs
;

274 
_IO_FILE
 *
	m_chaö
;

276 
	m_fûío
;

278 
	m_blksize
;

280 
	m_Êags2
;

282 
_IO_off_t
 
	m_ﬁd_off£t
;

284 
	#__HAVE_COLUMN


	)

286 
	m_cur_cﬁumn
;

287 sig√d 
	m_vèbÀ_off£t
;

288 
	m_sh‹tbuf
[1];

292 
_IO_lock_t
 *
	m_lock
;

293 #ifde‡
_IO_USE_OLD_IO_FILE


296 
	s_IO_FILE_com∂ëe


298 
_IO_FILE
 
	m_fûe
;

300 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

301 
_IO_off64_t
 
	m_off£t
;

302 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


304 
_IO_codecvt
 *
	m_codecvt
;

305 
_IO_wide_d©a
 *
	m_wide_d©a
;

306 
_IO_FILE
 *
	m_‰ìªs_li°
;

307 *
	m_‰ìªs_buf
;

308 
size_t
 
	m_‰ìªs_size
;

310 *
	m__∑d1
;

311 *
	m__∑d2
;

312 *
	m__∑d3
;

313 *
	m__∑d4
;

314 
size_t
 
	m__∑d5
;

316 
	m_mode
;

318 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

322 #i‚de‡
__˝lu•lus


323 
_IO_FILE
 
	t_IO_FILE
;

326 
	g_IO_FILE_∂us
;

328 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

329 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

330 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

331 #i‚de‡
_LIBC


332 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

333 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

334 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

336 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

337 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

338 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

346 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

354 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

355 
	tsize_t
 
	t__n
);

363 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

366 
	t__io_˛o£_‚
 (*
	t__cookõ
);

369 #ifde‡
_GNU_SOURCE


371 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

372 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

373 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

374 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

379 
__io_ªad_‚
 *
	mªad
;

380 
__io_wrôe_‚
 *
	mwrôe
;

381 
__io_£ek_‚
 *
	m£ek
;

382 
__io_˛o£_‚
 *
	m˛o£
;

383 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

384 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

386 
	g_IO_cookõ_fûe
;

389 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

390 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

394 #ifde‡
__˝lu•lus


398 
__undîÊow
 (
_IO_FILE
 *);

399 
__uÊow
 (
_IO_FILE
 *);

400 
__ovîÊow
 (
_IO_FILE
 *, );

401 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


402 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

403 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

404 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

407 #i‡ 
__GNUC__
 >= 3

408 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

410 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

413 
	#_IO_gëc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

415 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

416 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

417 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

418 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

419 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

420 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

421 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

422 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

423 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

425 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


426 
	#_IO_gëwc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

428 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

429 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

430 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

431 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

433 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

434 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

435 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

436 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

439 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

440 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

442 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

443 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

444 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

450 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

451 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

453 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

454 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

455 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 #ifde‡
_IO_MTSAFE_IO


458 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

459 
	#_IO_Êockfûe
(
_Â
) \

460 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

461 
	#_IO_fu∆ockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

464 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

465 
	#_IO_Êockfûe
(
_Â
Ë

	)

466 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

467 
	#_IO_·rylockfûe
(
_Â
Ë

	)

468 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

469 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

472 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

473 
_IO_va_li°
, *
__ª°ri˘
);

474 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

475 
_IO_va_li°
);

476 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

477 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

479 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

480 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

482 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

484 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


485 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

486 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

487 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

488 #i‡
__GNUC__
 >= 2

491 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


492 
	~<shlib-com∑t.h
>

493 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

494 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

495 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

496 c⁄° 
_IO_°dö_u£d
;

497 
wók_exã∫
 (
_IO_°dö_u£d
);

500 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


501 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

505 
	#_IO_fwide
(
__Â
, 
__mode
) \

506 ({ 
__ªsu…
 = (
__mode
); \

507 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

509 i‡((
__Â
)->
_mode
 == 0) \

511 (
__Â
)->
_mode
 = -1; \

512 
__ªsu…
 = (
__Â
)->
_mode
; \

514 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

515 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

517 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

518 
__ªsu…
; })

	)

521 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

522 
_IO_va_li°
, *
__ª°ri˘
);

523 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

524 
_IO_va_li°
);

525 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

526 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

529 #ifde‡
__LDBL_COMPAT


530 
	~<bôs/libio-ldbl.h
>

533 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 
	#LONG64


	)

74 #ifde‡
WORD64


75 
	#MUSTCOPY


	)

93 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

94 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

101 #ifde‡
WORD64


102 
	tINT64
;

103 
	tCARD64
;

104 
	#B32
 :32

	)

105 
	#B16
 :16

	)

106 #ifde‡
UNSIGNEDBITFIELDS


107 
	tINT32
;

108 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tINT16
;

114 
	#B32


	)

115 
	#B16


	)

116 #ifde‡
LONG64


117 
	tINT64
;

118 
	tINT32
;

120 
	tINT32
;

122 
	tINT16
;

125 sig√d 
	tINT8
;

127 #ifde‡
LONG64


128 
	tCARD64
;

129 
	tCARD32
;

131 
	tCARD32
;

133 #i‡!
	`deföed
(
WORD64
Ë&& !deföed(
LONG64
)

134 
	tCARD64
;

136 
	tCARD16
;

137 
	tCARD8
;

139 
CARD32
 
	tBITS32
;

140 
CARD16
 
	tBITS16
;

142 
CARD8
 
	tBYTE
;

143 
CARD8
 
	tBOOL
;

148 #i‡
	`deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

149 
	#cvtINT8toI¡
(
vÆ
Ë(((vÆË& 0x00000080Ë? ((vÆË| 0xffffffffffffff00Ë: (vÆ))

	)

150 
	#cvtINT16toI¡
(
vÆ
Ë(((vÆË& 0x00008000Ë? ((vÆË| 0xffffffffffff0000Ë: (vÆ))

	)

151 
	#cvtINT32toI¡
(
vÆ
Ë(((vÆË& 0x80000000Ë? ((vÆË| 0xffffffff00000000Ë: (vÆ))

	)

152 
	#cvtINT8toSh‹t
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

153 
	#cvtINT16toSh‹t
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

154 
	#cvtINT32toSh‹t
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

155 
	#cvtINT8toL⁄g
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

156 
	#cvtINT16toL⁄g
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

157 
	#cvtINT32toL⁄g
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

159 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

160 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

161 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

162 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

163 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

164 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

165 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

166 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

167 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

172 #ifde‡
MUSTCOPY


176 
	#NEXTPTR
(
p
,
t
Ë(((*ËpË+ 
	`SIZEOF
—))

	)

182 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_WAIT
 1

	)

64 
	#_G_NEED_STDARG_H
 1

	)

65 
	#_G_va_li°
 
__gnuc_va_li°


	)

67 
	#_G_HAVE_PRINTF_FP
 1

	)

68 
	#_G_HAVE_MMAP
 1

	)

69 
	#_G_HAVE_MREMAP
 1

	)

70 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

71 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

72 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

74 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

76 
	#_G_OPEN64
 
__›í64


	)

77 
	#_G_LSEEK64
 
__l£ek64


	)

78 
	#_G_MMAP64
 
__mm≠64


	)

79 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

82 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

84 
	#_G_BUFSIZ
 8192

	)

87 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

88 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

89 
	#_G_USING_THUNKS
 1

	)

90 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

91 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__SWBLK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

77 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3) \

146 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

147 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

148 && 
__GNUC_RH_RELEASE__
 >= 31)

149 
	#__w¨nde˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

151 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

152 
	#__îr‹de˛
(
«me
, 
msg
) \

153 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

155 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

156 
	#__w¨«âr
(
msg
)

	)

157 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

161 #i‡
__GNUC_PREREQ
 (2,97)

163 
	#__Êex¨r
 []

	)

165 #ifde‡
__GNUC__


166 
	#__Êex¨r
 [0]

	)

168 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

169 
	#__Êex¨r
 []

	)

172 
	#__Êex¨r
 [1]

	)

188 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

190 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 #ifde‡
__˝lu•lus


192 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

193 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

197 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

198 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

199 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

200 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

202 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

203 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

216 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

217 
	#__©åibuã__
(
xyz
Ë

	)

223 #i‡
__GNUC_PREREQ
 (2,96)

224 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

226 
	#__©åibuã_mÆloc__


	)

232 #i‡
__GNUC_PREREQ
 (2,96)

233 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

235 
	#__©åibuã_puª__


	)

239 #i‡
__GNUC_PREREQ
 (2,5)

240 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

242 
	#__©åibuã_c⁄°__


	)

248 #i‡
__GNUC_PREREQ
 (3,1)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

250 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

252 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

253 
	#__©åibuã_noölöe__


	)

257 #i‡
__GNUC_PREREQ
 (3,2)

258 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

260 
	#__©åibuã_dïªˇãd__


	)

269 #i‡
__GNUC_PREREQ
 (2,8)

270 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

272 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

279 #i‡
__GNUC_PREREQ
 (2,97)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

281 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

283 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

288 #i‡
__GNUC_PREREQ
 (3,3)

289 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

291 
	#__n⁄nuŒ
(
∑øms
)

	)

296 #i‡
__GNUC_PREREQ
 (3,4)

297 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

298 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

299 #i‡
__USE_FORTIFY_LEVEL
 > 0

300 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

303 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

305 #i‚de‡
__wur


306 
	#__wur


	)

310 #i‡
__GNUC_PREREQ
 (3,2)

311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 
	#__Æways_ölöe
 
__ölöe


	)

318 #i‡
__GNUC_PREREQ
 (4,3)

319 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

321 
	#__©åibuã_¨tificül__


	)

326 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


331 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

335 
	#__exã∫_ölöe
 
__ölöe


	)

336 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

344 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

345 && 
__GNUC_RH_RELEASE__
 >= 31)

346 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

347 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

354 #i‡!
__GNUC_PREREQ
 (2,8)

355 
	#__exãnsi⁄__


	)

359 #i‡!
__GNUC_PREREQ
 (2,92)

360 
	#__ª°ri˘


	)

366 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


367 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

369 #ifde‡
__GNUC__


370 
	#__ª°ri˘_¨r


	)

372 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

373 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

376 
	#__ª°ri˘_¨r


	)

381 #i‡
__GNUC__
 >= 3

382 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

384 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

387 
	~<bôs/w‹dsize.h
>

389 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


390 
	#__LDBL_COMPAT
 1

	)

391 #ifde‡
__REDIRECT


392 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

393 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

395 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

396 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

397 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

398 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

400 
	#__LDBL_REDIR_DECL
(
«me
) \

401 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

402 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

404 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

405 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

408 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


409 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

410 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

411 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

412 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

413 
	#__LDBL_REDIR_DECL
(
«me
)

	)

414 #ifde‡
__REDIRECT


415 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

417 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #i‡
__WORDSIZE
 == 64

126 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifde‡
__USE_GNU


134 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

189 
	s_±hªad_˛ónup_buf„r


191 (*
	m__routöe
) (*);

192 *
	m__¨g
;

193 
	m__ˇn˚…y≥
;

194 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

216 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifde‡
__USE_XOPEN2K


223 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

233 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

234 *(*
__°¨t_routöe
) (*),

235 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

241 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

249 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

251 #ifde‡
__USE_GNU


254 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

262 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

263 c⁄° 
time•ec
 *
__ab°ime
);

270 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

274 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

277 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

278 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

286 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

293 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

294 *
__dëach°©e
)

295 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

298 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

299 
__dëach°©e
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

304 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

305 
size_t
 *
__gu¨dsize
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

310 
size_t
 
__gu¨dsize
)

311 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

321 c⁄° 
sched_∑øm
 *
__ª°ri˘


322 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


326 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

330 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


335 
__©å
, *
__ª°ri˘
 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

340 
__öhîô
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1));

345 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

346 *
__ª°ri˘
 
__sc›e
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

350 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


355 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

363 *
__°ackaddr
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

367 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


368 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

374 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

375 
size_t
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1));

378 #ifde‡
__USE_XOPEN2K


380 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

381 **
__ª°ri˘
 
__°ackaddr
,

382 
size_t
 *
__ª°ri˘
 
__°acksize
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

388 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

389 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_GNU


395 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 c⁄° 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

402 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

403 
size_t
 
__˝u£tsize
,

404 
˝u_£t_t
 *
__˝u£t
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

420 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

421 c⁄° 
sched_∑øm
 *
__∑øm
)

422 
__THROW
 
	`__n⁄nuŒ
 ((3));

425 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

426 *
__ª°ri˘
 
__pﬁicy
,

427 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

431 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

432 
__THROW
;

435 #ifde‡
__USE_GNU


437 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

438 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

442 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2));

447 #ifde‡
__USE_UNIX98


449 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

452 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

455 #ifde‡
__USE_GNU


460 
	$±hªad_yõld
 (Ë
__THROW
;

465 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

466 c⁄° 
˝u_£t_t
 *
__˝u£t
)

467 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

471 
˝u_£t_t
 *
__˝u£t
)

472 
__THROW
 
	`__n⁄nuŒ
 ((3));

485 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

486 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

497 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

501 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

504 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

509 
	`±hªad_ã°ˇn˚l
 ();

518 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

519 
__mask_was_ßved
;

520 } 
__ˇn˚l_jmp_buf
[1];

521 *
__∑d
[4];

522 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

525 #i‚de‡
__˛ónup_f˘_©åibuã


526 
	#__˛ónup_f˘_©åibuã


	)

531 
	s__±hªad_˛ónup_‰ame


533 (*
__ˇn˚l_routöe
) (*);

534 *
__ˇn˚l_¨g
;

535 
__do_ô
;

536 
__ˇn˚l_ty≥
;

539 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


540 #ifde‡
__˝lu•lus


542 ˛as†
	c__±hªad_˛ónup_˛ass


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

549 
public
:

550 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

551 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

552 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

553 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

554 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__ˇn˚l_ty≥
); 
	}
}

556 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

566 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

572 
	#±hªad_˛ónup_p›
(
execuã
) \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

576 #ifde‡
__USE_GNU


580 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

582 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

583 
__˛‰ame
.
	`__de„r
 ()

	)

588 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

589 
__˛‰ame
.
	`__ª°‹e
 (); \

590 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

591 } 0)

	)

598 
__exã∫_ölöe
 

599 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

601 i‡(
__‰ame
->
__do_ô
)

602 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

603 
	}
}

612 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 };

	)

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
__˛‰ame
.
__do_ô
 = (
execuã
); \

623 } 0)

	)

625 #ifde‡
__USE_GNU


629 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

631 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

632 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

633 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

634 .
__do_ô
 = 1 }; \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

641 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

642 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

643 
__˛‰ame
.
__do_ô
 = (
execuã
); \

644 } 0)

	)

655 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

657 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

658 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

659 *
__ˇn˚l_¨g
 = (
¨g
); \

660 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

661 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

662 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

669 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

670 dÿ{

	)

671 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

672 
__˛ónup_f˘_©åibuã
;

676 
	#±hªad_˛ónup_p›
(
execuã
) \

679 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 i‡(
execuã
) \

681 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

682 } 0)

	)

683 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

686 #ifde‡
__USE_GNU


690 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

692 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

693 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

694 *
__ˇn˚l_¨g
 = (
¨g
); \

695 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

696 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

697 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

699 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

700 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

704 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

705 dÿ{

	)

706 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

707 
__˛ónup_f˘_©åibuã
;

712 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

715 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

716 i‡(
execuã
) \

717 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

718 
	}
} 0)

	)

719 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

720 
__˛ónup_f˘_©åibuã
;

724 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

725 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

726 #i‚de‡
SHARED


727 
	`__©åibuã__
 ((
__wók__
))

733 
__jmp_buf_èg
;

734 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

740 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

741 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

742 
__THROW
 
	`__n⁄nuŒ
 ((1));

745 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

750 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

753 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

754 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 #ifde‡
__USE_XOPEN2K


758 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 c⁄° 
time•ec
 *
__ª°ri˘


760 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

764 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

770 
__ª°ri˘
 
__muãx
,

771 *
__ª°ri˘
 
__¥io˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

777 
__¥io˚ûög
,

778 *
__ª°ri˘
 
__ﬁd_˚ûög
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

782 #ifde‡
__USE_XOPEN2K8


784 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 #ifde‡
__USE_GNU


787 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__psh¨ed
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__psh¨ed
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


817 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


818 
__©å
, *
__ª°ri˘
 
__köd
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

824 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

830 
__ª°ri˘
 
__©å
,

831 *
__ª°ri˘
 
__¥Ÿocﬁ
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

837 
__¥Ÿocﬁ
)

838 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥io˚ûög
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥io˚ûög
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_XOPEN2K


853 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

854 *
__robu°√ss
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 #ifde‡
__USE_GNU


857 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

858 *
__robu°√ss
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

863 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

864 
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


881 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 c⁄° 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2K


912 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

913 c⁄° 
time•ec
 *
__ª°ri˘


914 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

918 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

934 
__ª°ri˘
 
__©å
,

935 *
__ª°ri˘
 
__psh¨ed
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

939 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

940 
__psh¨ed
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__¥ef
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

959 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

960 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

965 
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

969 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

973 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

981 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

982 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

994 
	`__n⁄nuŒ
 ((1, 2, 3));

999 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((1));

1003 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1008 
__ª°ri˘
 
__©å
,

1009 *
__ª°ri˘
 
__psh¨ed
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1013 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1014 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 #ifde‡
__USE_XOPEN2K


1018 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__˛ockid_t
 
__˛ock_id
)

1026 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1035 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1040 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1044 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1048 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1060 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1061 
__©å
, 
__cou¡
)

1062 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1066 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1070 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1083 
__ª°ri˘
 
__©å
,

1084 *
__ª°ri˘
 
__psh¨ed
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1088 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1089 
__psh¨ed
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1103 (*
__de°r_fun˘i⁄
) (*))

1104 
__THROW
 
	`__n⁄nuŒ
 ((1));

1107 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1110 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1114 c⁄° *
__poöãr
Ë
__THROW
 ;

1117 #ifde‡
__USE_XOPEN2K


1119 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1120 
__˛ockid_t
 *
__˛ock_id
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((2));

1136 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1137 (*
__∑ª¡
) (),

1138 (*
__chûd
Ë()Ë
__THROW
;

1141 #ifde‡
__USE_EXTERN_INLINES


1143 
__exã∫_ölöe
 

1144 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1146  
__thªad1
 =
__thªad2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
141
2977
SDL.h
SDL_active.h
SDL_audio.h
SDL_byteorder.h
SDL_cdrom.h
SDL_config-x86_64.h
SDL_config.h
SDL_cpuinfo.h
SDL_endian.h
SDL_error.h
SDL_events.h
SDL_framerate.h
SDL_getenv.h
SDL_gfxBlitFunc.h
SDL_gfxPrimitives.h
SDL_gfxPrimitives_font.h
SDL_image.h
SDL_imageFilter.h
SDL_joystick.h
SDL_keyboard.h
SDL_keysym.h
SDL_loadso.h
SDL_main.h
SDL_mixer.h
SDL_mouse.h
SDL_mutex.h
SDL_name.h
SDL_net.h
SDL_opengl.h
SDL_platform.h
SDL_quit.h
SDL_rotozoom.h
SDL_rwops.h
SDL_sound.h
SDL_start/lesson11/lesson11.cpp
SDL_start/lesson12/lesson12.cpp
SDL_stdinc.h
SDL_syswm.h
SDL_thread.h
SDL_timer.h
SDL_ttf.h
SDL_types.h
SDL_version.h
SDL_video.h
background.cpp
begin_code.h
close_code.h
defisland.c
lesson16/lesson16.cpp
luck.c
luck.h
main.cpp
mysource.cpp
picture.c
vedio.c
/usr/include/GL/gl.h
/usr/include/GL/glu.h
/usr/include/SDL/SDL.h
/usr/include/SDL/SDL_image.h
/usr/include/SDL/SDL_mixer.h
/usr/include/SDL/SDL_ttf.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/alloca.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/iconv.h
/usr/include/inttypes.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/types.h
mylib
/usr/include/GL/glext.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/X11/Xmd.h
/usr/include/_G_config.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/libc-lock.h
/usr/include/bits/timex.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
